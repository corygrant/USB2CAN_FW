
USB2CAN_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b4  080099b4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  200001e4  08009ba0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08009ba0  00021c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a02  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003637  00000000  00000000  00035c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00039250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a018  00000000  00000000  0003a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010932  00000000  00000000  000549f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f67  00000000  00000000  00065322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e8  00000000  00000000  000ec2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009924 	.word	0x08009924

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08009924 	.word	0x08009924

080001c8 <LedInit>:
 *      Author: coryg
 */

#include "led.h"

void LedInit(Led_t* stLed, GPIO_TypeDef *pPort, uint16_t nPin){
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	80fb      	strh	r3, [r7, #6]
  stLed->pPort = pPort;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
  stLed->nPin = nPin;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	88fa      	ldrh	r2, [r7, #6]
 80001e0:	809a      	strh	r2, [r3, #4]
}
 80001e2:	bf00      	nop
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LedUpdate>:

void LedUpdate(Led_t* stLed){
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint32_t nNow = HAL_GetTick();
 80001f6:	f001 fb09 	bl	800180c <HAL_GetTick>
 80001fa:	60f8      	str	r0, [r7, #12]

  if(nNow < stLed->nOnUntil){
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	429a      	cmp	r2, r3
 8000204:	d20a      	bcs.n	800021c <LedUpdate+0x2e>
    stLed->pPort->ODR |= stLed->nPin;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	695a      	ldr	r2, [r3, #20]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	889b      	ldrh	r3, [r3, #4]
 8000210:	4619      	mov	r1, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	430a      	orrs	r2, r1
 8000218:	615a      	str	r2, [r3, #20]
  } else{
    stLed->pPort->ODR &= ~stLed->nPin;
  }
}
 800021a:	e00a      	b.n	8000232 <LedUpdate+0x44>
    stLed->pPort->ODR &= ~stLed->nPin;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	695a      	ldr	r2, [r3, #20]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	889b      	ldrh	r3, [r3, #4]
 8000226:	43db      	mvns	r3, r3
 8000228:	4619      	mov	r1, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	400a      	ands	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <LedBlink>:

void LedBlink(Led_t* stLed, uint16_t nOnTime){
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	460b      	mov	r3, r1
 8000244:	807b      	strh	r3, [r7, #2]
  stLed->nOnUntil = HAL_GetTick() + nOnTime;
 8000246:	f001 fae1 	bl	800180c <HAL_GetTick>
 800024a:	4602      	mov	r2, r0
 800024c:	887b      	ldrh	r3, [r7, #2]
 800024e:	441a      	add	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	4905      	ldr	r1, [pc, #20]	; (8000278 <USBD_CDC_Init+0x1c>)
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <USBD_CDC_Init+0x20>)
 8000266:	f007 fd9c 	bl	8007da2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 800026a:	4905      	ldr	r1, [pc, #20]	; (8000280 <USBD_CDC_Init+0x24>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <USBD_CDC_Init+0x20>)
 800026e:	f007 fdb2 	bl	8007dd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000f64 	.word	0x20000f64
 800027c:	20000464 	.word	0x20000464
 8000280:	20000728 	.word	0x20000728

08000284 <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b23      	cmp	r3, #35	; 0x23
 80002a8:	d866      	bhi.n	8000378 <USBD_CDC_Control+0xe4>
 80002aa:	a201      	add	r2, pc, #4	; (adr r2, 80002b0 <USBD_CDC_Control+0x1c>)
 80002ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b0:	08000379 	.word	0x08000379
 80002b4:	08000379 	.word	0x08000379
 80002b8:	08000379 	.word	0x08000379
 80002bc:	08000379 	.word	0x08000379
 80002c0:	08000379 	.word	0x08000379
 80002c4:	08000379 	.word	0x08000379
 80002c8:	08000379 	.word	0x08000379
 80002cc:	08000379 	.word	0x08000379
 80002d0:	08000379 	.word	0x08000379
 80002d4:	08000379 	.word	0x08000379
 80002d8:	08000379 	.word	0x08000379
 80002dc:	08000379 	.word	0x08000379
 80002e0:	08000379 	.word	0x08000379
 80002e4:	08000379 	.word	0x08000379
 80002e8:	08000379 	.word	0x08000379
 80002ec:	08000379 	.word	0x08000379
 80002f0:	08000379 	.word	0x08000379
 80002f4:	08000379 	.word	0x08000379
 80002f8:	08000379 	.word	0x08000379
 80002fc:	08000379 	.word	0x08000379
 8000300:	08000379 	.word	0x08000379
 8000304:	08000379 	.word	0x08000379
 8000308:	08000379 	.word	0x08000379
 800030c:	08000379 	.word	0x08000379
 8000310:	08000379 	.word	0x08000379
 8000314:	08000379 	.word	0x08000379
 8000318:	08000379 	.word	0x08000379
 800031c:	08000379 	.word	0x08000379
 8000320:	08000379 	.word	0x08000379
 8000324:	08000379 	.word	0x08000379
 8000328:	08000379 	.word	0x08000379
 800032c:	08000379 	.word	0x08000379
 8000330:	08000379 	.word	0x08000379
 8000334:	08000341 	.word	0x08000341
 8000338:	08000379 	.word	0x08000379
 800033c:	08000379 	.word	0x08000379
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	22c2      	movs	r2, #194	; 0xc2
 800034c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3302      	adds	r3, #2
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	3303      	adds	r3, #3
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	3305      	adds	r3, #5
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3306      	adds	r3, #6
 8000372:	2208      	movs	r2, #8
 8000374:	701a      	strb	r2, [r3, #0]
    break;
 8000376:	e000      	b.n	800037a <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000378:	bf00      	nop
  }

  return (USBD_OK);
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]


  struct USBD_CAN_Frame *stFrame = queue_pop_front_i(qFramePool);
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <USBD_CDC_Receive+0x64>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fd63 	bl	8000e62 <queue_pop_front_i>
 800039c:	60f8      	str	r0, [r7, #12]
  if(stFrame){
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d016      	beq.n	80003d2 <USBD_CDC_Receive+0x4a>
    SLCAN_Rx(Buf, Len, stFrame);
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	6839      	ldr	r1, [r7, #0]
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f000 fd84 	bl	8000eb6 <SLCAN_Rx>
    if(queue_push_back_i(qFromHost, stFrame) == false){
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <USBD_CDC_Receive+0x68>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68f9      	ldr	r1, [r7, #12]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fd25 	bl	8000e04 <queue_push_back_i>
 80003ba:	4603      	mov	r3, r0
 80003bc:	f083 0301 	eor.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d005      	beq.n	80003d2 <USBD_CDC_Receive+0x4a>
      queue_push_back_i(qFramePool, stFrame);
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <USBD_CDC_Receive+0x64>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	68f9      	ldr	r1, [r7, #12]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fd19 	bl	8000e04 <queue_push_back_i>
    }
  }

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	4807      	ldr	r0, [pc, #28]	; (80003f4 <USBD_CDC_Receive+0x6c>)
 80003d6:	f007 fcfe 	bl	8007dd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <USBD_CDC_Receive+0x6c>)
 80003dc:	f007 fd3e 	bl	8007e5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000f50 	.word	0x20000f50
 80003f0:	20000460 	.word	0x20000460
 80003f4:	20000464 	.word	0x20000464

080003f8 <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <USBD_CDC_Transmit+0x48>)
 800040a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800040e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 800041a:	2301      	movs	r3, #1
 800041c:	e00b      	b.n	8000436 <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 800041e:	887b      	ldrh	r3, [r7, #2]
 8000420:	461a      	mov	r2, r3
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	4806      	ldr	r0, [pc, #24]	; (8000440 <USBD_CDC_Transmit+0x48>)
 8000426:	f007 fcbc 	bl	8007da2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <USBD_CDC_Transmit+0x48>)
 800042c:	f007 fce7 	bl	8007dfe <USBD_CDC_TransmitPacket>
 8000430:	4603      	mov	r3, r0
 8000432:	73fb      	strb	r3, [r7, #15]
  return result;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000464 	.word	0x20000464

08000444 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000450:	2100      	movs	r1, #0
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f001 fd36 	bl	8001ec4 <HAL_CAN_GetRxMessage>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800045e:	f000 fbe1 	bl	8000c24 <Error_Handler>
  }

  //Add message to CAN RX queue
  struct USBD_CAN_Frame *stFrame = queue_pop_front_i(qFramePool);
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fcfb 	bl	8000e62 <queue_pop_front_i>
 800046c:	60f8      	str	r0, [r7, #12]
  if(stFrame != 0){
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d014      	beq.n	800049e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    memcpy(&stFrame->stRxHeader, &stCanRxHeader, sizeof(stFrame->stRxHeader));
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3319      	adds	r3, #25
 8000478:	221c      	movs	r2, #28
 800047a:	490e      	ldr	r1, [pc, #56]	; (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800047c:	4618      	mov	r0, r3
 800047e:	f009 f9b3 	bl	80097e8 <memcpy>
    memcpy(&stFrame->nData, nCanRxData, sizeof(stFrame->nData));
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3335      	adds	r3, #53	; 0x35
 8000486:	490a      	ldr	r1, [pc, #40]	; (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000488:	461a      	mov	r2, r3
 800048a:	460b      	mov	r3, r1
 800048c:	cb03      	ldmia	r3!, {r0, r1}
 800048e:	6010      	str	r0, [r2, #0]
 8000490:	6051      	str	r1, [r2, #4]
    queue_push_back_i(qToHost, stFrame);
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	68f9      	ldr	r1, [r7, #12]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fcb3 	bl	8000e04 <queue_push_back_i>
  }

  LedBlink(&stLedRx, 20);
 800049e:	2114      	movs	r1, #20
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80004a2:	f7ff feca 	bl	800023a <LedBlink>
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000021c 	.word	0x2000021c
 80004b4:	20000200 	.word	0x20000200
 80004b8:	20000f50 	.word	0x20000f50
 80004bc:	20001764 	.word	0x20001764
 80004c0:	20000f54 	.word	0x20000f54

080004c4 <CAN_Enable>:

void CAN_Enable()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0
  if(eCanBusState == OFF_BUS){
 80004ca:	4b54      	ldr	r3, [pc, #336]	; (800061c <CAN_Enable+0x158>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f040 809f 	bne.w	8000612 <CAN_Enable+0x14e>
    uint32_t nPrescaler = 4; //Default 500k
 80004d4:	2304      	movs	r3, #4
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t nTimeSeq1 = CAN_BS1_15TQ;
 80004d8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (eCanBitRate)
 80004de:	4b50      	ldr	r3, [pc, #320]	; (8000620 <CAN_Enable+0x15c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b09      	cmp	r3, #9
 80004e4:	d834      	bhi.n	8000550 <CAN_Enable+0x8c>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <CAN_Enable+0x28>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	08000515 	.word	0x08000515
 80004f0:	0800051b 	.word	0x0800051b
 80004f4:	08000521 	.word	0x08000521
 80004f8:	08000527 	.word	0x08000527
 80004fc:	0800052d 	.word	0x0800052d
 8000500:	08000533 	.word	0x08000533
 8000504:	08000539 	.word	0x08000539
 8000508:	0800053f 	.word	0x0800053f
 800050c:	0800054b 	.word	0x0800054b
 8000510:	08000551 	.word	0x08000551
    {
      case CAN_BITRATE_10K:
        nPrescaler = 200;
 8000514:	23c8      	movs	r3, #200	; 0xc8
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000518:	e01a      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_20K:
        nPrescaler = 100;
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800051e:	e017      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_50K:
        nPrescaler = 40;
 8000520:	2328      	movs	r3, #40	; 0x28
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000524:	e014      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_100K:
        nPrescaler = 20;
 8000526:	2314      	movs	r3, #20
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800052a:	e011      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_125K:
        nPrescaler = 16;
 800052c:	2310      	movs	r3, #16
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000530:	e00e      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_250K:
        nPrescaler = 8;
 8000532:	2308      	movs	r3, #8
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000536:	e00b      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_500K:
        nPrescaler = 4;
 8000538:	2304      	movs	r3, #4
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800053c:	e008      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_750K:
        nPrescaler = 8;
 800053e:	2308      	movs	r3, #8
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
        nTimeSeq1 = CAN_BS1_13TQ;
 8000542:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8000548:	e002      	b.n	8000550 <CAN_Enable+0x8c>
      case CAN_BITRATE_1000K:
        nPrescaler = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800054e:	bf00      	nop
        //Do nothing - use default vals
        assert_param(0);
        break;
    }

    hcan.Instance = CAN;
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <CAN_Enable+0x160>)
 8000552:	4a35      	ldr	r2, [pc, #212]	; (8000628 <CAN_Enable+0x164>)
 8000554:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = nPrescaler;
 8000556:	4a33      	ldr	r2, [pc, #204]	; (8000624 <CAN_Enable+0x160>)
 8000558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055a:	6053      	str	r3, [r2, #4]
    hcan.Init.Mode = nCanMode;
 800055c:	4b33      	ldr	r3, [pc, #204]	; (800062c <CAN_Enable+0x168>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a30      	ldr	r2, [pc, #192]	; (8000624 <CAN_Enable+0x160>)
 8000562:	6093      	str	r3, [r2, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <CAN_Enable+0x160>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = nTimeSeq1;
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <CAN_Enable+0x160>)
 800056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056e:	6113      	str	r3, [r2, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <CAN_Enable+0x160>)
 8000572:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000576:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <CAN_Enable+0x160>)
 800057a:	2200      	movs	r2, #0
 800057c:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <CAN_Enable+0x160>)
 8000580:	2200      	movs	r2, #0
 8000582:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <CAN_Enable+0x160>)
 8000586:	2200      	movs	r2, #0
 8000588:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = eAutoRetry;
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <CAN_Enable+0x16c>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <CAN_Enable+0x160>)
 8000590:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <CAN_Enable+0x160>)
 8000594:	2200      	movs	r2, #0
 8000596:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <CAN_Enable+0x160>)
 800059a:	2200      	movs	r2, #0
 800059c:	775a      	strb	r2, [r3, #29]

    if (HAL_CAN_Init(&hcan) != HAL_OK)
 800059e:	4821      	ldr	r0, [pc, #132]	; (8000624 <CAN_Enable+0x160>)
 80005a0:	f001 f940 	bl	8001824 <HAL_CAN_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <CAN_Enable+0xea>
      Error_Handler();
 80005aa:	f000 fb3b 	bl	8000c24 <Error_Handler>
    //---------------------------------------------------------------
    //Set CAN RX filter
    //---------------------------------------------------------------
    CAN_FilterTypeDef  sFilterConfig;

    sFilterConfig.FilterBank = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005d2:	230e      	movs	r3, #14
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	4812      	ldr	r0, [pc, #72]	; (8000624 <CAN_Enable+0x160>)
 80005dc:	f001 fa40 	bl	8001a60 <HAL_CAN_ConfigFilter>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <CAN_Enable+0x126>
      Error_Handler();
 80005e6:	f000 fb1d 	bl	8000c24 <Error_Handler>

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <CAN_Enable+0x160>)
 80005ec:	f001 fb02 	bl	8001bf4 <HAL_CAN_Start>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <CAN_Enable+0x136>
      Error_Handler();
 80005f6:	f000 fb15 	bl	8000c24 <Error_Handler>

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005fa:	2102      	movs	r1, #2
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <CAN_Enable+0x160>)
 80005fe:	f001 fd73 	bl	80020e8 <HAL_CAN_ActivateNotification>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <CAN_Enable+0x148>
      Error_Handler();
 8000608:	f000 fb0c 	bl	8000c24 <Error_Handler>

    eCanBusState = ON_BUS;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <CAN_Enable+0x158>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
  }
}
 8000612:	bf00      	nop
 8000614:	3730      	adds	r7, #48	; 0x30
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000228 	.word	0x20000228
 8000620:	20000000 	.word	0x20000000
 8000624:	20000f28 	.word	0x20000f28
 8000628:	40006400 	.word	0x40006400
 800062c:	2000022c 	.word	0x2000022c
 8000630:	20001774 	.word	0x20001774

08000634 <CAN_Disable>:

void CAN_Disable()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  if(eCanBusState == ON_BUS){
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <CAN_Disable+0x48>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11b      	bne.n	8000678 <CAN_Disable+0x44>
    if (HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000640:	2102      	movs	r1, #2
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <CAN_Disable+0x4c>)
 8000644:	f001 fd76 	bl	8002134 <HAL_CAN_DeactivateNotification>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <CAN_Disable+0x1e>
      Error_Handler();
 800064e:	f000 fae9 	bl	8000c24 <Error_Handler>

    if (HAL_CAN_Stop(&hcan) != HAL_OK)
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <CAN_Disable+0x4c>)
 8000654:	f001 fb12 	bl	8001c7c <HAL_CAN_Stop>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <CAN_Disable+0x2e>
      Error_Handler();
 800065e:	f000 fae1 	bl	8000c24 <Error_Handler>

    if (HAL_CAN_DeInit(&hcan) != HAL_OK)
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <CAN_Disable+0x4c>)
 8000664:	f001 f9d9 	bl	8001a1a <HAL_CAN_DeInit>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <CAN_Disable+0x3e>
      Error_Handler();
 800066e:	f000 fad9 	bl	8000c24 <Error_Handler>

    eCanBusState = OFF_BUS;
 8000672:	4b02      	ldr	r3, [pc, #8]	; (800067c <CAN_Disable+0x48>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  }
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000228 	.word	0x20000228
 8000680:	20000f28 	.word	0x20000f28

08000684 <CAN_SetBitRate>:

void CAN_SetBitRate(uint8_t nBitRate)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <CAN_SetBitRate+0x2c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d105      	bne.n	80006a2 <CAN_SetBitRate+0x1e>
    if(nBitRate < CAN_BITRATE_INVALID){
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b08      	cmp	r3, #8
 800069a:	d802      	bhi.n	80006a2 <CAN_SetBitRate+0x1e>
      eCanBitRate = (enum CAN_BITRATE)nBitRate;
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <CAN_SetBitRate+0x30>)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	7013      	strb	r3, [r2, #0]
    }
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000228 	.word	0x20000228
 80006b4:	20000000 	.word	0x20000000

080006b8 <CAN_SetMode>:

void CAN_SetMode(uint8_t nMode)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <CAN_SetMode+0x34>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <CAN_SetMode+0x26>
    if(nMode == 1)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d103      	bne.n	80006d8 <CAN_SetMode+0x20>
      nCanMode = 1;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <CAN_SetMode+0x38>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
    else
      nCanMode = 0;
  }
}
 80006d6:	e002      	b.n	80006de <CAN_SetMode+0x26>
      nCanMode = 0;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <CAN_SetMode+0x38>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000228 	.word	0x20000228
 80006f0:	2000022c 	.word	0x2000022c

080006f4 <CAN_SetAutoRetry>:

void CAN_SetAutoRetry(uint8_t nAutoRetry)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <CAN_SetAutoRetry+0x34>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <CAN_SetAutoRetry+0x26>
    if(nAutoRetry == 1)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d103      	bne.n	8000714 <CAN_SetAutoRetry+0x20>
      eAutoRetry = ENABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <CAN_SetAutoRetry+0x38>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
    else
      eAutoRetry = DISABLE;
  }
}
 8000712:	e002      	b.n	800071a <CAN_SetAutoRetry+0x26>
      eAutoRetry = DISABLE;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <CAN_SetAutoRetry+0x38>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000228 	.word	0x20000228
 800072c:	20001774 	.word	0x20001774

08000730 <HAL_RCC_CSSCallback>:

void HAL_RCC_CSSCallback(void) {
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  //Catch the HSE failure and take proper actions
  while (1)
 8000734:	e7fe      	b.n	8000734 <HAL_RCC_CSSCallback+0x4>
	...

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f001 f80b 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f98d 	bl	8000a60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_RCC_EnableCSS();
 8000746:	f004 fe23 	bl	8005390 <HAL_RCC_EnableCSS>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f9eb 	bl	8000b24 <MX_GPIO_Init>
  MX_CAN_Init();
 800074e:	f000 f9e2 	bl	8000b16 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000752:	2200      	movs	r2, #0
 8000754:	49b6      	ldr	r1, [pc, #728]	; (8000a30 <main+0x2f8>)
 8000756:	48b7      	ldr	r0, [pc, #732]	; (8000a34 <main+0x2fc>)
 8000758:	f007 fbaa 	bl	8007eb0 <USBD_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <main+0x2e>
  {
    Error_Handler();
 8000762:	f000 fa5f 	bl	8000c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000766:	49b4      	ldr	r1, [pc, #720]	; (8000a38 <main+0x300>)
 8000768:	48b2      	ldr	r0, [pc, #712]	; (8000a34 <main+0x2fc>)
 800076a:	f007 fbcc 	bl	8007f06 <USBD_RegisterClass>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <main+0x40>
  {
    Error_Handler();
 8000774:	f000 fa56 	bl	8000c24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface) != USBD_OK)
 8000778:	49b0      	ldr	r1, [pc, #704]	; (8000a3c <main+0x304>)
 800077a:	48ae      	ldr	r0, [pc, #696]	; (8000a34 <main+0x2fc>)
 800077c:	f007 fafa 	bl	8007d74 <USBD_CDC_RegisterInterface>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <main+0x52>
  {
    Error_Handler();
 8000786:	f000 fa4d 	bl	8000c24 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 800078a:	48aa      	ldr	r0, [pc, #680]	; (8000a34 <main+0x2fc>)
 800078c:	f007 fbd5 	bl	8007f3a <USBD_Start>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <main+0x62>
  {
    Error_Handler();
 8000796:	f000 fa45 	bl	8000c24 <Error_Handler>
  }

  //Points to frame memory location
  qFramePool  = queue_create(CAN_QUEUE_SIZE);
 800079a:	2040      	movs	r0, #64	; 0x40
 800079c:	f000 fa78 	bl	8000c90 <queue_create>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4aa7      	ldr	r2, [pc, #668]	; (8000a40 <main+0x308>)
 80007a4:	6013      	str	r3, [r2, #0]

  //Queue of pointers to pointers popped from the frame pool
  qFromHost   = queue_create(CAN_QUEUE_SIZE);
 80007a6:	2040      	movs	r0, #64	; 0x40
 80007a8:	f000 fa72 	bl	8000c90 <queue_create>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4aa5      	ldr	r2, [pc, #660]	; (8000a44 <main+0x30c>)
 80007b0:	6013      	str	r3, [r2, #0]

  //Queue of pointers to pointers popped from the frame pool
  qToHost     = queue_create(CAN_QUEUE_SIZE);
 80007b2:	2040      	movs	r0, #64	; 0x40
 80007b4:	f000 fa6c 	bl	8000c90 <queue_create>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4aa3      	ldr	r2, [pc, #652]	; (8000a48 <main+0x310>)
 80007bc:	6013      	str	r3, [r2, #0]

  //Allocate memory that the frame pool points to
  struct USBD_CAN_Frame *msgbuf = calloc(CAN_QUEUE_SIZE, sizeof(struct USBD_CAN_Frame));
 80007be:	213d      	movs	r1, #61	; 0x3d
 80007c0:	2040      	movs	r0, #64	; 0x40
 80007c2:	f008 ffdf 	bl	8009784 <calloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  for (unsigned i=0; i<CAN_QUEUE_SIZE; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
 80007ce:	e00f      	b.n	80007f0 <main+0xb8>
    //Fill the frame pool with pointers to the memory that was just allocated
    queue_push_back(qFramePool, &msgbuf[i]);
 80007d0:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <main+0x308>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007d6:	4613      	mov	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007e2:	4413      	add	r3, r2
 80007e4:	4619      	mov	r1, r3
 80007e6:	f000 fa6d 	bl	8000cc4 <queue_push_back>
  for (unsigned i=0; i<CAN_QUEUE_SIZE; i++) {
 80007ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ec:	3301      	adds	r3, #1
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
 80007f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007f2:	2b3f      	cmp	r3, #63	; 0x3f
 80007f4:	d9ec      	bls.n	80007d0 <main+0x98>
  }

  LedInit(&stLedRx, LED1_GPIO_Port, LED1_Pin);
 80007f6:	2220      	movs	r2, #32
 80007f8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007fc:	4893      	ldr	r0, [pc, #588]	; (8000a4c <main+0x314>)
 80007fe:	f7ff fce3 	bl	80001c8 <LedInit>
  LedInit(&stLedTx, LED2_GPIO_Port, LED2_Pin);
 8000802:	2240      	movs	r2, #64	; 0x40
 8000804:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000808:	4891      	ldr	r0, [pc, #580]	; (8000a50 <main+0x318>)
 800080a:	f7ff fcdd 	bl	80001c8 <LedInit>

  LedBlink(&stLedRx, 1000);
 800080e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000812:	488e      	ldr	r0, [pc, #568]	; (8000a4c <main+0x314>)
 8000814:	f7ff fd11 	bl	800023a <LedBlink>
  LedBlink(&stLedTx, 1000);
 8000818:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800081c:	488c      	ldr	r0, [pc, #560]	; (8000a50 <main+0x318>)
 800081e:	f7ff fd0c 	bl	800023a <LedBlink>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    LedUpdate(&stLedTx);
 8000822:	488b      	ldr	r0, [pc, #556]	; (8000a50 <main+0x318>)
 8000824:	f7ff fce3 	bl	80001ee <LedUpdate>
    LedUpdate(&stLedRx);
 8000828:	4888      	ldr	r0, [pc, #544]	; (8000a4c <main+0x314>)
 800082a:	f7ff fce0 	bl	80001ee <LedUpdate>

    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !nUsbConnected){
 800082e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00e      	beq.n	800085a <main+0x122>
 800083c:	4b85      	ldr	r3, [pc, #532]	; (8000a54 <main+0x31c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10a      	bne.n	800085a <main+0x122>
      USB_PU_GPIO_Port->ODR |= USB_PU_Pin;
 8000844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	6153      	str	r3, [r2, #20]
      nUsbConnected = 1;
 8000854:	4b7f      	ldr	r3, [pc, #508]	; (8000a54 <main+0x31c>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && nUsbConnected){
 800085a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10e      	bne.n	8000886 <main+0x14e>
 8000868:	4b7a      	ldr	r3, [pc, #488]	; (8000a54 <main+0x31c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00a      	beq.n	8000886 <main+0x14e>
      USB_PU_GPIO_Port->ODR &= ~USB_PU_Pin;
 8000870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800087e:	6153      	str	r3, [r2, #20]
      nUsbConnected = 0;
 8000880:	4b74      	ldr	r3, [pc, #464]	; (8000a54 <main+0x31c>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]

    //Check for messages in USB To Host queue
    //Send to USB host
    //If success - add pointer back to frame pool
    //If failed - add pointer back to the front of the to host queue
    struct USBD_CAN_Frame *stToHostFrame = queue_pop_front(qToHost);
 8000886:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <main+0x310>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fa89 	bl	8000da2 <queue_pop_front>
 8000890:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(stToHostFrame != 0){
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	2b00      	cmp	r3, #0
 8000896:	d01f      	beq.n	80008d8 <main+0x1a0>
      //Build USB array
      uint8_t nUsbData[30];
      uint8_t nUsbDataLen = SLCAN_Tx(stToHostFrame, nUsbData);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800089e:	f000 fcf1 	bl	8001284 <SLCAN_Tx>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

      if(USBD_CDC_Transmit(nUsbData, (uint16_t)nUsbDataLen) == USBD_OK){
 80008a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fda0 	bl	80003f8 <USBD_CDC_Transmit>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <main+0x194>
        queue_push_back(qFramePool, stToHostFrame);
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <main+0x308>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f9fd 	bl	8000cc4 <queue_push_back>
 80008ca:	e005      	b.n	80008d8 <main+0x1a0>
      } else{
        queue_push_front(qToHost, stToHostFrame);
 80008cc:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <main+0x310>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa2c 	bl	8000d30 <queue_push_front>
      }
    }

    struct USBD_CAN_Frame *stFromHostFrame = queue_pop_front(qFromHost);
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <main+0x30c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa60 	bl	8000da2 <queue_pop_front>
 80008e2:	6278      	str	r0, [r7, #36]	; 0x24
    if(stFromHostFrame != 0){
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 809b 	beq.w	8000a22 <main+0x2ea>
      switch(stFromHostFrame->eUsbdCmd){
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3b41      	subs	r3, #65	; 0x41
 80008f2:	2b15      	cmp	r3, #21
 80008f4:	d867      	bhi.n	80009c6 <main+0x28e>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <main+0x1c4>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009c7 	.word	0x080009c7
 8000904:	08000967 	.word	0x08000967
 8000908:	080009c7 	.word	0x080009c7
 800090c:	080009c7 	.word	0x080009c7
 8000910:	080009c7 	.word	0x080009c7
 8000914:	080009c7 	.word	0x080009c7
 8000918:	080009c7 	.word	0x080009c7
 800091c:	080009c7 	.word	0x080009c7
 8000920:	080009c7 	.word	0x080009c7
 8000924:	080009c7 	.word	0x080009c7
 8000928:	080009c7 	.word	0x080009c7
 800092c:	08000993 	.word	0x08000993
 8000930:	080009c7 	.word	0x080009c7
 8000934:	08000955 	.word	0x08000955
 8000938:	080009c7 	.word	0x080009c7
 800093c:	080009c7 	.word	0x080009c7
 8000940:	080009c7 	.word	0x080009c7
 8000944:	08000979 	.word	0x08000979
 8000948:	080009c7 	.word	0x080009c7
 800094c:	080009c7 	.word	0x080009c7
 8000950:	08000a27 	.word	0x08000a27
      case USBD_CMD_OPEN_CAN:
        CAN_Enable();
 8000954:	f7ff fdb6 	bl	80004c4 <CAN_Enable>
        queue_push_back(qFramePool, stFromHostFrame);
 8000958:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <main+0x308>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f9b0 	bl	8000cc4 <queue_push_back>
        break;
 8000964:	e062      	b.n	8000a2c <main+0x2f4>

      case USBD_CMD_CLOSE_CAN:
        CAN_Disable();
 8000966:	f7ff fe65 	bl	8000634 <CAN_Disable>
        queue_push_back(qFramePool, stFromHostFrame);
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <main+0x308>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f9a7 	bl	8000cc4 <queue_push_back>
        break;
 8000976:	e059      	b.n	8000a2c <main+0x2f4>

      case USBD_CMD_SET_CAN_BITRATE:
        CAN_SetBitRate(stFromHostFrame->nData[1]);
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe80 	bl	8000684 <CAN_SetBitRate>
        queue_push_back(qFramePool, stFromHostFrame);
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <main+0x308>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f99a 	bl	8000cc4 <queue_push_back>
        break;
 8000990:	e04c      	b.n	8000a2c <main+0x2f4>

      case USBD_CMD_SET_CAN_MODE:
        CAN_SetMode(stFromHostFrame->nData[1]);
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe8d 	bl	80006b8 <CAN_SetMode>
        queue_push_back(qFramePool, stFromHostFrame);
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <main+0x308>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f98d 	bl	8000cc4 <queue_push_back>
        break;
 80009aa:	e03f      	b.n	8000a2c <main+0x2f4>

      case USBD_CMD_SET_CAN_AUTORETRY:
        CAN_SetAutoRetry(stFromHostFrame->nData[1]);
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe9e 	bl	80006f4 <CAN_SetAutoRetry>
        queue_push_back(qFramePool, stFromHostFrame);
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <main+0x308>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f980 	bl	8000cc4 <queue_push_back>
        break;
 80009c4:	e032      	b.n	8000a2c <main+0x2f4>

      case USBD_CMD_GET_VERSION:
        break;

      default:
        if((stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT) ||
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b74      	cmp	r3, #116	; 0x74
 80009cc:	d00b      	beq.n	80009e6 <main+0x2ae>
            (stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT) ||
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	781b      	ldrb	r3, [r3, #0]
        if((stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT) ||
 80009d2:	2b72      	cmp	r3, #114	; 0x72
 80009d4:	d007      	beq.n	80009e6 <main+0x2ae>
            (stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT) ||
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	781b      	ldrb	r3, [r3, #0]
            (stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT) ||
 80009da:	2b54      	cmp	r3, #84	; 0x54
 80009dc:	d003      	beq.n	80009e6 <main+0x2ae>
            (stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_29BIT)){
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	781b      	ldrb	r3, [r3, #0]
            (stFromHostFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT) ||
 80009e2:	2b52      	cmp	r3, #82	; 0x52
 80009e4:	d121      	bne.n	8000a2a <main+0x2f2>
          //Add to queue
          if(HAL_CAN_AddTxMessage(&hcan, &stFromHostFrame->stTxHeader, stFromHostFrame->nData, &nCanTxMailbox) == HAL_OK){
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	1c59      	adds	r1, r3, #1
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f103 0235 	add.w	r2, r3, #53	; 0x35
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <main+0x320>)
 80009f2:	481a      	ldr	r0, [pc, #104]	; (8000a5c <main+0x324>)
 80009f4:	f001 f98b 	bl	8001d0e <HAL_CAN_AddTxMessage>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <main+0x2dc>
            //Tx success - put pointer back in memory pool
            LedBlink(&stLedTx, 20);
 80009fe:	2114      	movs	r1, #20
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <main+0x318>)
 8000a02:	f7ff fc1a 	bl	800023a <LedBlink>
            queue_push_back(qFramePool, stFromHostFrame);
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <main+0x308>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f959 	bl	8000cc4 <queue_push_back>
          }else{
            //Tx failed - add back to front of queue
            queue_push_front(qFromHost, stFromHostFrame);
          }
        }
        break;
 8000a12:	e00a      	b.n	8000a2a <main+0x2f2>
            queue_push_front(qFromHost, stFromHostFrame);
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <main+0x30c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f988 	bl	8000d30 <queue_push_front>
        break;
 8000a20:	e003      	b.n	8000a2a <main+0x2f2>
      }
    }
 8000a22:	bf00      	nop
 8000a24:	e6fd      	b.n	8000822 <main+0xea>
        break;
 8000a26:	bf00      	nop
 8000a28:	e6fb      	b.n	8000822 <main+0xea>
        break;
 8000a2a:	bf00      	nop
  {
 8000a2c:	e6f9      	b.n	8000822 <main+0xea>
 8000a2e:	bf00      	nop
 8000a30:	20000130 	.word	0x20000130
 8000a34:	20000464 	.word	0x20000464
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000f50 	.word	0x20000f50
 8000a44:	20000460 	.word	0x20000460
 8000a48:	20001764 	.word	0x20001764
 8000a4c:	20000f54 	.word	0x20000f54
 8000a50:	20001768 	.word	0x20001768
 8000a54:	20000f60 	.word	0x20000f60
 8000a58:	20000224 	.word	0x20000224
 8000a5c:	20000f28 	.word	0x20000f28

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	; 0x70
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 fec8 	bl	8009804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f008 feba 	bl	8009804 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aaa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fbe6 	bl	8004288 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ac2:	f000 f8af 	bl	8000c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fad8 	bl	8005098 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000aee:	f000 f899 	bl	8000c24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fce0 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b0a:	f000 f88b 	bl	8000c24 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3770      	adds	r7, #112	; 0x70
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 1 */
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3a:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a37      	ldr	r2, [pc, #220]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|USB_PU_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f002 f880 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA_GPIO_Port, EXTRA_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xfc>)
 8000b98:	f002 f87a 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f001 fe25 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_Pin */
  GPIO_InitStruct.Pin = EXTRA_Pin;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTRA_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_GPIO_Init+0xfc>)
 8000bd4:	f001 fe16 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fe08 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f001 fdf8 	bl	8002804 <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>

08000c2e <is_irq_enabled>:
// non-inlined functions probably forces GCC to flush everything to memory
// anyways, but trying to outsmart the compiler is a bad strategy (you never
// know when somebody will turn on LTO or something).

static inline bool is_irq_enabled(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c34:	f3ef 8310 	mrs	r3, PRIMASK
 8000c38:	607b      	str	r3, [r7, #4]
  return(result);
 8000c3a:	687b      	ldr	r3, [r7, #4]
	return (__get_PRIMASK() & 1u) == 0u; // interrupts not prevented
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf0c      	ite	eq
 8000c44:	2301      	moveq	r3, #1
 8000c46:	2300      	movne	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <disable_irq>:

static inline bool disable_irq(void) 
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
	bool was_enabled = is_irq_enabled();
 8000c5c:	f7ff ffe7 	bl	8000c2e <is_irq_enabled>
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
}
 8000c6c:	bf00      	nop
	__disable_irq();
	__ISB();
	return was_enabled;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <enable_irq>:

static inline void enable_irq() 
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7c:	b662      	cpsie	i
}
 8000c7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c80:	f3bf 8f6f 	isb	sy
}
 8000c84:	bf00      	nop
	__enable_irq();
    __ISB();
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <queue_create>:
*/

#include <queue.h>
#include <stdlib.h>

queue_t *queue_create(unsigned max_elements){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	queue_t *q = calloc(1, sizeof(queue_t));
 8000c98:	2110      	movs	r1, #16
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f008 fd72 	bl	8009784 <calloc>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60fb      	str	r3, [r7, #12]
	q->buf = calloc(max_elements, sizeof(void*));
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f008 fd6c 	bl	8009784 <calloc>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	60da      	str	r2, [r3, #12]
	q->max_elements = max_elements;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
	return q;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <queue_push_back>:
{
	return queue_size(q)==0;
}

bool queue_push_back(queue_t *q, void *el)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	bool retval = false;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	bool was_irq_enabled = disable_irq();
 8000cd2:	f7ff ffc0 	bl	8000c56 <disable_irq>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73bb      	strb	r3, [r7, #14]

	if (q->size < q->max_elements) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d21a      	bcs.n	8000d1c <queue_push_back+0x58>
		unsigned pos = (q->first + q->size) % q->max_elements;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cf8:	fb02 f201 	mul.w	r2, r2, r1
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
		q->buf[pos] = el;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	601a      	str	r2, [r3, #0]
		q->size += 1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	609a      	str	r2, [r3, #8]
		retval = true;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
	}

	if (was_irq_enabled) enable_irq();
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <queue_push_back+0x62>
 8000d22:	f7ff ffa9 	bl	8000c78 <enable_irq>
	return retval;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <queue_push_front>:

bool queue_push_front(queue_t *q, void *el)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	bool retval = false;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	bool was_irq_enabled = disable_irq();
 8000d3e:	f7ff ff8a 	bl	8000c56 <disable_irq>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73bb      	strb	r3, [r7, #14]
	if (q->size < q->max_elements) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d21d      	bcs.n	8000d8e <queue_push_front+0x5e>
		if (q->first==0) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d105      	bne.n	8000d66 <queue_push_front+0x36>
			q->first = q->max_elements - 1;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	e004      	b.n	8000d70 <queue_push_front+0x40>
		} else {
			q->first = q->first - 1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	605a      	str	r2, [r3, #4]
		}
		q->buf[q->first] = el;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
		q->size += 1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
		retval = true;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
	}
	if (was_irq_enabled) enable_irq();
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <queue_push_front+0x68>
 8000d94:	f7ff ff70 	bl	8000c78 <enable_irq>
	return retval;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <queue_pop_front>:

void *queue_pop_front(queue_t *q)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	bool was_irq_enabled = disable_irq();
 8000daa:	f7ff ff54 	bl	8000c56 <disable_irq>
 8000dae:	4603      	mov	r3, r0
 8000db0:	72fb      	strb	r3, [r7, #11]
	void *el = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
	if (q->size > 0) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d018      	beq.n	8000df0 <queue_pop_front+0x4e>
		el = q->buf[q->first];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
		q->first = (q->first + 1) % q->max_elements;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ddc:	fb02 f201 	mul.w	r2, r2, r1
 8000de0:	1a9a      	subs	r2, r3, r2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
		q->size -= 1;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
	}
	if (was_irq_enabled) enable_irq();
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <queue_pop_front+0x58>
 8000df6:	f7ff ff3f 	bl	8000c78 <enable_irq>
	return el;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <queue_push_back_i>:
{
	return queue_size_i(q)==0;
}

bool queue_push_back_i(queue_t *q, void *el)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	bool retval = false;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]

	if (q->size < q->max_elements) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d21a      	bcs.n	8000e54 <queue_push_back_i+0x50>
		unsigned pos = (q->first + q->size) % q->max_elements;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e30:	fb02 f201 	mul.w	r2, r2, r1
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
		q->buf[pos] = el;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	601a      	str	r2, [r3, #0]
		q->size += 1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
		retval = true;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <queue_pop_front_i>:
	}
	return retval;
}

void *queue_pop_front_i(queue_t *q)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	void *el = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
	if (q->size > 0) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d018      	beq.n	8000ea8 <queue_pop_front_i+0x46>
		el = q->buf[q->first];
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
		q->first = (q->first + 1) % q->max_elements;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e94:	fb02 f201 	mul.w	r2, r2, r1
 8000e98:	1a9a      	subs	r2, r3, r2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]
		q->size -= 1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
	}
	return el;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <SLCAN_Rx>:
 *      Author: cgrant
 */

#include "slcan.h"

void SLCAN_Rx(uint8_t* nRxData, uint32_t* nRxDataLen, struct USBD_CAN_Frame *stRxFrame){
 8000eb6:	b480      	push	{r7}
 8000eb8:	b089      	sub	sp, #36	; 0x24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  uint8_t nDataFirstPos;

  stRxFrame->eUsbdCmd = (enum USBD_CMD)nRxData[0];
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	701a      	strb	r2, [r3, #0]

  // Convert from ASCII (2nd character to end)
  for (uint8_t i = 1; i < *nRxDataLen; i++)
 8000eca:	2301      	movs	r3, #1
 8000ecc:	77bb      	strb	r3, [r7, #30]
 8000ece:	e02e      	b.n	8000f2e <SLCAN_Rx+0x78>
  {
      // Lowercase letters
      if(nRxData[i] >= 'a')
 8000ed0:	7fbb      	ldrb	r3, [r7, #30]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b60      	cmp	r3, #96	; 0x60
 8000eda:	d90a      	bls.n	8000ef2 <SLCAN_Rx+0x3c>
          nRxData[i] = nRxData[i] - 'a' + 10;
 8000edc:	7fbb      	ldrb	r3, [r7, #30]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	7fbb      	ldrb	r3, [r7, #30]
 8000ee6:	68f9      	ldr	r1, [r7, #12]
 8000ee8:	440b      	add	r3, r1
 8000eea:	3a57      	subs	r2, #87	; 0x57
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e01a      	b.n	8000f28 <SLCAN_Rx+0x72>
      // Uppercase letters
      else if(nRxData[i] >= 'A')
 8000ef2:	7fbb      	ldrb	r3, [r7, #30]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b40      	cmp	r3, #64	; 0x40
 8000efc:	d90a      	bls.n	8000f14 <SLCAN_Rx+0x5e>
          nRxData[i] = nRxData[i] - 'A' + 10;
 8000efe:	7fbb      	ldrb	r3, [r7, #30]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	7fbb      	ldrb	r3, [r7, #30]
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3a37      	subs	r2, #55	; 0x37
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e009      	b.n	8000f28 <SLCAN_Rx+0x72>
      // Numbers
      else
          nRxData[i] = nRxData[i] - '0';
 8000f14:	7fbb      	ldrb	r3, [r7, #30]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	7fbb      	ldrb	r3, [r7, #30]
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	440b      	add	r3, r1
 8000f22:	3a30      	subs	r2, #48	; 0x30
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < *nRxDataLen; i++)
 8000f28:	7fbb      	ldrb	r3, [r7, #30]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	77bb      	strb	r3, [r7, #30]
 8000f2e:	7fba      	ldrb	r2, [r7, #30]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3cb      	bcc.n	8000ed0 <SLCAN_Rx+0x1a>
  }

  if( (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE) ||
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b53      	cmp	r3, #83	; 0x53
 8000f3e:	d007      	beq.n	8000f50 <SLCAN_Rx+0x9a>
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_MODE) ||
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
  if( (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE) ||
 8000f44:	2b4d      	cmp	r3, #77	; 0x4d
 8000f46:	d003      	beq.n	8000f50 <SLCAN_Rx+0x9a>
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE)){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_MODE) ||
 8000f4c:	2b53      	cmp	r3, #83	; 0x53
 8000f4e:	d104      	bne.n	8000f5a <SLCAN_Rx+0xa4>
    stRxFrame->nData[1] = nRxData[1];
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	785a      	ldrb	r2, [r3, #1]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b74      	cmp	r3, #116	; 0x74
 8000f60:	d166      	bne.n	8001030 <SLCAN_Rx+0x17a>
    stRxFrame->stTxHeader.StdId = ((nRxData[1] & 0xF) << 8) + ((nRxData[2] & 0xF) << 4) + (nRxData[3] & 0xF);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3302      	adds	r3, #2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	4413      	add	r3, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8c3 2001 	str.w	r2, [r3, #1]

    stRxFrame->stTxHeader.DLC = nRxData[4];
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3304      	adds	r3, #4
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8c3 2011 	str.w	r2, [r3, #17]

    nDataFirstPos = 5;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	77fb      	strb	r3, [r7, #31]

    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	e020      	b.n	8000fe8 <SLCAN_Rx+0x132>
      stRxFrame->nData[i] = ((nRxData[i + nDataFirstPos] & 0xF) << 4) + (nRxData[i + nDataFirstPos + 1] & 0xF);
 8000fa6:	7ffa      	ldrb	r2, [r7, #31]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4413      	add	r3, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	7ff9      	ldrb	r1, [r7, #31]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	440b      	add	r3, r1
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3335      	adds	r3, #53	; 0x35
 8000fd8:	460a      	mov	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      nDataFirstPos++;
 8000fdc:	7ffb      	ldrb	r3, [r7, #31]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	77fb      	strb	r3, [r7, #31]
    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 2011 	ldr.w	r2, [r3, #17]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8d8      	bhi.n	8000fa6 <SLCAN_Rx+0xf0>
    }

    stRxFrame->stTxHeader.ExtId = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	715a      	strb	r2, [r3, #5]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	719a      	strb	r2, [r3, #6]
 8000ffe:	2200      	movs	r2, #0
 8001000:	71da      	strb	r2, [r3, #7]
 8001002:	2200      	movs	r2, #0
 8001004:	721a      	strb	r2, [r3, #8]
    stRxFrame->stTxHeader.IDE = CAN_ID_STD;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	725a      	strb	r2, [r3, #9]
 800100c:	2200      	movs	r2, #0
 800100e:	729a      	strb	r2, [r3, #10]
 8001010:	2200      	movs	r2, #0
 8001012:	72da      	strb	r2, [r3, #11]
 8001014:	2200      	movs	r2, #0
 8001016:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_DATA;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	735a      	strb	r2, [r3, #13]
 800101e:	2200      	movs	r2, #0
 8001020:	739a      	strb	r2, [r3, #14]
 8001022:	2200      	movs	r2, #0
 8001024:	73da      	strb	r2, [r3, #15]
 8001026:	2200      	movs	r2, #0
 8001028:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b72      	cmp	r3, #114	; 0x72
 8001036:	d135      	bne.n	80010a4 <SLCAN_Rx+0x1ee>
    stRxFrame->stTxHeader.StdId = ((nRxData[1] & 0xF) << 8) + ((nRxData[2] & 0xF) << 4) + (nRxData[3] & 0xF);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3302      	adds	r3, #2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	b2db      	uxtb	r3, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3303      	adds	r3, #3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	4413      	add	r3, r2
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8c3 2001 	str.w	r2, [r3, #1]

    stRxFrame->stTxHeader.ExtId = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	715a      	strb	r2, [r3, #5]
 800106a:	2200      	movs	r2, #0
 800106c:	719a      	strb	r2, [r3, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	71da      	strb	r2, [r3, #7]
 8001072:	2200      	movs	r2, #0
 8001074:	721a      	strb	r2, [r3, #8]
    stRxFrame->stTxHeader.IDE = CAN_ID_STD;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	725a      	strb	r2, [r3, #9]
 800107c:	2200      	movs	r2, #0
 800107e:	729a      	strb	r2, [r3, #10]
 8001080:	2200      	movs	r2, #0
 8001082:	72da      	strb	r2, [r3, #11]
 8001084:	2200      	movs	r2, #0
 8001086:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_REMOTE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f042 0202 	orr.w	r2, r2, #2
 8001090:	735a      	strb	r2, [r3, #13]
 8001092:	2200      	movs	r2, #0
 8001094:	739a      	strb	r2, [r3, #14]
 8001096:	2200      	movs	r2, #0
 8001098:	73da      	strb	r2, [r3, #15]
 800109a:	2200      	movs	r2, #0
 800109c:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b54      	cmp	r3, #84	; 0x54
 80010aa:	f040 8089 	bne.w	80011c0 <SLCAN_Rx+0x30a>
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	071a      	lsls	r2, r3, #28
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3302      	adds	r3, #2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80010c2:	441a      	add	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3303      	adds	r3, #3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	051b      	lsls	r3, r3, #20
 80010cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80010d0:	441a      	add	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010de:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3305      	adds	r3, #5
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	031b      	lsls	r3, r3, #12
 80010e8:	b29b      	uxth	r3, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 80010ea:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3306      	adds	r3, #6
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80010f8:	441a      	add	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3307      	adds	r3, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	b2db      	uxtb	r3, r3
 8001104:	441a      	add	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3308      	adds	r3, #8
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4413      	add	r3, r2
 8001112:	461a      	mov	r2, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8c3 2005 	str.w	r2, [r3, #5]

    stRxFrame->stTxHeader.DLC = nRxData[9];
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3309      	adds	r3, #9
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8c3 2011 	str.w	r2, [r3, #17]

    nDataFirstPos = 10;
 8001128:	230a      	movs	r3, #10
 800112a:	77fb      	strb	r3, [r7, #31]

    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e020      	b.n	8001174 <SLCAN_Rx+0x2be>
      stRxFrame->nData[i] = ((nRxData[i + nDataFirstPos] & 0xF) << 4) + (nRxData[i + nDataFirstPos + 1] & 0xF);
 8001132:	7ffa      	ldrb	r2, [r7, #31]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4413      	add	r3, r2
 8001138:	461a      	mov	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	b2da      	uxtb	r2, r3
 8001144:	7ff9      	ldrb	r1, [r7, #31]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	440b      	add	r3, r1
 800114a:	3301      	adds	r3, #1
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	440b      	add	r3, r1
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b2d9      	uxtb	r1, r3
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4413      	add	r3, r2
 8001162:	3335      	adds	r3, #53	; 0x35
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
      nDataFirstPos++;
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	3301      	adds	r3, #1
 800116c:	77fb      	strb	r3, [r7, #31]
    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 2011 	ldr.w	r2, [r3, #17]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8d8      	bhi.n	8001132 <SLCAN_Rx+0x27c>
    }

    stRxFrame->stTxHeader.StdId = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	705a      	strb	r2, [r3, #1]
 8001186:	2200      	movs	r2, #0
 8001188:	709a      	strb	r2, [r3, #2]
 800118a:	2200      	movs	r2, #0
 800118c:	70da      	strb	r2, [r3, #3]
 800118e:	2200      	movs	r2, #0
 8001190:	711a      	strb	r2, [r3, #4]
    stRxFrame->stTxHeader.IDE = CAN_ID_EXT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f042 0204 	orr.w	r2, r2, #4
 800119a:	725a      	strb	r2, [r3, #9]
 800119c:	2200      	movs	r2, #0
 800119e:	729a      	strb	r2, [r3, #10]
 80011a0:	2200      	movs	r2, #0
 80011a2:	72da      	strb	r2, [r3, #11]
 80011a4:	2200      	movs	r2, #0
 80011a6:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_DATA;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	735a      	strb	r2, [r3, #13]
 80011ae:	2200      	movs	r2, #0
 80011b0:	739a      	strb	r2, [r3, #14]
 80011b2:	2200      	movs	r2, #0
 80011b4:	73da      	strb	r2, [r3, #15]
 80011b6:	2200      	movs	r2, #0
 80011b8:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_29BIT){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b52      	cmp	r3, #82	; 0x52
 80011c6:	d157      	bne.n	8001278 <SLCAN_Rx+0x3c2>
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	071a      	lsls	r2, r3, #28
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3302      	adds	r3, #2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	061b      	lsls	r3, r3, #24
 80011d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80011dc:	441a      	add	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3303      	adds	r3, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	051b      	lsls	r3, r3, #20
 80011e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80011ea:	441a      	add	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3304      	adds	r3, #4
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011f8:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3305      	adds	r3, #5
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	b29b      	uxth	r3, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8001204:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3306      	adds	r3, #6
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001212:	441a      	add	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3307      	adds	r3, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	441a      	add	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3308      	adds	r3, #8
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4413      	add	r3, r2
 800122c:	461a      	mov	r2, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8c3 2005 	str.w	r2, [r3, #5]

    stRxFrame->stTxHeader.StdId = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	705a      	strb	r2, [r3, #1]
 800123a:	2200      	movs	r2, #0
 800123c:	709a      	strb	r2, [r3, #2]
 800123e:	2200      	movs	r2, #0
 8001240:	70da      	strb	r2, [r3, #3]
 8001242:	2200      	movs	r2, #0
 8001244:	711a      	strb	r2, [r3, #4]
    stRxFrame->stTxHeader.IDE = CAN_ID_EXT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f042 0204 	orr.w	r2, r2, #4
 800124e:	725a      	strb	r2, [r3, #9]
 8001250:	2200      	movs	r2, #0
 8001252:	729a      	strb	r2, [r3, #10]
 8001254:	2200      	movs	r2, #0
 8001256:	72da      	strb	r2, [r3, #11]
 8001258:	2200      	movs	r2, #0
 800125a:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_REMOTE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f042 0202 	orr.w	r2, r2, #2
 8001264:	735a      	strb	r2, [r3, #13]
 8001266:	2200      	movs	r2, #0
 8001268:	739a      	strb	r2, [r3, #14]
 800126a:	2200      	movs	r2, #0
 800126c:	73da      	strb	r2, [r3, #15]
 800126e:	2200      	movs	r2, #0
 8001270:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	755a      	strb	r2, [r3, #21]
  }
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SLCAN_Tx>:

uint8_t SLCAN_Tx(struct USBD_CAN_Frame *stTxFrame, uint8_t* nTxData){
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint8_t nFirstDataPos;
  uint8_t nLastDataPos;

  for(uint8_t i=0; i < 30; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	737b      	strb	r3, [r7, #13]
 8001292:	e007      	b.n	80012a4 <SLCAN_Tx+0x20>
    nTxData[i] = '\0';
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	4413      	add	r3, r2
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i < 30; i++)
 800129e:	7b7b      	ldrb	r3, [r7, #13]
 80012a0:	3301      	adds	r3, #1
 80012a2:	737b      	strb	r3, [r7, #13]
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	2b1d      	cmp	r3, #29
 80012a8:	d9f4      	bls.n	8001294 <SLCAN_Tx+0x10>

  if(stTxFrame->stRxHeader.RTR == CAN_RTR_DATA){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <SLCAN_Tx+0x4a>
    if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <SLCAN_Tx+0x42>
      nTxData[0] = 't';
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2274      	movs	r2, #116	; 0x74
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e00f      	b.n	80012e6 <SLCAN_Tx+0x62>
    } else{
      nTxData[0] = 'T';
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2254      	movs	r2, #84	; 0x54
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e00b      	b.n	80012e6 <SLCAN_Tx+0x62>
    }
  } else{
    if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <SLCAN_Tx+0x5c>
      nTxData[0] = 'r';
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2272      	movs	r2, #114	; 0x72
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e002      	b.n	80012e6 <SLCAN_Tx+0x62>
    } else{
      nTxData[0] = 'R';
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2252      	movs	r2, #82	; 0x52
 80012e4:	701a      	strb	r2, [r3, #0]
    }
  }

  if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d129      	bne.n	8001344 <SLCAN_Tx+0xc0>
    nTxData[1] = (stTxFrame->stRxHeader.StdId >> 8) & 0xF;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	f002 020f 	and.w	r2, r2, #15
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
    nTxData[2] = (stTxFrame->stRxHeader.StdId >> 4) & 0xF;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	b2da      	uxtb	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3302      	adds	r3, #2
 8001314:	f002 020f 	and.w	r2, r2, #15
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
    nTxData[3] = stTxFrame->stRxHeader.StdId & 0xF;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3303      	adds	r3, #3
 8001328:	f002 020f 	and.w	r2, r2, #15
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]

    nTxData[4] = (stTxFrame->stRxHeader.DLC & 0xFF);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3304      	adds	r3, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
    nFirstDataPos = 5;
 800133e:	2305      	movs	r3, #5
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e05c      	b.n	80013fe <SLCAN_Tx+0x17a>
  } else{
    nTxData[1] = (stTxFrame->stRxHeader.StdId >> 28) & 0xF;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800134a:	0f1a      	lsrs	r2, r3, #28
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
    nTxData[2] = (stTxFrame->stRxHeader.StdId >> 24) & 0xF;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800135a:	0e1b      	lsrs	r3, r3, #24
 800135c:	b2da      	uxtb	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	f002 020f 	and.w	r2, r2, #15
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
    nTxData[3] = (stTxFrame->stRxHeader.StdId >> 20) & 0xF;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001370:	0d1b      	lsrs	r3, r3, #20
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3303      	adds	r3, #3
 8001378:	f002 020f 	and.w	r2, r2, #15
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
    nTxData[4] = (stTxFrame->stRxHeader.StdId >> 16) & 0xF;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001386:	0c1b      	lsrs	r3, r3, #16
 8001388:	b2da      	uxtb	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3304      	adds	r3, #4
 800138e:	f002 020f 	and.w	r2, r2, #15
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    nTxData[5] = (stTxFrame->stRxHeader.StdId >> 12) & 0xF;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3305      	adds	r3, #5
 80013a4:	f002 020f 	and.w	r2, r2, #15
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
    nTxData[6] = (stTxFrame->stRxHeader.StdId >> 8) & 0xF;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3306      	adds	r3, #6
 80013ba:	f002 020f 	and.w	r2, r2, #15
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
    nTxData[7] = (stTxFrame->stRxHeader.StdId >> 4) & 0xF;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3307      	adds	r3, #7
 80013d0:	f002 020f 	and.w	r2, r2, #15
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
    nTxData[8] = stTxFrame->stRxHeader.StdId & 0xF;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3308      	adds	r3, #8
 80013e4:	f002 020f 	and.w	r2, r2, #15
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]

    nTxData[9] = (stTxFrame->stRxHeader.DLC & 0xFF);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3309      	adds	r3, #9
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
    nFirstDataPos = 10;
 80013fa:	230a      	movs	r3, #10
 80013fc:	73fb      	strb	r3, [r7, #15]
  }

  nLastDataPos = nFirstDataPos;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	73bb      	strb	r3, [r7, #14]
  for(uint8_t i=0; i < stTxFrame->stRxHeader.DLC; i++){
 8001402:	2300      	movs	r3, #0
 8001404:	733b      	strb	r3, [r7, #12]
 8001406:	e026      	b.n	8001456 <SLCAN_Tx+0x1d2>
    nTxData[i + nFirstDataPos] = (stTxFrame->nData[i] >> 4);
 8001408:	7b3b      	ldrb	r3, [r7, #12]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001412:	7b39      	ldrb	r1, [r7, #12]
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	440b      	add	r3, r1
 8001418:	4619      	mov	r1, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	440b      	add	r3, r1
 800141e:	0912      	lsrs	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]
    nFirstDataPos++;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3301      	adds	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
    nTxData[i + nFirstDataPos] = (stTxFrame->nData[i] & 0x0F);
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001434:	7b39      	ldrb	r1, [r7, #12]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	440b      	add	r3, r1
 800143a:	4619      	mov	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	440b      	add	r3, r1
 8001440:	f002 020f 	and.w	r2, r2, #15
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	701a      	strb	r2, [r3, #0]
    nLastDataPos = i + nFirstDataPos;
 8001448:	7b3a      	ldrb	r2, [r7, #12]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4413      	add	r3, r2
 800144e:	73bb      	strb	r3, [r7, #14]
  for(uint8_t i=0; i < stTxFrame->stRxHeader.DLC; i++){
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	733b      	strb	r3, [r7, #12]
 8001456:	7b3a      	ldrb	r2, [r7, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 800145e:	429a      	cmp	r2, r3
 8001460:	d3d2      	bcc.n	8001408 <SLCAN_Tx+0x184>
  }

  for(uint8_t j = 1; j <= nLastDataPos; j++){
 8001462:	2301      	movs	r3, #1
 8001464:	72fb      	strb	r3, [r7, #11]
 8001466:	e01d      	b.n	80014a4 <SLCAN_Tx+0x220>
    if(nTxData[j] < 0xA){
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b09      	cmp	r3, #9
 8001472:	d80a      	bhi.n	800148a <SLCAN_Tx+0x206>
      nTxData[j] += 0x30;
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	440b      	add	r3, r1
 8001482:	3230      	adds	r2, #48	; 0x30
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e009      	b.n	800149e <SLCAN_Tx+0x21a>
    } else{
      nTxData[j] += 0x37;
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	440b      	add	r3, r1
 8001498:	3237      	adds	r2, #55	; 0x37
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
  for(uint8_t j = 1; j <= nLastDataPos; j++){
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	3301      	adds	r3, #1
 80014a2:	72fb      	strb	r3, [r7, #11]
 80014a4:	7afa      	ldrb	r2, [r7, #11]
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d9dd      	bls.n	8001468 <SLCAN_Tx+0x1e4>
    }
  }

  nLastDataPos++;
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	3301      	adds	r3, #1
 80014b0:	73bb      	strb	r3, [r7, #14]
  nTxData[nLastDataPos] = '\r';
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	220d      	movs	r2, #13
 80014ba:	701a      	strb	r2, [r3, #0]

  //Increment by 1 to return total size (include 0 index)
  return ++nLastDataPos;
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	3301      	adds	r3, #1
 80014c0:	73bb      	strb	r3, [r7, #14]
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_MspInit+0x44>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_MspInit+0x44>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_MspInit+0x44>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_MspInit+0x44>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_MspInit+0x44>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_CAN_MspInit+0x8c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d130      	bne.n	800159c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 8001540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_CAN_MspInit+0x90>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 800157c:	2309      	movs	r3, #9
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_CAN_MspInit+0x94>)
 8001588:	f001 f93c 	bl	8002804 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2014      	movs	r0, #20
 8001592:	f001 f900 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001596:	2014      	movs	r0, #20
 8001598:	f001 f919 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40006400 	.word	0x40006400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000400 	.word	0x48000400

080015b0 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_CAN_MspDeInit+0x30>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10a      	bne.n	80015d8 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_CAN_MspDeInit+0x34>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_CAN_MspDeInit+0x34>)
 80015c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80015cc:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80015ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_CAN_MspDeInit+0x38>)
 80015d4:	f001 fa88 	bl	8002ae8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40006400 	.word	0x40006400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000400 	.word	0x48000400

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015f0:	f003 ff54 	bl	800549c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x8>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f8d2 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800164a:	f000 fd9a 	bl	8002182 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000f28 	.word	0x20000f28

08001658 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority remap interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USB_LP_IRQHandler+0x10>)
 800165e:	f001 fc33 	bl	8002ec8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000197c 	.word	0x2000197c

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f008 f87a 	bl	8009794 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20004000 	.word	0x20004000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000230 	.word	0x20000230
 80016d4:	20001c78 	.word	0x20001c78

080016d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <SystemInit+0x28>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <SystemInit+0x28>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SystemInit+0x28>)
 80016ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f2:	609a      	str	r2, [r3, #8]
#endif
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001708:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800170a:	e003      	b.n	8001714 <LoopCopyDataInit>

0800170c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800170e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001710:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001712:	3104      	adds	r1, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001718:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800171a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800171c:	d3f6      	bcc.n	800170c <CopyDataInit>
	ldr	r2, =_sbss
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001720:	e002      	b.n	8001728 <LoopFillZerobss>

08001722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001722:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001724:	f842 3b04 	str.w	r3, [r2], #4

08001728 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <LoopForever+0x16>)
	cmp	r2, r3
 800172a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800172c:	d3f9      	bcc.n	8001722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172e:	f7ff ffd3 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f008 f835 	bl	80097a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001736:	f7fe ffff 	bl	8000738 <main>

0800173a <LoopForever>:

LoopForever:
    b LoopForever
 800173a:	e7fe      	b.n	800173a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800173c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001740:	080099bc 	.word	0x080099bc
	ldr	r0, =_sdata
 8001744:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001748:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800174c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001750:	20001c78 	.word	0x20001c78

08001754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_IRQHandler>
	...

08001758 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x28>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x28>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f001 f809 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff feac 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f821 	bl	80027ea <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 ffe9 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000014 	.word	0x20000014
 80017dc:	2000001c 	.word	0x2000001c
 80017e0:	20000018 	.word	0x20000018

080017e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000001c 	.word	0x2000001c
 8001808:	20001778 	.word	0x20001778

0800180c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20001778 	.word	0x20001778

08001824 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0ed      	b.n	8001a12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fe68 	bl	8001518 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0202 	bic.w	r2, r2, #2
 8001856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff ffd8 	bl	800180c <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800185e:	e012      	b.n	8001886 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001860:	f7ff ffd4 	bl	800180c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b0a      	cmp	r3, #10
 800186c:	d90b      	bls.n	8001886 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2205      	movs	r2, #5
 800187e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0c5      	b.n	8001a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e5      	bne.n	8001860 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff ffb2 	bl	800180c <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018aa:	e012      	b.n	80018d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ac:	f7ff ffae 	bl	800180c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d90b      	bls.n	80018d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2205      	movs	r2, #5
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e09f      	b.n	8001a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0e5      	beq.n	80018ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e007      	b.n	800190a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7e5b      	ldrb	r3, [r3, #25]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e007      	b.n	8001934 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001932:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e9b      	ldrb	r3, [r3, #26]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d108      	bne.n	800194e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e007      	b.n	800195e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0220 	bic.w	r2, r2, #32
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7edb      	ldrb	r3, [r3, #27]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0210 	bic.w	r2, r2, #16
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e007      	b.n	8001988 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0210 	orr.w	r2, r2, #16
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7f1b      	ldrb	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7f5b      	ldrb	r3, [r3, #29]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0204 	orr.w	r2, r2, #4
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e007      	b.n	80019dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	ea42 0103 	orr.w	r1, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e015      	b.n	8001a58 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f925 	bl	8001c7c <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fdbc 	bl	80015b0 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d003      	beq.n	8001a86 <HAL_CAN_ConfigFilter+0x26>
 8001a7e:	7cfb      	ldrb	r3, [r7, #19]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	f040 80aa 	bne.w	8001bda <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d123      	bne.n	8001b08 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3248      	adds	r2, #72	; 0x48
 8001ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001afe:	6979      	ldr	r1, [r7, #20]
 8001b00:	3348      	adds	r3, #72	; 0x48
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d122      	bne.n	8001b56 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3248      	adds	r2, #72	; 0x48
 8001b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	3348      	adds	r3, #72	; 0x48
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bcc:	f023 0201 	bic.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d12e      	bne.n	8001c66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fdf4 	bl	800180c <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c26:	e012      	b.n	8001c4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c28:	f7ff fdf0 	bl	800180c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d90b      	bls.n	8001c4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e012      	b.n	8001c74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e5      	bne.n	8001c28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e006      	b.n	8001c74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
  }
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d133      	bne.n	8001cf8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fdb4 	bl	800180c <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca6:	e012      	b.n	8001cce <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca8:	f7ff fdb0 	bl	800180c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d90b      	bls.n	8001cce <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e01b      	b.n	8001d06 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0e5      	beq.n	8001ca8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0202 	bic.w	r2, r2, #2
 8001cea:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e006      	b.n	8001d06 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b089      	sub	sp, #36	; 0x24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d003      	beq.n	8001d3a <HAL_CAN_AddTxMessage+0x2c>
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 80b8 	bne.w	8001eaa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10a      	bne.n	8001d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a0 	beq.w	8001e9a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	0e1b      	lsrs	r3, r3, #24
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d907      	bls.n	8001d7a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e09e      	b.n	8001eb8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	6809      	ldr	r1, [r1, #0]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3318      	adds	r3, #24
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	440b      	add	r3, r1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e00f      	b.n	8001dc8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dbc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	440b      	add	r3, r1
 8001dc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3304      	adds	r3, #4
 8001dda:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	7d1b      	ldrb	r3, [r3, #20]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d111      	bne.n	8001e08 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3318      	adds	r3, #24
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	3304      	adds	r3, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	6811      	ldr	r1, [r2, #0]
 8001df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	440b      	add	r3, r1
 8001e04:	3304      	adds	r3, #4
 8001e06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3307      	adds	r3, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	061a      	lsls	r2, r3, #24
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3306      	adds	r3, #6
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	041b      	lsls	r3, r3, #16
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3305      	adds	r3, #5
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4313      	orrs	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	3204      	adds	r2, #4
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	6811      	ldr	r1, [r2, #0]
 8001e30:	ea43 0200 	orr.w	r2, r3, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3303      	adds	r3, #3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	061a      	lsls	r2, r3, #24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3301      	adds	r3, #1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	4610      	mov	r0, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6811      	ldr	r1, [r2, #0]
 8001e66:	ea43 0200 	orr.w	r2, r3, r0
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3318      	adds	r3, #24
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	440b      	add	r3, r1
 8001e94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e00e      	b.n	8001eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e006      	b.n	8001eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3724      	adds	r7, #36	; 0x24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_GetRxMessage+0x24>
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	f040 80f3 	bne.w	80020ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d116      	bne.n	8001f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0e7      	b.n	80020dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0d8      	b.n	80020dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	331b      	adds	r3, #27
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0204 	and.w	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10c      	bne.n	8001f62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	331b      	adds	r3, #27
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0d5b      	lsrs	r3, r3, #21
 8001f58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e00b      	b.n	8001f7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	331b      	adds	r3, #27
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0202 	and.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	331b      	adds	r3, #27
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	331b      	adds	r3, #27
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	331b      	adds	r3, #27
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0a1a      	lsrs	r2, r3, #8
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0c1a      	lsrs	r2, r3, #16
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3302      	adds	r3, #2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e1a      	lsrs	r2, r3, #24
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3303      	adds	r3, #3
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	3304      	adds	r3, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0a1a      	lsrs	r2, r3, #8
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3305      	adds	r3, #5
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0c1a      	lsrs	r2, r3, #16
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e1a      	lsrs	r2, r3, #24
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3307      	adds	r3, #7
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	e007      	b.n	80020ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e006      	b.n	80020dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d002      	beq.n	8002106 <HAL_CAN_ActivateNotification+0x1e>
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d109      	bne.n	800211a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e006      	b.n	8002128 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002144:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d002      	beq.n	8002152 <HAL_CAN_DeactivateNotification+0x1e>
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d10a      	bne.n	8002168 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e006      	b.n	8002176 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d07c      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d023      	beq.n	800221a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f983 	bl	80024f0 <HAL_CAN_TxMailbox0CompleteCallback>
 80021ea:	e016      	b.n	800221a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	e00c      	b.n	800221a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e002      	b.n	800221a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f989 	bl	800252c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d024      	beq.n	800226e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f963 	bl	8002504 <HAL_CAN_TxMailbox1CompleteCallback>
 800223e:	e016      	b.n	800226e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e00c      	b.n	800226e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e002      	b.n	800226e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f969 	bl	8002540 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d024      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002280:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f943 	bl	8002518 <HAL_CAN_TxMailbox2CompleteCallback>
 8002292:	e016      	b.n	80022c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	e00c      	b.n	80022c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e002      	b.n	80022c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f949 	bl	8002554 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2210      	movs	r2, #16
 80022e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2208      	movs	r2, #8
 8002300:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f930 	bl	8002568 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7fe f88f 	bl	8000444 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002340:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2210      	movs	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2208      	movs	r2, #8
 8002364:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f912 	bl	8002590 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8f9 	bl	800257c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2210      	movs	r2, #16
 80023a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8fc 	bl	80025a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2208      	movs	r2, #8
 80023c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8f5 	bl	80025b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d07b      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d072      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	d043      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03e      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d02b      	beq.n	80024ac <HAL_CAN_IRQHandler+0x32a>
 8002454:	2b60      	cmp	r3, #96	; 0x60
 8002456:	d82e      	bhi.n	80024b6 <HAL_CAN_IRQHandler+0x334>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d022      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x320>
 800245c:	2b50      	cmp	r3, #80	; 0x50
 800245e:	d82a      	bhi.n	80024b6 <HAL_CAN_IRQHandler+0x334>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d019      	beq.n	8002498 <HAL_CAN_IRQHandler+0x316>
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d826      	bhi.n	80024b6 <HAL_CAN_IRQHandler+0x334>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d010      	beq.n	800248e <HAL_CAN_IRQHandler+0x30c>
 800246c:	2b30      	cmp	r3, #48	; 0x30
 800246e:	d822      	bhi.n	80024b6 <HAL_CAN_IRQHandler+0x334>
 8002470:	2b10      	cmp	r3, #16
 8002472:	d002      	beq.n	800247a <HAL_CAN_IRQHandler+0x2f8>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d005      	beq.n	8002484 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002478:	e01d      	b.n	80024b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002482:	e019      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248c:	e014      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002496:	e00f      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a0:	e00a      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024aa:	e005      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b4:	e000      	b.n	80024b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80024b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2204      	movs	r2, #4
 80024ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f872 	bl	80025cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002812:	e14e      	b.n	8002ab2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8140 	beq.w	8002aac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00b      	beq.n	800284c <HAL_GPIO_Init+0x48>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002840:	2b11      	cmp	r3, #17
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b12      	cmp	r3, #18
 800284a:	d130      	bne.n	80028ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002882:	2201      	movs	r2, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0201 	and.w	r2, r3, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0xea>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d123      	bne.n	8002936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	6939      	ldr	r1, [r7, #16]
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 809a 	beq.w	8002aac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1e0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a46      	ldr	r2, [pc, #280]	; (8002ad8 <HAL_GPIO_Init+0x2d4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1dc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a45      	ldr	r2, [pc, #276]	; (8002adc <HAL_GPIO_Init+0x2d8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1d8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <HAL_GPIO_Init+0x2dc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1d4>
 80029d4:	2303      	movs	r3, #3
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1e2>
 80029d8:	2305      	movs	r3, #5
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1e2>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1e2>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1e2>
 80029e4:	2300      	movs	r3, #0
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029f6:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a28:	4a2e      	ldr	r2, [pc, #184]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <HAL_GPIO_Init+0x2e0>)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f aea9 	bne.w	8002814 <HAL_GPIO_Init+0x10>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002af6:	e0b2      	b.n	8002c5e <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a5 	beq.w	8002c58 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_GPIO_DeInit+0x194>)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b36:	d013      	beq.n	8002b60 <HAL_GPIO_DeInit+0x78>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_GPIO_DeInit+0x198>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00d      	beq.n	8002b5c <HAL_GPIO_DeInit+0x74>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_GPIO_DeInit+0x19c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <HAL_GPIO_DeInit+0x70>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_GPIO_DeInit+0x1a0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_GPIO_DeInit+0x6c>
 8002b50:	2303      	movs	r3, #3
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_DeInit+0x7a>
 8002b54:	2305      	movs	r3, #5
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_DeInit+0x7a>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_DeInit+0x7a>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_DeInit+0x7a>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d132      	bne.n	8002bd8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	4944      	ldr	r1, [pc, #272]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4940      	ldr	r1, [pc, #256]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	493d      	ldr	r1, [pc, #244]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	4939      	ldr	r1, [pc, #228]	; (8002c8c <HAL_GPIO_DeInit+0x1a4>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002bba:	4a30      	ldr	r2, [pc, #192]	; (8002c7c <HAL_GPIO_DeInit+0x194>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	482c      	ldr	r0, [pc, #176]	; (8002c7c <HAL_GPIO_DeInit+0x194>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2103      	movs	r1, #3
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	401a      	ands	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	08d2      	lsrs	r2, r2, #3
 8002c0e:	4019      	ands	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2103      	movs	r1, #3
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	2101      	movs	r1, #1
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f47f af46 	bne.w	8002af8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	48000800 	.word	0x48000800
 8002c88:	48000c00 	.word	0x48000c00
 8002c8c:	40010400 	.word	0x40010400

08002c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca0:	787b      	ldrb	r3, [r7, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cac:	e002      	b.n	8002cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af06      	add	r7, sp, #24
 8002cc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0d0      	b.n	8002e74 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f006 fa94 	bl	8009214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fd8c 	bl	8005816 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e04c      	b.n	8002d9e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3301      	adds	r3, #1
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	b298      	uxth	r0, r3
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3336      	adds	r3, #54	; 0x36
 8002d42:	4602      	mov	r2, r0
 8002d44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3303      	adds	r3, #3
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3338      	adds	r3, #56	; 0x38
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333c      	adds	r3, #60	; 0x3c
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3340      	adds	r3, #64	; 0x40
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d3ad      	bcc.n	8002d04 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e044      	b.n	8002e38 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3b5      	bcc.n	8002dae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	687e      	ldr	r6, [r7, #4]
 8002e4a:	466d      	mov	r5, sp
 8002e4c:	f106 0410 	add.w	r4, r6, #16
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	1d33      	adds	r3, r6, #4
 8002e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e5c:	6838      	ldr	r0, [r7, #0]
 8002e5e:	f002 fcf5 	bl	800584c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_PCD_Start+0x16>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e016      	b.n	8002ec0 <HAL_PCD_Start+0x44>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fca2 	bl	80057e8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f006 fc34 	bl	8009714 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 fc7b 	bl	80077ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 fc74 	bl	80077c2 <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	d102      	bne.n	8002eec <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 faf6 	bl	80034d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 fc66 	bl	80077c2 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d112      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	b292      	uxth	r2, r2
 8002f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f006 f9fd 	bl	800931a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f20:	2100      	movs	r1, #0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8c7 	bl	80030b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fc48 	bl	80077c2 <USB_ReadInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f3c:	d10b      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f50:	b292      	uxth	r2, r2
 8002f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fc31 	bl	80077c2 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	d10b      	bne.n	8002f84 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fc1a 	bl	80077c2 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d126      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0204 	bic.w	r2, r2, #4
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0208 	bic.w	r2, r2, #8
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f006 f9de 	bl	800938c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fbe8 	bl	80077c2 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffc:	d126      	bne.n	800304c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0208 	orr.w	r2, r2, #8
 8003010:	b292      	uxth	r2, r2
 8003012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003028:	b292      	uxth	r2, r2
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0204 	orr.w	r2, r2, #4
 8003040:	b292      	uxth	r2, r2
 8003042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f006 f986 	bl	8009358 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f004 fbb6 	bl	80077c2 <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d10e      	bne.n	8003080 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f006 f93f 	bl	80092fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f004 fb9c 	bl	80077c2 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d10b      	bne.n	80030ae <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	b292      	uxth	r2, r2
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_SetAddress+0x1a>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e013      	b.n	80030f8 <HAL_PCD_SetAddress+0x42>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fb4b 	bl	8007784 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	70fb      	strb	r3, [r7, #3]
 8003112:	460b      	mov	r3, r1
 8003114:	803b      	strh	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da0e      	bge.n	8003144 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	705a      	strb	r2, [r3, #1]
 8003142:	e00e      	b.n	8003162 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800316e:	883a      	ldrh	r2, [r7, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	78ba      	ldrb	r2, [r7, #2]
 8003178:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800318c:	78bb      	ldrb	r3, [r7, #2]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d102      	bne.n	8003198 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_PCD_EP_Open+0xa6>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e00e      	b.n	80031c4 <HAL_PCD_EP_Open+0xc4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 fb6b 	bl	8005890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031c2:	7afb      	ldrb	r3, [r7, #11]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0e      	bge.n	80031fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00e      	b.n	800321c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 0207 	and.w	r2, r3, #7
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_EP_Close+0x6a>
 8003232:	2302      	movs	r3, #2
 8003234:	e00e      	b.n	8003254 <HAL_PCD_EP_Close+0x88>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f002 fe91 	bl	8005f6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	460b      	mov	r3, r1
 800326a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	7afb      	ldrb	r3, [r7, #11]
 800326e:	f003 0207 	and.w	r2, r3, #7
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 f844 	bl	8006346 <USB_EPStartXfer>
 80032be:	e005      	b.n	80032cc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 f83d 	bl	8006346 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0207 	and.w	r2, r3, #7
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032f8:	681b      	ldr	r3, [r3, #0]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	460b      	mov	r3, r1
 8003314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003316:	7afb      	ldrb	r3, [r7, #11]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	b2da      	uxtb	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	4618      	mov	r0, r3
 8003370:	f002 ffe9 	bl	8006346 <USB_EPStartXfer>
 8003374:	e005      	b.n	8003382 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6979      	ldr	r1, [r7, #20]
 800337c:	4618      	mov	r0, r3
 800337e:	f002 ffe2 	bl	8006346 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 0207 	and.w	r2, r3, #7
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d901      	bls.n	80033aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e03e      	b.n	8003428 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da0e      	bge.n	80033d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	705a      	strb	r2, [r3, #1]
 80033ce:	e00c      	b.n	80033ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_PCD_EP_SetStall+0x7e>
 8003406:	2302      	movs	r3, #2
 8003408:	e00e      	b.n	8003428 <HAL_PCD_EP_SetStall+0x9c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	4618      	mov	r0, r3
 800341a:	f004 f8b4 	bl	8007586 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d901      	bls.n	800344e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e040      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800344e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da0e      	bge.n	8003474 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	705a      	strb	r2, [r3, #1]
 8003472:	e00e      	b.n	8003492 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_EP_ClrStall+0x82>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e00e      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0xa0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 f8b1 	bl	8007628 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034e0:	e2d1      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80034f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 8152 	bne.w	80037a6 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d150      	bne.n	80035ae <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	81fb      	strh	r3, [r7, #14]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3328      	adds	r3, #40	; 0x28
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	4413      	add	r3, r2
 8003550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	441a      	add	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800356c:	2100      	movs	r1, #0
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f005 feab 	bl	80092ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8282 	beq.w	8003a86 <PCD_EP_ISR_Handler+0x5ae>
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 827d 	bne.w	8003a86 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b292      	uxth	r2, r2
 80035a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035ac:	e26b      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d032      	beq.n	800362e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003602:	b29b      	uxth	r3, r3
 8003604:	f004 f92f 	bl	8007866 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29a      	uxth	r2, r3
 8003610:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003614:	4013      	ands	r3, r2
 8003616:	823b      	strh	r3, [r7, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	8a3a      	ldrh	r2, [r7, #16]
 800361e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003622:	b292      	uxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f005 fe22 	bl	8009270 <HAL_PCD_SetupStageCallback>
 800362c:	e22b      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800362e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003632:	2b00      	cmp	r3, #0
 8003634:	f280 8227 	bge.w	8003a86 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003644:	4013      	ands	r3, r2
 8003646:	83bb      	strh	r3, [r7, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	8bba      	ldrh	r2, [r7, #28]
 800364e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003652:	b292      	uxth	r2, r2
 8003654:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	4413      	add	r3, r2
 8003670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d019      	beq.n	80036ba <PCD_EP_ISR_Handler+0x1e2>
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	6959      	ldr	r1, [r3, #20]
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f004 f8e1 	bl	8007866 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	441a      	add	r2, r3
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f005 fded 	bl	8009294 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4413      	add	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d112      	bne.n	8003708 <PCD_EP_ISR_Handler+0x230>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003700:	b29a      	uxth	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	e02f      	b.n	8003768 <PCD_EP_ISR_Handler+0x290>
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b3e      	cmp	r3, #62	; 0x3e
 800370e:	d813      	bhi.n	8003738 <PCD_EP_ISR_Handler+0x260>
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <PCD_EP_ISR_Handler+0x252>
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3301      	adds	r3, #1
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	b29b      	uxth	r3, r3
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	b29a      	uxth	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e017      	b.n	8003768 <PCD_EP_ISR_Handler+0x290>
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <PCD_EP_ISR_Handler+0x27a>
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	3b01      	subs	r3, #1
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	b29b      	uxth	r3, r3
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	b29b      	uxth	r3, r3
 800375a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003762:	b29a      	uxth	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	827b      	strh	r3, [r7, #18]
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003780:	827b      	strh	r3, [r7, #18]
 8003782:	8a7b      	ldrh	r3, [r7, #18]
 8003784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003788:	827b      	strh	r3, [r7, #18]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	8a7b      	ldrh	r3, [r7, #18]
 8003790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8013      	strh	r3, [r2, #0]
 80037a4:	e16f      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f280 80e4 	bge.w	800398a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037d8:	4013      	ands	r3, r2
 80037da:	853b      	strh	r3, [r7, #40]	; 0x28
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f0:	b292      	uxth	r2, r2
 80037f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	7b1b      	ldrb	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d120      	bne.n	8003854 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	4413      	add	r3, r2
 800382c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003836:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8083 	beq.w	8003946 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	6959      	ldr	r1, [r3, #20]
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	88da      	ldrh	r2, [r3, #6]
 800384c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800384e:	f004 f80a 	bl	8007866 <USB_ReadPMA>
 8003852:	e078      	b.n	8003946 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	78db      	ldrb	r3, [r3, #3]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d108      	bne.n	800386e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800385c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800385e:	461a      	mov	r2, r3
 8003860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f91d 	bl	8003aa2 <HAL_PCD_EP_DB_Receive>
 8003868:	4603      	mov	r3, r0
 800386a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800386c:	e06b      	b.n	8003946 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	847b      	strh	r3, [r7, #34]	; 0x22
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	441a      	add	r2, r3
 8003898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01f      	beq.n	8003908 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d028      	beq.n	8003946 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	891a      	ldrh	r2, [r3, #8]
 8003900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003902:	f003 ffb0 	bl	8007866 <USB_ReadPMA>
 8003906:	e01e      	b.n	8003946 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800392e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	895a      	ldrh	r2, [r3, #10]
 8003940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003942:	f003 ff90 	bl	8007866 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800394c:	441a      	add	r2, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003958:	441a      	add	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <PCD_EP_ISR_Handler+0x498>
 8003966:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	429a      	cmp	r2, r3
 800396e:	d206      	bcs.n	800397e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f005 fc8c 	bl	8009294 <HAL_PCD_DataOutStageCallback>
 800397c:	e005      	b.n	800398a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fcde 	bl	8006346 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800398a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d078      	beq.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	843b      	strh	r3, [r7, #32]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	8c3b      	ldrh	r3, [r7, #32]
 80039d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039dc:	b29b      	uxth	r3, r3
 80039de:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d108      	bne.n	80039fa <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d144      	bne.n	8003a7a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d13f      	bne.n	8003a7a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	8bfb      	ldrh	r3, [r7, #30]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d906      	bls.n	8003a38 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	8bfb      	ldrh	r3, [r7, #30]
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	619a      	str	r2, [r3, #24]
 8003a36:	e002      	b.n	8003a3e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 fc3c 	bl	80092ca <HAL_PCD_DataInStageCallback>
 8003a52:	e018      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	8bfb      	ldrh	r3, [r7, #30]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	8bfb      	ldrh	r3, [r7, #30]
 8003a66:	441a      	add	r2, r3
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fc67 	bl	8006346 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a78:	e005      	b.n	8003a86 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f917 	bl	8003cb4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f6ff ad25 	blt.w	80034e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3738      	adds	r7, #56	; 0x38
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d07c      	beq.n	8003bb4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ade:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	8b7b      	ldrh	r3, [r7, #26]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d306      	bcc.n	8003af8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	e002      	b.n	8003afe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d123      	bne.n	8003b4e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	833b      	strh	r3, [r7, #24]
 8003b22:	8b3b      	ldrh	r3, [r7, #24]
 8003b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b28:	833b      	strh	r3, [r7, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	8b3b      	ldrh	r3, [r7, #24]
 8003b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01f      	beq.n	8003b98 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	82fb      	strh	r3, [r7, #22]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	8afb      	ldrh	r3, [r7, #22]
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b98:	8b7b      	ldrh	r3, [r7, #26]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8085 	beq.w	8003caa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	891a      	ldrh	r2, [r3, #8]
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	f003 fe5a 	bl	8007866 <USB_ReadPMA>
 8003bb2:	e07a      	b.n	8003caa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	8b7b      	ldrh	r3, [r7, #26]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d306      	bcc.n	8003bf2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	8b7b      	ldrh	r3, [r7, #26]
 8003bea:	1ad2      	subs	r2, r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	619a      	str	r2, [r3, #24]
 8003bf0:	e002      	b.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d123      	bne.n	8003c48 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	83fb      	strh	r3, [r7, #30]
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c22:	83fb      	strh	r3, [r7, #30]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	8bfb      	ldrh	r3, [r7, #30]
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	83bb      	strh	r3, [r7, #28]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	441a      	add	r2, r3
 8003c7c:	8bbb      	ldrh	r3, [r7, #28]
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6959      	ldr	r1, [r3, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	895a      	ldrh	r2, [r3, #10]
 8003ca4:	8b7b      	ldrh	r3, [r7, #26]
 8003ca6:	f003 fdde 	bl	8007866 <USB_ReadPMA>
    }
  }

  return count;
 8003caa:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b094      	sub	sp, #80	; 0x50
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8136 	beq.w	8003f3a <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d907      	bls.n	8003d12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d0a:	1ad2      	subs	r2, r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	e002      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12c      	bne.n	8003d7a <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	4619      	mov	r1, r3
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f005 facf 	bl	80092ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8238 	beq.w	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	82fb      	strh	r3, [r7, #22]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	8afb      	ldrh	r3, [r7, #22]
 8003d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	8013      	strh	r3, [r2, #0]
 8003d78:	e216      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01f      	beq.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	441a      	add	r2, r3
 8003dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	f040 81ec 	bne.w	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003dd8:	441a      	add	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003de6:	441a      	add	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d309      	bcc.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	621a      	str	r2, [r3, #32]
 8003e0a:	e015      	b.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8003e14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e22:	e009      	b.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d155      	bne.n	8003eec <HAL_PCD_EP_DB_Transmit+0x238>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	00da      	lsls	r2, r3, #3
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d112      	bne.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x1e0>
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	801a      	strh	r2, [r3, #0]
 8003e92:	e047      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x270>
 8003e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e96:	2b3e      	cmp	r3, #62	; 0x3e
 8003e98:	d811      	bhi.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x20a>
 8003e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	3301      	adds	r3, #1
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	029b      	lsls	r3, r3, #10
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	e032      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x270>
 8003ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x220>
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e01b      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x270>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d117      	bne.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x270>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	4413      	add	r3, r2
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	00da      	lsls	r2, r3, #3
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	4413      	add	r3, r2
 8003f16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6959      	ldr	r1, [r3, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	891a      	ldrh	r2, [r3, #8]
 8003f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f003 fc55 	bl	80077e2 <USB_WritePMA>
 8003f38:	e136      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d307      	bcc.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	619a      	str	r2, [r3, #24]
 8003f7c:	e002      	b.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d12e      	bne.n	8003fea <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f005 f999 	bl	80092ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 8102 	bne.w	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
 8003fe8:	e0de      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11f      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	867b      	strh	r3, [r7, #50]	; 0x32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800403a:	2b01      	cmp	r3, #1
 800403c:	f040 80b4 	bne.w	80041a8 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004056:	441a      	add	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d309      	bcc.n	800407c <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	621a      	str	r2, [r3, #32]
 800407a:	e015      	b.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8004084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004092:	e009      	b.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2200      	movs	r2, #0
 800409e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d155      	bne.n	8004162 <HAL_PCD_EP_DB_Transmit+0x4ae>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	4413      	add	r3, r2
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	00da      	lsls	r2, r3, #3
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	4413      	add	r3, r2
 80040d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d112      	bne.n	800410a <HAL_PCD_EP_DB_Transmit+0x456>
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004102:	b29a      	uxth	r2, r3
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	e044      	b.n	8004194 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800410a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410c:	2b3e      	cmp	r3, #62	; 0x3e
 800410e:	d811      	bhi.n	8004134 <HAL_PCD_EP_DB_Transmit+0x480>
 8004110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_PCD_EP_DB_Transmit+0x472>
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	3301      	adds	r3, #1
 8004124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	b29b      	uxth	r3, r3
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	b29a      	uxth	r2, r3
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	e02f      	b.n	8004194 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <HAL_PCD_EP_DB_Transmit+0x496>
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	3b01      	subs	r3, #1
 8004148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414c:	b29b      	uxth	r3, r3
 800414e:	029b      	lsls	r3, r3, #10
 8004150:	b29b      	uxth	r3, r3
 8004152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415a:	b29a      	uxth	r2, r3
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	e018      	b.n	8004194 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d114      	bne.n	8004194 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004178:	4413      	add	r3, r2
 800417a:	643b      	str	r3, [r7, #64]	; 0x40
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00da      	lsls	r2, r3, #3
 8004182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004184:	4413      	add	r3, r2
 8004186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418e:	b29a      	uxth	r2, r3
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6959      	ldr	r1, [r3, #20]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	895a      	ldrh	r2, [r3, #10]
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f003 fb1d 	bl	80077e2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	82bb      	strh	r3, [r7, #20]
 80041c4:	8abb      	ldrh	r3, [r7, #20]
 80041c6:	f083 0310 	eor.w	r3, r3, #16
 80041ca:	82bb      	strh	r3, [r7, #20]
 80041cc:	8abb      	ldrh	r3, [r7, #20]
 80041ce:	f083 0320 	eor.w	r3, r3, #32
 80041d2:	82bb      	strh	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	8abb      	ldrh	r3, [r7, #20]
 80041e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3750      	adds	r7, #80	; 0x50
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e009      	b.n	800424c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004238:	897a      	ldrh	r2, [r7, #10]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800424c:	893b      	ldrh	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	b29a      	uxth	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	80da      	strh	r2, [r3, #6]
 8004260:	e00b      	b.n	800427a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2201      	movs	r2, #1
 8004266:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	b29a      	uxth	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0c1b      	lsrs	r3, r3, #16
 8004274:	b29a      	uxth	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800428e:	af00      	add	r7, sp, #0
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f000 bef4 	b.w	800508a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 816a 	beq.w	8004586 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042b2:	4bb3      	ldr	r3, [pc, #716]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d00c      	beq.n	80042d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042be:	4bb0      	ldr	r3, [pc, #704]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d159      	bne.n	800437e <HAL_RCC_OscConfig+0xf6>
 80042ca:	4bad      	ldr	r3, [pc, #692]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d6:	d152      	bne.n	800437e <HAL_RCC_OscConfig+0xf6>
 80042d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d102      	bne.n	800430a <HAL_RCC_OscConfig+0x82>
 8004304:	4b9e      	ldr	r3, [pc, #632]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0xae>
 800430a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800431e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004322:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004326:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004332:	4b93      	ldr	r3, [pc, #588]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800433a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800433e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004342:	fa92 f2a2 	rbit	r2, r2
 8004346:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800434a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800434e:	fab2 f282 	clz	r2, r2
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f002 021f 	and.w	r2, r2, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 810c 	beq.w	8004584 <HAL_RCC_OscConfig+0x2fc>
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 8106 	bne.w	8004584 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f000 be86 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x110>
 800438a:	4b7d      	ldr	r3, [pc, #500]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7c      	ldr	r2, [pc, #496]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e030      	b.n	80043fa <HAL_RCC_OscConfig+0x172>
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x134>
 80043a2:	4b77      	ldr	r3, [pc, #476]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a76      	ldr	r2, [pc, #472]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b74      	ldr	r3, [pc, #464]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a73      	ldr	r2, [pc, #460]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01e      	b.n	80043fa <HAL_RCC_OscConfig+0x172>
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x15a>
 80043c8:	4b6d      	ldr	r3, [pc, #436]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6c      	ldr	r2, [pc, #432]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a69      	ldr	r2, [pc, #420]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x172>
 80043e2:	4b67      	ldr	r3, [pc, #412]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a66      	ldr	r2, [pc, #408]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b64      	ldr	r3, [pc, #400]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a63      	ldr	r2, [pc, #396]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f023 020f 	bic.w	r2, r3, #15
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	495d      	ldr	r1, [pc, #372]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d059      	beq.n	80044cc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd f9f8 	bl	800180c <HAL_GetTick>
 800441c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004422:	f7fd f9f3 	bl	800180c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d902      	bls.n	8004438 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	f000 be29 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
 8004438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800444c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <HAL_RCC_OscConfig+0x1e2>
 8004464:	4b46      	ldr	r3, [pc, #280]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x20e>
 800446a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800446e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800447e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004482:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004486:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800449a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800449e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80044a2:	fa92 f2a2 	rbit	r2, r2
 80044a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80044aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80044ae:	fab2 f282 	clz	r2, r2
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	f002 021f 	and.w	r2, r2, #31
 80044be:	2101      	movs	r1, #1
 80044c0:	fa01 f202 	lsl.w	r2, r1, r2
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ab      	beq.n	8004422 <HAL_RCC_OscConfig+0x19a>
 80044ca:	e05c      	b.n	8004586 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd f99e 	bl	800180c <HAL_GetTick>
 80044d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d6:	f7fd f999 	bl	800180c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d902      	bls.n	80044ec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	f000 bdcf 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
 80044ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004500:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d102      	bne.n	800451e <HAL_RCC_OscConfig+0x296>
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x2c2>
 800451e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004522:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004536:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800453a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_RCC_OscConfig+0x2f8>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800454e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004552:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004556:	fa92 f2a2 	rbit	r2, r2
 800455a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800455e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004562:	fab2 f282 	clz	r2, r2
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f042 0220 	orr.w	r2, r2, #32
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	f002 021f 	and.w	r2, r2, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ab      	bne.n	80044d6 <HAL_RCC_OscConfig+0x24e>
 800457e:	e002      	b.n	8004586 <HAL_RCC_OscConfig+0x2fe>
 8004580:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 816f 	beq.w	8004874 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004596:	4bd0      	ldr	r3, [pc, #832]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045a2:	4bcd      	ldr	r3, [pc, #820]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d16c      	bne.n	8004688 <HAL_RCC_OscConfig+0x400>
 80045ae:	4bca      	ldr	r3, [pc, #808]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d166      	bne.n	8004688 <HAL_RCC_OscConfig+0x400>
 80045ba:	2302      	movs	r3, #2
 80045bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_OscConfig+0x362>
 80045e4:	4bbc      	ldr	r3, [pc, #752]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	e013      	b.n	8004612 <HAL_RCC_OscConfig+0x38a>
 80045ea:	2302      	movs	r3, #2
 80045ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045fc:	2302      	movs	r3, #2
 80045fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800460e:	4bb2      	ldr	r3, [pc, #712]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2202      	movs	r2, #2
 8004614:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004618:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800461c:	fa92 f2a2 	rbit	r2, r2
 8004620:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004624:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004628:	fab2 f282 	clz	r2, r2
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	f042 0220 	orr.w	r2, r2, #32
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f002 021f 	and.w	r2, r2, #31
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_RCC_OscConfig+0x3cc>
 8004644:	1d3b      	adds	r3, r7, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d002      	beq.n	8004654 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f000 bd1b 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	21f8      	movs	r1, #248	; 0xf8
 8004664:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800466c:	fa91 f1a1 	rbit	r1, r1
 8004670:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004674:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004678:	fab1 f181 	clz	r1, r1
 800467c:	b2c9      	uxtb	r1, r1
 800467e:	408b      	lsls	r3, r1
 8004680:	4995      	ldr	r1, [pc, #596]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	e0f5      	b.n	8004874 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8085 	beq.w	800479e <HAL_RCC_OscConfig+0x516>
 8004694:	2301      	movs	r3, #1
 8004696:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80046a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	461a      	mov	r2, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fd f8a4 	bl	800180c <HAL_GetTick>
 80046c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fd f89f 	bl	800180c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d902      	bls.n	80046e0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	f000 bcd5 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_RCC_OscConfig+0x488>
 800470a:	4b73      	ldr	r3, [pc, #460]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e013      	b.n	8004738 <HAL_RCC_OscConfig+0x4b0>
 8004710:	2302      	movs	r3, #2
 8004712:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004722:	2302      	movs	r3, #2
 8004724:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004728:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800472c:	fa93 f3a3 	rbit	r3, r3
 8004730:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2202      	movs	r2, #2
 800473a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800473e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004742:	fa92 f2a2 	rbit	r2, r2
 8004746:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800474a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	f042 0220 	orr.w	r2, r2, #32
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f002 021f 	and.w	r2, r2, #31
 800475e:	2101      	movs	r1, #1
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0af      	beq.n	80046ca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476a:	4b5b      	ldr	r3, [pc, #364]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	21f8      	movs	r1, #248	; 0xf8
 800477a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004782:	fa91 f1a1 	rbit	r1, r1
 8004786:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800478a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800478e:	fab1 f181 	clz	r1, r1
 8004792:	b2c9      	uxtb	r1, r1
 8004794:	408b      	lsls	r3, r1
 8004796:	4950      	ldr	r1, [pc, #320]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
 800479c:	e06a      	b.n	8004874 <HAL_RCC_OscConfig+0x5ec>
 800479e:	2301      	movs	r3, #1
 80047a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80047b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fd f81f 	bl	800180c <HAL_GetTick>
 80047ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fd f81a 	bl	800180c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d902      	bls.n	80047ea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	f000 bc50 	b.w	800508a <HAL_RCC_OscConfig+0xe02>
 80047ea:	2302      	movs	r3, #2
 80047ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_RCC_OscConfig+0x592>
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	e013      	b.n	8004842 <HAL_RCC_OscConfig+0x5ba>
 800481a:	2302      	movs	r3, #2
 800481c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800482c:	2302      	movs	r3, #2
 800482e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_RCC_OscConfig+0x650>)
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2202      	movs	r2, #2
 8004844:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004848:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800484c:	fa92 f2a2 	rbit	r2, r2
 8004850:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004854:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004858:	fab2 f282 	clz	r2, r2
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	f002 021f 	and.w	r2, r2, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f202 	lsl.w	r2, r1, r2
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1af      	bne.n	80047d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004874:	1d3b      	adds	r3, r7, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80da 	beq.w	8004a38 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d069      	beq.n	8004962 <HAL_RCC_OscConfig+0x6da>
 800488e:	2301      	movs	r3, #1
 8004890:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80048a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a4:	fab3 f383 	clz	r3, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_OscConfig+0x654>)
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	461a      	mov	r2, r3
 80048b4:	2301      	movs	r3, #1
 80048b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fc ffa8 	bl	800180c <HAL_GetTick>
 80048bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c0:	e00e      	b.n	80048e0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fc ffa3 	bl	800180c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d906      	bls.n	80048e0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e3d9      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	10908120 	.word	0x10908120
 80048e0:	2302      	movs	r3, #2
 80048e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80048f6:	2202      	movs	r2, #2
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	fa93 f2a3 	rbit	r2, r3
 8004904:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800490e:	2202      	movs	r2, #2
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fa93 f2a3 	rbit	r2, r3
 800491c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004920:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004922:	4ba5      	ldr	r3, [pc, #660]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004926:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800492a:	2102      	movs	r1, #2
 800492c:	6019      	str	r1, [r3, #0]
 800492e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa93 f1a3 	rbit	r1, r3
 8004938:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800493c:	6019      	str	r1, [r3, #0]
  return result;
 800493e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0b0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x63a>
 8004960:	e06a      	b.n	8004a38 <HAL_RCC_OscConfig+0x7b0>
 8004962:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	fa93 f2a3 	rbit	r2, r3
 8004974:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004978:	601a      	str	r2, [r3, #0]
  return result;
 800497a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800497e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	4b8c      	ldr	r3, [pc, #560]	; (8004bbc <HAL_RCC_OscConfig+0x934>)
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004994:	f7fc ff3a 	bl	800180c <HAL_GetTick>
 8004998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	e009      	b.n	80049b2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499e:	f7fc ff35 	bl	800180c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e36b      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 80049b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80049b6:	2202      	movs	r2, #2
 80049b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	fa93 f2a3 	rbit	r2, r3
 80049c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80049ce:	2202      	movs	r2, #2
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	fa93 f2a3 	rbit	r2, r3
 80049dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80049e6:	2202      	movs	r2, #2
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	fa93 f2a3 	rbit	r2, r3
 80049f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80049f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fa:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 80049fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a02:	2102      	movs	r1, #2
 8004a04:	6019      	str	r1, [r3, #0]
 8004a06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	fa93 f1a3 	rbit	r1, r3
 8004a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a14:	6019      	str	r1, [r3, #0]
  return result;
 8004a16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b2      	bne.n	800499e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8158 	beq.w	8004cf8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d112      	bne.n	8004a80 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4a56      	ldr	r2, [pc, #344]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	61d3      	str	r3, [r2, #28]
 8004a66:	4b54      	ldr	r3, [pc, #336]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <HAL_RCC_OscConfig+0x938>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11a      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8c:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <HAL_RCC_OscConfig+0x938>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a4b      	ldr	r2, [pc, #300]	; (8004bc0 <HAL_RCC_OscConfig+0x938>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a98:	f7fc feb8 	bl	800180c <HAL_GetTick>
 8004a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	e009      	b.n	8004ab6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa2:	f7fc feb3 	bl	800180c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e2e9      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b42      	ldr	r3, [pc, #264]	; (8004bc0 <HAL_RCC_OscConfig+0x938>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ef      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x852>
 8004acc:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6213      	str	r3, [r2, #32]
 8004ad8:	e02f      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCC_OscConfig+0x876>
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a33      	ldr	r2, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4a30      	ldr	r2, [pc, #192]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004af6:	f023 0304 	bic.w	r3, r3, #4
 8004afa:	6213      	str	r3, [r2, #32]
 8004afc:	e01d      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d10c      	bne.n	8004b22 <HAL_RCC_OscConfig+0x89a>
 8004b08:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	6213      	str	r3, [r2, #32]
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6213      	str	r3, [r2, #32]
 8004b20:	e00b      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6213      	str	r3, [r2, #32]
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d06b      	beq.n	8004c1c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7fc fe62 	bl	800180c <HAL_GetTick>
 8004b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fc fe5d 	bl	800180c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e291      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 8004b66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	fa93 f2a3 	rbit	r2, r3
 8004b78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b82:	2202      	movs	r2, #2
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b94:	601a      	str	r2, [r3, #0]
  return result;
 8004b96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f043 0302 	orr.w	r3, r3, #2
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x93c>
 8004bb0:	4b01      	ldr	r3, [pc, #4]	; (8004bb8 <HAL_RCC_OscConfig+0x930>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	e014      	b.n	8004be0 <HAL_RCC_OscConfig+0x958>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	10908120 	.word	0x10908120
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bc8:	2202      	movs	r2, #2
 8004bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	4bbb      	ldr	r3, [pc, #748]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004be4:	2102      	movs	r1, #2
 8004be6:	6011      	str	r1, [r2, #0]
 8004be8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	fa92 f1a2 	rbit	r1, r2
 8004bf2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004bf6:	6011      	str	r1, [r2, #0]
  return result;
 8004bf8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	fab2 f282 	clz	r2, r2
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	f002 021f 	and.w	r2, r2, #31
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f202 	lsl.w	r2, r1, r2
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d099      	beq.n	8004b4e <HAL_RCC_OscConfig+0x8c6>
 8004c1a:	e063      	b.n	8004ce4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fdf6 	bl	800180c <HAL_GetTick>
 8004c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00b      	b.n	8004c3e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fc fdf1 	bl	800180c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e225      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 8004c3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004c42:	2202      	movs	r2, #2
 8004c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	fa93 f2a3 	rbit	r2, r3
 8004c50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	fa93 f2a3 	rbit	r2, r3
 8004c68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c6c:	601a      	str	r2, [r3, #0]
  return result;
 8004c6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c74:	fab3 f383 	clz	r3, r3
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d102      	bne.n	8004c8e <HAL_RCC_OscConfig+0xa06>
 8004c88:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	e00d      	b.n	8004caa <HAL_RCC_OscConfig+0xa22>
 8004c8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004c92:	2202      	movs	r2, #2
 8004c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	fa93 f2a3 	rbit	r2, r3
 8004ca0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cae:	2102      	movs	r1, #2
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	fa92 f1a2 	rbit	r1, r2
 8004cbc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004cc0:	6011      	str	r1, [r2, #0]
  return result;
 8004cc2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f002 021f 	and.w	r2, r2, #31
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f202 	lsl.w	r2, r1, r2
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1a0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ce4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4b77      	ldr	r3, [pc, #476]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4a76      	ldr	r2, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 81c2 	beq.w	8005088 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d04:	4b71      	ldr	r3, [pc, #452]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	f000 819c 	beq.w	800504a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f040 8114 	bne.w	8004f46 <HAL_RCC_OscConfig+0xcbe>
 8004d1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004d22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004d36:	601a      	str	r2, [r3, #0]
  return result;
 8004d38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004d3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fc fd5a 	bl	800180c <HAL_GetTick>
 8004d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7fc fd55 	bl	800180c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e18b      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 8004d72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d8a:	601a      	str	r2, [r3, #0]
  return result;
 8004d8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d102      	bne.n	8004dac <HAL_RCC_OscConfig+0xb24>
 8004da6:	4b49      	ldr	r3, [pc, #292]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	e01b      	b.n	8004de4 <HAL_RCC_OscConfig+0xb5c>
 8004dac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	fa93 f2a3 	rbit	r2, r3
 8004dc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	fa93 f2a3 	rbit	r2, r3
 8004dda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	fa92 f1a2 	rbit	r1, r2
 8004df8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004dfc:	6011      	str	r1, [r2, #0]
  return result;
 8004dfe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	fab2 f282 	clz	r2, r2
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	f042 0220 	orr.w	r2, r2, #32
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	f002 021f 	and.w	r2, r2, #31
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d19e      	bne.n	8004d5e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e20:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	4925      	ldr	r1, [pc, #148]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	fa93 f2a3 	rbit	r2, r3
 8004e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e54:	601a      	str	r2, [r3, #0]
  return result;
 8004e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e5a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2301      	movs	r3, #1
 8004e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fc fccb 	bl	800180c <HAL_GetTick>
 8004e76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e7a:	e009      	b.n	8004e90 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fc fcc6 	bl	800180c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0fc      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 8004e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	fa93 f2a3 	rbit	r2, r3
 8004ea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ea8:	601a      	str	r2, [r3, #0]
  return result;
 8004eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004eae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb0:	fab3 f383 	clz	r3, r3
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xc48>
 8004ec4:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <HAL_RCC_OscConfig+0xc44>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	e01e      	b.n	8004f08 <HAL_RCC_OscConfig+0xc80>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	fa93 f2a3 	rbit	r2, r3
 8004ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	fa93 f2a3 	rbit	r2, r3
 8004efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_RCC_OscConfig+0xe0c>)
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	fa92 f1a2 	rbit	r1, r2
 8004f1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f20:	6011      	str	r1, [r2, #0]
  return result;
 8004f22:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	fab2 f282 	clz	r2, r2
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f002 021f 	and.w	r2, r2, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d09b      	beq.n	8004e7c <HAL_RCC_OscConfig+0xbf4>
 8004f44:	e0a0      	b.n	8005088 <HAL_RCC_OscConfig+0xe00>
 8004f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	fa93 f2a3 	rbit	r2, r3
 8004f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f5e:	601a      	str	r2, [r3, #0]
  return result;
 8004f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	461a      	mov	r2, r3
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fc46 	bl	800180c <HAL_GetTick>
 8004f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f84:	e009      	b.n	8004f9a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fc fc41 	bl	800180c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e077      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
 8004f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb2:	601a      	str	r2, [r3, #0]
  return result;
 8004fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xd4c>
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_OscConfig+0xe0c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	e01b      	b.n	800500c <HAL_RCC_OscConfig+0xd84>
 8004fd4:	f107 0320 	add.w	r3, r7, #32
 8004fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	f107 0320 	add.w	r3, r7, #32
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	fa93 f2a3 	rbit	r2, r3
 8004fe8:	f107 031c 	add.w	r3, r7, #28
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f107 0318 	add.w	r3, r7, #24
 8004ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f107 0318 	add.w	r3, r7, #24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	fa93 f2a3 	rbit	r2, r3
 8005002:	f107 0314 	add.w	r3, r7, #20
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCC_OscConfig+0xe0c>)
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f107 0210 	add.w	r2, r7, #16
 8005010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	f107 0210 	add.w	r2, r7, #16
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	fa92 f1a2 	rbit	r1, r2
 8005020:	f107 020c 	add.w	r2, r7, #12
 8005024:	6011      	str	r1, [r2, #0]
  return result;
 8005026:	f107 020c 	add.w	r2, r7, #12
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	fab2 f282 	clz	r2, r2
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	f042 0220 	orr.w	r2, r2, #32
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f002 021f 	and.w	r2, r2, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f202 	lsl.w	r2, r1, r2
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d19e      	bne.n	8004f86 <HAL_RCC_OscConfig+0xcfe>
 8005048:	e01e      	b.n	8005088 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e018      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <HAL_RCC_OscConfig+0xe0c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005060:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	429a      	cmp	r2, r3
 8005070:	d108      	bne.n	8005084 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b09e      	sub	sp, #120	; 0x78
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e162      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b90      	ldr	r3, [pc, #576]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b8d      	ldr	r3, [pc, #564]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 0207 	bic.w	r2, r3, #7
 80050c6:	498b      	ldr	r1, [pc, #556]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b89      	ldr	r3, [pc, #548]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e14a      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	497f      	ldr	r1, [pc, #508]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80dc 	beq.w	80052c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d13c      	bne.n	800518e <HAL_RCC_ClockConfig+0xf6>
 8005114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005118:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800511c:	fa93 f3a3 	rbit	r3, r3
 8005120:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <HAL_RCC_ClockConfig+0xa6>
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	e00f      	b.n	800515e <HAL_RCC_ClockConfig+0xc6>
 800513e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	667b      	str	r3, [r7, #100]	; 0x64
 800514c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005150:	663b      	str	r3, [r7, #96]	; 0x60
 8005152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005162:	65ba      	str	r2, [r7, #88]	; 0x58
 8005164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005166:	fa92 f2a2 	rbit	r2, r2
 800516a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800516c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800516e:	fab2 f282 	clz	r2, r2
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	f042 0220 	orr.w	r2, r2, #32
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	f002 021f 	and.w	r2, r2, #31
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f202 	lsl.w	r2, r1, r2
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d17b      	bne.n	8005282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0f3      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d13c      	bne.n	8005210 <HAL_RCC_ClockConfig+0x178>
 8005196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x128>
 80051ba:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	e00f      	b.n	80051e0 <HAL_RCC_ClockConfig+0x148>
 80051c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c8:	fa93 f3a3 	rbit	r3, r3
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
 80051ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
 80051d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d6:	fa93 f3a3 	rbit	r3, r3
 80051da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051dc:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80051e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e8:	fa92 f2a2 	rbit	r2, r2
 80051ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80051ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f0:	fab2 f282 	clz	r2, r2
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	f042 0220 	orr.w	r2, r2, #32
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	f002 021f 	and.w	r2, r2, #31
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f202 	lsl.w	r2, r1, r2
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d13a      	bne.n	8005282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0b2      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
 8005210:	2302      	movs	r3, #2
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	fa93 f3a3 	rbit	r3, r3
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	fab3 f383 	clz	r3, r3
 8005222:	b2db      	uxtb	r3, r3
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d102      	bne.n	8005238 <HAL_RCC_ClockConfig+0x1a0>
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	e00d      	b.n	8005254 <HAL_RCC_ClockConfig+0x1bc>
 8005238:	2302      	movs	r3, #2
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	2302      	movs	r3, #2
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	fa93 f3a3 	rbit	r3, r3
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2202      	movs	r2, #2
 8005256:	61ba      	str	r2, [r7, #24]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	fa92 f2a2 	rbit	r2, r2
 800525e:	617a      	str	r2, [r7, #20]
  return result;
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	fab2 f282 	clz	r2, r2
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	f042 0220 	orr.w	r2, r2, #32
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	f002 021f 	and.w	r2, r2, #31
 8005272:	2101      	movs	r1, #1
 8005274:	fa01 f202 	lsl.w	r2, r1, r2
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e079      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005282:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f023 0203 	bic.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	491a      	ldr	r1, [pc, #104]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005294:	f7fc faba 	bl	800180c <HAL_GetTick>
 8005298:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529c:	f7fc fab6 	bl	800180c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e061      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 020c 	and.w	r2, r3, #12
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d1eb      	bne.n	800529c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d214      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 0207 	bic.w	r2, r3, #7
 80052da:	4906      	ldr	r1, [pc, #24]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e040      	b.n	8005376 <HAL_RCC_ClockConfig+0x2de>
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_ClockConfig+0x2e8>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	491a      	ldr	r1, [pc, #104]	; (8005380 <HAL_RCC_ClockConfig+0x2e8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <HAL_RCC_ClockConfig+0x2e8>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4912      	ldr	r1, [pc, #72]	; (8005380 <HAL_RCC_ClockConfig+0x2e8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800533a:	f000 f845 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 800533e:	4601      	mov	r1, r0
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_RCC_ClockConfig+0x2e8>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005348:	22f0      	movs	r2, #240	; 0xf0
 800534a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	fa92 f2a2 	rbit	r2, r2
 8005352:	60fa      	str	r2, [r7, #12]
  return result;
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	fab2 f282 	clz	r2, r2
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	40d3      	lsrs	r3, r2
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <HAL_RCC_ClockConfig+0x2ec>)
 8005360:	5cd3      	ldrb	r3, [r2, r3]
 8005362:	fa21 f303 	lsr.w	r3, r1, r3
 8005366:	4a08      	ldr	r2, [pc, #32]	; (8005388 <HAL_RCC_ClockConfig+0x2f0>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCC_ClockConfig+0x2f4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fc fa08 	bl	8001784 <HAL_InitTick>
  
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3778      	adds	r7, #120	; 0x78
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000
 8005384:	08009984 	.word	0x08009984
 8005388:	20000014 	.word	0x20000014
 800538c:	20000018 	.word	0x20000018

08005390 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800539a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	603b      	str	r3, [r7, #0]
  return result;
 80053a4:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	461a      	mov	r2, r3
 80053b8:	2301      	movs	r3, #1
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b08b      	sub	sp, #44	; 0x2c
 80053cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d002      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x30>
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d003      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0x36>
 80053f6:	e03c      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f8:	4b24      	ldr	r3, [pc, #144]	; (800548c <HAL_RCC_GetSysClockFreq+0xc4>)
 80053fa:	623b      	str	r3, [r7, #32]
      break;
 80053fc:	e03c      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005404:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005408:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	fa92 f2a2 	rbit	r2, r2
 8005410:	607a      	str	r2, [r7, #4]
  return result;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	fab2 f282 	clz	r2, r2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	40d3      	lsrs	r3, r2
 800541c:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_RCC_GetSysClockFreq+0xc8>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005422:	4b19      	ldr	r3, [pc, #100]	; (8005488 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	220f      	movs	r2, #15
 800542c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	fa92 f2a2 	rbit	r2, r2
 8005434:	60fa      	str	r2, [r7, #12]
  return result;
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	fab2 f282 	clz	r2, r2
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	40d3      	lsrs	r3, r2
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005442:	5cd3      	ldrb	r3, [r2, r3]
 8005444:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005450:	4a0e      	ldr	r2, [pc, #56]	; (800548c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	fbb2 f2f3 	udiv	r2, r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
 8005460:	e004      	b.n	800546c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	623b      	str	r3, [r7, #32]
      break;
 8005470:	e002      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005474:	623b      	str	r3, [r7, #32]
      break;
 8005476:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005478:	6a3b      	ldr	r3, [r7, #32]
}
 800547a:	4618      	mov	r0, r3
 800547c:	372c      	adds	r7, #44	; 0x2c
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000
 800548c:	007a1200 	.word	0x007a1200
 8005490:	08009994 	.word	0x08009994
 8005494:	080099a4 	.word	0x080099a4
 8005498:	003d0900 	.word	0x003d0900

0800549c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_RCC_NMI_IRQHandler+0x20>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d104      	bne.n	80054b6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054ac:	f7fb f940 	bl	8000730 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	701a      	strb	r2, [r3, #0]
  }
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000
 80054c0:	4002100a 	.word	0x4002100a

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b092      	sub	sp, #72	; 0x48
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80d7 	beq.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e8:	4b4e      	ldr	r3, [pc, #312]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10e      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f4:	4b4b      	ldr	r3, [pc, #300]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	4a4a      	ldr	r2, [pc, #296]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	61d3      	str	r3, [r2, #28]
 8005500:	4b48      	ldr	r3, [pc, #288]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005512:	4b45      	ldr	r3, [pc, #276]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d118      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551e:	4b42      	ldr	r3, [pc, #264]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a41      	ldr	r2, [pc, #260]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005528:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552a:	f7fc f96f 	bl	800180c <HAL_GetTick>
 800552e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fc f96b 	bl	800180c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	; 0x64
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e14b      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	4b38      	ldr	r3, [pc, #224]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8084 	beq.w	800566a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800556c:	429a      	cmp	r2, r3
 800556e:	d07c      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005570:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	461a      	mov	r2, r3
 800559a:	2301      	movs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055c2:	4a18      	ldr	r2, [pc, #96]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04b      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fc f91b 	bl	800180c <HAL_GetTick>
 80055d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055da:	f7fc f917 	bl	800180c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0f5      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80055f0:	2302      	movs	r3, #2
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	61fb      	str	r3, [r7, #28]
  return result;
 8005608:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d108      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800561e:	4b01      	ldr	r3, [pc, #4]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	e00d      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005624:	40021000 	.word	0x40021000
 8005628:	40007000 	.word	0x40007000
 800562c:	10908100 	.word	0x10908100
 8005630:	2302      	movs	r3, #2
 8005632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	4b69      	ldr	r3, [pc, #420]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	2202      	movs	r2, #2
 8005642:	613a      	str	r2, [r7, #16]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	fa92 f2a2 	rbit	r2, r2
 800564a:	60fa      	str	r2, [r7, #12]
  return result;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	fab2 f282 	clz	r2, r2
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	f002 021f 	and.w	r2, r2, #31
 800565e:	2101      	movs	r1, #1
 8005660:	fa01 f202 	lsl.w	r2, r1, r2
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0b7      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800566a:	4b5e      	ldr	r3, [pc, #376]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	495b      	ldr	r1, [pc, #364]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005678:	4313      	orrs	r3, r2
 800567a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800567c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005684:	4b57      	ldr	r3, [pc, #348]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4a56      	ldr	r2, [pc, #344]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800568a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569c:	4b51      	ldr	r3, [pc, #324]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	494e      	ldr	r1, [pc, #312]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ba:	4b4a      	ldr	r3, [pc, #296]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f023 0210 	bic.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4947      	ldr	r1, [pc, #284]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056d8:	4b42      	ldr	r3, [pc, #264]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	493f      	ldr	r1, [pc, #252]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f6:	4b3b      	ldr	r3, [pc, #236]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f023 0220 	bic.w	r2, r3, #32
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	4938      	ldr	r1, [pc, #224]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005704:	4313      	orrs	r3, r2
 8005706:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005714:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	4930      	ldr	r1, [pc, #192]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005722:	4313      	orrs	r3, r2
 8005724:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005732:	4b2c      	ldr	r3, [pc, #176]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4929      	ldr	r1, [pc, #164]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005740:	4313      	orrs	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005750:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4921      	ldr	r1, [pc, #132]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800575e:	4313      	orrs	r3, r2
 8005760:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	491a      	ldr	r1, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800577c:	4313      	orrs	r3, r2
 800577e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	4912      	ldr	r1, [pc, #72]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800579a:	4313      	orrs	r3, r2
 800579c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	490b      	ldr	r1, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4903      	ldr	r1, [pc, #12]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3748      	adds	r7, #72	; 0x48
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000

080057e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800581e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005822:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	b29b      	uxth	r3, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	b29b      	uxth	r3, r3
 8005834:	4013      	ands	r3, r2
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	f107 0014 	add.w	r0, r7, #20
 800585a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	b004      	add	sp, #16
 800588c:	4770      	bx	lr
	...

08005890 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005890:	b480      	push	{r7}
 8005892:	b09b      	sub	sp, #108	; 0x6c
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	78db      	ldrb	r3, [r3, #3]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d81f      	bhi.n	8005902 <USB_ActivateEndpoint+0x72>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <USB_ActivateEndpoint+0x38>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	0800590b 	.word	0x0800590b
 80058d4:	080058e7 	.word	0x080058e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058e4:	e012      	b.n	800590c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058f2:	e00b      	b.n	800590c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005900:	e004      	b.n	800590c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005908:	e000      	b.n	800590c <USB_ActivateEndpoint+0x7c>
      break;
 800590a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	b21b      	sxth	r3, r3
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	b21a      	sxth	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b21b      	sxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b21b      	sxth	r3, r3
 8005952:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	7b1b      	ldrb	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f040 8149 	bne.w	8005c14 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8084 	beq.w	8005a94 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	00da      	lsls	r2, r3, #3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	88db      	ldrh	r3, [r3, #6]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	81fb      	strh	r3, [r7, #14]
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <USB_ActivateEndpoint+0x180>
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	81bb      	strh	r3, [r7, #12]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	89bb      	ldrh	r3, [r7, #12]
 80059fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d020      	beq.n	8005a5a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2e:	813b      	strh	r3, [r7, #8]
 8005a30:	893b      	ldrh	r3, [r7, #8]
 8005a32:	f083 0320 	eor.w	r3, r3, #32
 8005a36:	813b      	strh	r3, [r7, #8]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	893b      	ldrh	r3, [r7, #8]
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]
 8005a58:	e27f      	b.n	8005f5a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	817b      	strh	r3, [r7, #10]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	897b      	ldrh	r3, [r7, #10]
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
 8005a92:	e262      	b.n	8005f5a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	00da      	lsls	r2, r3, #3
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	88db      	ldrh	r3, [r3, #6]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	4413      	add	r3, r2
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	00da      	lsls	r2, r3, #3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aea:	623b      	str	r3, [r7, #32]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d112      	bne.n	8005b1a <USB_ActivateEndpoint+0x28a>
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e02f      	b.n	8005b7a <USB_ActivateEndpoint+0x2ea>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b20:	d813      	bhi.n	8005b4a <USB_ActivateEndpoint+0x2ba>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <USB_ActivateEndpoint+0x2ac>
 8005b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b38:	3301      	adds	r3, #1
 8005b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e017      	b.n	8005b7a <USB_ActivateEndpoint+0x2ea>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	663b      	str	r3, [r7, #96]	; 0x60
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <USB_ActivateEndpoint+0x2d4>
 8005b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b60:	3b01      	subs	r3, #1
 8005b62:	663b      	str	r3, [r7, #96]	; 0x60
 8005b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	029b      	lsls	r3, r3, #10
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	83fb      	strh	r3, [r7, #30]
 8005b88:	8bfb      	ldrh	r3, [r7, #30]
 8005b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01b      	beq.n	8005bca <USB_ActivateEndpoint+0x33a>
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	83bb      	strh	r3, [r7, #28]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	8bbb      	ldrh	r3, [r7, #28]
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	837b      	strh	r3, [r7, #26]
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005be8:	837b      	strh	r3, [r7, #26]
 8005bea:	8b7b      	ldrh	r3, [r7, #26]
 8005bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf0:	837b      	strh	r3, [r7, #26]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	8b7b      	ldrh	r3, [r7, #26]
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
 8005c12:	e1a2      	b.n	8005f5a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c60:	4413      	add	r3, r2
 8005c62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00da      	lsls	r2, r3, #3
 8005c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	657b      	str	r3, [r7, #84]	; 0x54
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	891b      	ldrh	r3, [r3, #8]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c94:	4413      	add	r3, r2
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	00da      	lsls	r2, r3, #3
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	895b      	ldrh	r3, [r3, #10]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f040 8091 	bne.w	8005de4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01b      	beq.n	8005d12 <USB_ActivateEndpoint+0x482>
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <USB_ActivateEndpoint+0x4d2>
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc0:	867b      	strh	r3, [r7, #50]	; 0x32
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
 8005de2:	e0ba      	b.n	8005f5a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005df4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01d      	beq.n	8005e3c <USB_ActivateEndpoint+0x5ac>
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01d      	beq.n	8005e94 <USB_ActivateEndpoint+0x604>
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	78db      	ldrb	r3, [r3, #3]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d024      	beq.n	8005ee6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eba:	f083 0320 	eor.w	r3, r3, #32
 8005ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
 8005ee4:	e01d      	b.n	8005f22 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	441a      	add	r2, r3
 8005f0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	376c      	adds	r7, #108	; 0x6c
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop

08005f6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b08d      	sub	sp, #52	; 0x34
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	7b1b      	ldrb	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 808e 	bne.w	800609c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d044      	beq.n	8006012 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	81bb      	strh	r3, [r7, #12]
 8005f96:	89bb      	ldrh	r3, [r7, #12]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <USB_DeactivateEndpoint+0x6c>
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	817b      	strh	r3, [r7, #10]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fee:	813b      	strh	r3, [r7, #8]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	893b      	ldrh	r3, [r7, #8]
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
 8006010:	e192      	b.n	8006338 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	827b      	strh	r3, [r7, #18]
 8006020:	8a7b      	ldrh	r3, [r7, #18]
 8006022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01b      	beq.n	8006062 <USB_DeactivateEndpoint+0xf6>
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006040:	823b      	strh	r3, [r7, #16]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	8a3b      	ldrh	r3, [r7, #16]
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	81fb      	strh	r3, [r7, #14]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
 800609a:	e14d      	b.n	8006338 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 80a5 	bne.w	80061f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	843b      	strh	r3, [r7, #32]
 80060b4:	8c3b      	ldrh	r3, [r7, #32]
 80060b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <USB_DeactivateEndpoint+0x18a>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	83fb      	strh	r3, [r7, #30]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	441a      	add	r2, r3
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	83bb      	strh	r3, [r7, #28]
 8006104:	8bbb      	ldrh	r3, [r7, #28]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <USB_DeactivateEndpoint+0x1da>
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	837b      	strh	r3, [r7, #26]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8b7b      	ldrh	r3, [r7, #26]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	833b      	strh	r3, [r7, #24]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	8b3b      	ldrh	r3, [r7, #24]
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	82fb      	strh	r3, [r7, #22]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8afb      	ldrh	r3, [r7, #22]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061cc:	82bb      	strh	r3, [r7, #20]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8abb      	ldrh	r3, [r7, #20]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]
 80061ee:	e0a3      	b.n	8006338 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <USB_DeactivateEndpoint+0x2d4>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800624e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <USB_DeactivateEndpoint+0x324>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	847b      	strh	r3, [r7, #34]	; 0x22
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3734      	adds	r7, #52	; 0x34
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b0c4      	sub	sp, #272	; 0x110
 800634a:	af00      	add	r7, sp, #0
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	6018      	str	r0, [r3, #0]
 8006350:	463b      	mov	r3, r7
 8006352:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 8557 	bne.w	8006e0e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	463b      	mov	r3, r7
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d905      	bls.n	800637c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800637a:	e004      	b.n	8006386 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800637c:	463b      	mov	r3, r7
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	7b1b      	ldrb	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d12c      	bne.n	80063ea <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6959      	ldr	r1, [r3, #20]
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	88da      	ldrh	r2, [r3, #6]
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	1d38      	adds	r0, r7, #4
 80063a4:	6800      	ldr	r0, [r0, #0]
 80063a6:	f001 fa1c 	bl	80077e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063aa:	1d3b      	adds	r3, r7, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	463b      	mov	r3, r7
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	00da      	lsls	r2, r3, #3
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80063d2:	f107 0310 	add.w	r3, r7, #16
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f107 0310 	add.w	r3, r7, #16
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	f000 bcdd 	b.w	8006da4 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f040 8347 	bne.w	8006a84 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	f240 82eb 	bls.w	80069de <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006440:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8159 	beq.w	800672c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d164      	bne.n	8006554 <USB_EPStartXfer+0x20e>
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006498:	b29b      	uxth	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	4413      	add	r3, r2
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	00da      	lsls	r2, r3, #3
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d112      	bne.n	80064e2 <USB_EPStartXfer+0x19c>
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	e054      	b.n	800658c <USB_EPStartXfer+0x246>
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e6:	2b3e      	cmp	r3, #62	; 0x3e
 80064e8:	d817      	bhi.n	800651a <USB_EPStartXfer+0x1d4>
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <USB_EPStartXfer+0x1c4>
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006504:	3301      	adds	r3, #1
 8006506:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	b29b      	uxth	r3, r3
 8006510:	029b      	lsls	r3, r3, #10
 8006512:	b29a      	uxth	r2, r3
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e038      	b.n	800658c <USB_EPStartXfer+0x246>
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <USB_EPStartXfer+0x1f4>
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	3b01      	subs	r3, #1
 8006536:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	b29b      	uxth	r3, r3
 8006540:	029b      	lsls	r3, r3, #10
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e01b      	b.n	800658c <USB_EPStartXfer+0x246>
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d116      	bne.n	800658c <USB_EPStartXfer+0x246>
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	4413      	add	r3, r2
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657a:	4413      	add	r3, r2
 800657c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
 8006582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006586:	b29a      	uxth	r2, r3
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	895b      	ldrh	r3, [r3, #10]
 8006592:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6959      	ldr	r1, [r3, #20]
 800659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065a6:	1d38      	adds	r0, r7, #4
 80065a8:	6800      	ldr	r0, [r0, #0]
 80065aa:	f001 f91a 	bl	80077e2 <USB_WritePMA>
            ep->xfer_buff += len;
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b8:	441a      	add	r2, r3
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d909      	bls.n	80065e4 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065da:	1ad2      	subs	r2, r2, r3
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	621a      	str	r2, [r3, #32]
 80065e2:	e008      	b.n	80065f6 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2200      	movs	r2, #0
 80065f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d164      	bne.n	80066ca <USB_EPStartXfer+0x384>
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	00da      	lsls	r2, r3, #3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d112      	bne.n	8006658 <USB_EPStartXfer+0x312>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663c:	b29a      	uxth	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e057      	b.n	8006708 <USB_EPStartXfer+0x3c2>
 8006658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665c:	2b3e      	cmp	r3, #62	; 0x3e
 800665e:	d817      	bhi.n	8006690 <USB_EPStartXfer+0x34a>
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <USB_EPStartXfer+0x33a>
 8006676:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800667a:	3301      	adds	r3, #1
 800667c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006680:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29a      	uxth	r2, r3
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e03b      	b.n	8006708 <USB_EPStartXfer+0x3c2>
 8006690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <USB_EPStartXfer+0x36a>
 80066a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066aa:	3b01      	subs	r3, #1
 80066ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	029b      	lsls	r3, r3, #10
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e01e      	b.n	8006708 <USB_EPStartXfer+0x3c2>
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d119      	bne.n	8006708 <USB_EPStartXfer+0x3c2>
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	4413      	add	r3, r2
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	00da      	lsls	r2, r3, #3
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006702:	b29a      	uxth	r2, r3
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	891b      	ldrh	r3, [r3, #8]
 800670e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006712:	463b      	mov	r3, r7
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6959      	ldr	r1, [r3, #20]
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800671c:	b29b      	uxth	r3, r3
 800671e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006722:	1d38      	adds	r0, r7, #4
 8006724:	6800      	ldr	r0, [r0, #0]
 8006726:	f001 f85c 	bl	80077e2 <USB_WritePMA>
 800672a:	e33b      	b.n	8006da4 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d164      	bne.n	8006800 <USB_EPStartXfer+0x4ba>
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673c:	1d3b      	adds	r3, r7, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006744:	b29b      	uxth	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	4413      	add	r3, r2
 800674c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	00da      	lsls	r2, r3, #3
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	4413      	add	r3, r2
 800675a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d112      	bne.n	800678e <USB_EPStartXfer+0x448>
 8006768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006772:	b29a      	uxth	r2, r3
 8006774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e057      	b.n	800683e <USB_EPStartXfer+0x4f8>
 800678e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006792:	2b3e      	cmp	r3, #62	; 0x3e
 8006794:	d817      	bhi.n	80067c6 <USB_EPStartXfer+0x480>
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <USB_EPStartXfer+0x470>
 80067ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b0:	3301      	adds	r3, #1
 80067b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	029b      	lsls	r3, r3, #10
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e03b      	b.n	800683e <USB_EPStartXfer+0x4f8>
 80067c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USB_EPStartXfer+0x4a0>
 80067dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e0:	3b01      	subs	r3, #1
 80067e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	e01e      	b.n	800683e <USB_EPStartXfer+0x4f8>
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d119      	bne.n	800683e <USB_EPStartXfer+0x4f8>
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681e:	4413      	add	r3, r2
 8006820:	657b      	str	r3, [r7, #84]	; 0x54
 8006822:	463b      	mov	r3, r7
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	00da      	lsls	r2, r3, #3
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	4413      	add	r3, r2
 800682e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006832:	653b      	str	r3, [r7, #80]	; 0x50
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006838:	b29a      	uxth	r2, r3
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	891b      	ldrh	r3, [r3, #8]
 8006844:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6959      	ldr	r1, [r3, #20]
 800684e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006852:	b29b      	uxth	r3, r3
 8006854:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006858:	1d38      	adds	r0, r7, #4
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	f000 ffc1 	bl	80077e2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686a:	441a      	add	r2, r3
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	429a      	cmp	r2, r3
 8006880:	d909      	bls.n	8006896 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a1a      	ldr	r2, [r3, #32]
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688c:	1ad2      	subs	r2, r2, r3
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	621a      	str	r2, [r3, #32]
 8006894:	e008      	b.n	80068a8 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d164      	bne.n	8006982 <USB_EPStartXfer+0x63c>
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	4413      	add	r3, r2
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	00da      	lsls	r2, r3, #3
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068da:	4413      	add	r3, r2
 80068dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d112      	bne.n	8006910 <USB_EPStartXfer+0x5ca>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006908:	b29a      	uxth	r2, r3
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e054      	b.n	80069ba <USB_EPStartXfer+0x674>
 8006910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006914:	2b3e      	cmp	r3, #62	; 0x3e
 8006916:	d817      	bhi.n	8006948 <USB_EPStartXfer+0x602>
 8006918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <USB_EPStartXfer+0x5f2>
 800692e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006932:	3301      	adds	r3, #1
 8006934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006938:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800693c:	b29b      	uxth	r3, r3
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	b29a      	uxth	r2, r3
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e038      	b.n	80069ba <USB_EPStartXfer+0x674>
 8006948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <USB_EPStartXfer+0x622>
 800695e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006962:	3b01      	subs	r3, #1
 8006964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696c:	b29b      	uxth	r3, r3
 800696e:	029b      	lsls	r3, r3, #10
 8006970:	b29b      	uxth	r3, r3
 8006972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697a:	b29a      	uxth	r2, r3
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e01b      	b.n	80069ba <USB_EPStartXfer+0x674>
 8006982:	463b      	mov	r3, r7
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d116      	bne.n	80069ba <USB_EPStartXfer+0x674>
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699a:	4413      	add	r3, r2
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ae:	643b      	str	r3, [r7, #64]	; 0x40
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	895b      	ldrh	r3, [r3, #10]
 80069c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c4:	463b      	mov	r3, r7
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6959      	ldr	r1, [r3, #20]
 80069ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80069d4:	1d38      	adds	r0, r7, #4
 80069d6:	6800      	ldr	r0, [r0, #0]
 80069d8:	f000 ff03 	bl	80077e2 <USB_WritePMA>
 80069dc:	e1e2      	b.n	8006da4 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069de:	463b      	mov	r3, r7
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	463b      	mov	r3, r7
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a06:	1d3b      	adds	r3, r7, #4
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	663b      	str	r3, [r7, #96]	; 0x60
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	4413      	add	r3, r2
 8006a42:	663b      	str	r3, [r7, #96]	; 0x60
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	00da      	lsls	r2, r3, #3
 8006a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	891b      	ldrh	r3, [r3, #8]
 8006a66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6959      	ldr	r1, [r3, #20]
 8006a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a7a:	1d38      	adds	r0, r7, #4
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f000 feb0 	bl	80077e2 <USB_WritePMA>
 8006a82:	e18f      	b.n	8006da4 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	463b      	mov	r3, r7
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 808f 	beq.w	8006bbe <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d164      	bne.n	8006b7a <USB_EPStartXfer+0x834>
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac4:	4413      	add	r3, r2
 8006ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	00da      	lsls	r2, r3, #3
 8006ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d112      	bne.n	8006b08 <USB_EPStartXfer+0x7c2>
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e054      	b.n	8006bb2 <USB_EPStartXfer+0x86c>
 8006b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0e:	d817      	bhi.n	8006b40 <USB_EPStartXfer+0x7fa>
 8006b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <USB_EPStartXfer+0x7ea>
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e038      	b.n	8006bb2 <USB_EPStartXfer+0x86c>
 8006b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <USB_EPStartXfer+0x81a>
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e01b      	b.n	8006bb2 <USB_EPStartXfer+0x86c>
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d116      	bne.n	8006bb2 <USB_EPStartXfer+0x86c>
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b92:	4413      	add	r3, r2
 8006b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	00da      	lsls	r2, r3, #3
 8006b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	895b      	ldrh	r3, [r3, #10]
 8006bb8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006bbc:	e097      	b.n	8006cee <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	785b      	ldrb	r3, [r3, #1]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d168      	bne.n	8006c9a <USB_EPStartXfer+0x954>
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006be0:	4413      	add	r3, r2
 8006be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be6:	463b      	mov	r3, r7
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	00da      	lsls	r2, r3, #3
 8006bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d112      	bne.n	8006c28 <USB_EPStartXfer+0x8e2>
 8006c02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	e05d      	b.n	8006ce4 <USB_EPStartXfer+0x99e>
 8006c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2e:	d817      	bhi.n	8006c60 <USB_EPStartXfer+0x91a>
 8006c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <USB_EPStartXfer+0x90a>
 8006c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	029b      	lsls	r3, r3, #10
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e041      	b.n	8006ce4 <USB_EPStartXfer+0x99e>
 8006c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <USB_EPStartXfer+0x93a>
 8006c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	029b      	lsls	r3, r3, #10
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e024      	b.n	8006ce4 <USB_EPStartXfer+0x99e>
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d11f      	bne.n	8006ce4 <USB_EPStartXfer+0x99e>
 8006ca4:	1d3b      	adds	r3, r7, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	00da      	lsls	r2, r3, #3
 8006cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	891b      	ldrh	r3, [r3, #8]
 8006cea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6959      	ldr	r1, [r3, #20]
 8006cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006cfe:	1d38      	adds	r0, r7, #4
 8006d00:	6800      	ldr	r0, [r0, #0]
 8006d02:	f000 fd6e 	bl	80077e2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d122      	bne.n	8006d56 <USB_EPStartXfer+0xa10>
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d2e:	1d3b      	adds	r3, r7, #4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	441a      	add	r2, r3
 8006d3c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e026      	b.n	8006da4 <USB_EPStartXfer+0xa5e>
 8006d56:	463b      	mov	r3, r7
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d121      	bne.n	8006da4 <USB_EPStartXfer+0xa5e>
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	463b      	mov	r3, r7
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d7e:	1d3b      	adds	r3, r7, #4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006da4:	1d3b      	adds	r3, r7, #4
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f107 020e 	add.w	r2, r7, #14
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc2:	8013      	strh	r3, [r2, #0]
 8006dc4:	f107 030e 	add.w	r3, r7, #14
 8006dc8:	f107 020e 	add.w	r2, r7, #14
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	f082 0210 	eor.w	r2, r2, #16
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	f107 030e 	add.w	r3, r7, #14
 8006dd8:	f107 020e 	add.w	r2, r7, #14
 8006ddc:	8812      	ldrh	r2, [r2, #0]
 8006dde:	f082 0220 	eor.w	r2, r2, #32
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	463b      	mov	r3, r7
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	441a      	add	r2, r3
 8006df2:	f107 030e 	add.w	r3, r7, #14
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	8013      	strh	r3, [r2, #0]
 8006e0c:	e3b5      	b.n	800757a <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	7b1b      	ldrb	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 8090 	bne.w	8006f3a <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90e      	bls.n	8006e48 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	619a      	str	r2, [r3, #24]
 8006e46:	e008      	b.n	8006e5a <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006e52:	463b      	mov	r3, r7
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e72:	4413      	add	r3, r2
 8006e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <USB_EPStartXfer+0xb7e>
 8006e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e32c      	b.n	800751e <USB_EPStartXfer+0x11d8>
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eca:	d818      	bhi.n	8006efe <USB_EPStartXfer+0xbb8>
 8006ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <USB_EPStartXfer+0xba6>
 8006ee2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e30f      	b.n	800751e <USB_EPStartXfer+0x11d8>
 8006efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <USB_EPStartXfer+0xbd8>
 8006f14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	029b      	lsls	r3, r3, #10
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e2f1      	b.n	800751e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	78db      	ldrb	r3, [r3, #3]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	f040 818f 	bne.w	8007264 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d175      	bne.n	800703c <USB_EPStartXfer+0xcf6>
 8006f50:	1d3b      	adds	r3, r7, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00da      	lsls	r2, r3, #3
 8006f76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d116      	bne.n	8006fbc <USB_EPStartXfer+0xc76>
 8006f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e065      	b.n	8007088 <USB_EPStartXfer+0xd42>
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc4:	d81a      	bhi.n	8006ffc <USB_EPStartXfer+0xcb6>
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <USB_EPStartXfer+0xca4>
 8006fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e045      	b.n	8007088 <USB_EPStartXfer+0xd42>
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <USB_EPStartXfer+0xcda>
 8007016:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800701a:	3b01      	subs	r3, #1
 800701c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007020:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e025      	b.n	8007088 <USB_EPStartXfer+0xd42>
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d120      	bne.n	8007088 <USB_EPStartXfer+0xd42>
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800705e:	4413      	add	r3, r2
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007070:	4413      	add	r3, r2
 8007072:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	b29a      	uxth	r2, r3
 8007082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	1d3b      	adds	r3, r7, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007090:	463b      	mov	r3, r7
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d175      	bne.n	8007186 <USB_EPStartXfer+0xe40>
 800709a:	1d3b      	adds	r3, r7, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070a2:	1d3b      	adds	r3, r7, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b2:	4413      	add	r3, r2
 80070b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	00da      	lsls	r2, r3, #3
 80070c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c4:	4413      	add	r3, r2
 80070c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070ce:	463b      	mov	r3, r7
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d116      	bne.n	8007106 <USB_EPStartXfer+0xdc0>
 80070d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e061      	b.n	80071ca <USB_EPStartXfer+0xe84>
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b3e      	cmp	r3, #62	; 0x3e
 800710e:	d81a      	bhi.n	8007146 <USB_EPStartXfer+0xe00>
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <USB_EPStartXfer+0xdee>
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	3301      	adds	r3, #1
 8007130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	b29b      	uxth	r3, r3
 800713a:	029b      	lsls	r3, r3, #10
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e041      	b.n	80071ca <USB_EPStartXfer+0xe84>
 8007146:	463b      	mov	r3, r7
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <USB_EPStartXfer+0xe24>
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007164:	3b01      	subs	r3, #1
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29b      	uxth	r3, r3
 8007174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e021      	b.n	80071ca <USB_EPStartXfer+0xe84>
 8007186:	463b      	mov	r3, r7
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d11c      	bne.n	80071ca <USB_EPStartXfer+0xe84>
 8007190:	1d3b      	adds	r3, r7, #4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007198:	b29b      	uxth	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a0:	4413      	add	r3, r2
 80071a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071a6:	463b      	mov	r3, r7
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	00da      	lsls	r2, r3, #3
 80071ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b2:	4413      	add	r3, r2
 80071b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071bc:	463b      	mov	r3, r7
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071ca:	463b      	mov	r3, r7
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 81a4 	beq.w	800751e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USB_EPStartXfer+0xebc>
 80071f6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007202:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8187 	bne.w	800751e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007210:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 8180 	bne.w	800751e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	463b      	mov	r3, r7
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
 8007262:	e15c      	b.n	800751e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	78db      	ldrb	r3, [r3, #3]
 800726a:	2b01      	cmp	r3, #1
 800726c:	f040 8155 	bne.w	800751a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	429a      	cmp	r2, r3
 800727e:	d90e      	bls.n	800729e <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	463b      	mov	r3, r7
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	e008      	b.n	80072b0 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80072a8:	463b      	mov	r3, r7
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2200      	movs	r2, #0
 80072ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d16f      	bne.n	800739a <USB_EPStartXfer+0x1054>
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d8:	463b      	mov	r3, r7
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	00da      	lsls	r2, r3, #3
 80072e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d116      	bne.n	8007324 <USB_EPStartXfer+0xfde>
 80072f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007302:	b29a      	uxth	r2, r3
 8007304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	e05f      	b.n	80073e4 <USB_EPStartXfer+0x109e>
 8007324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007328:	2b3e      	cmp	r3, #62	; 0x3e
 800732a:	d818      	bhi.n	800735e <USB_EPStartXfer+0x1018>
 800732c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <USB_EPStartXfer+0x1006>
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007346:	3301      	adds	r3, #1
 8007348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	b29b      	uxth	r3, r3
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	b29a      	uxth	r2, r3
 8007356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	e042      	b.n	80073e4 <USB_EPStartXfer+0x109e>
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007362:	095b      	lsrs	r3, r3, #5
 8007364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <USB_EPStartXfer+0x1038>
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007378:	3b01      	subs	r3, #1
 800737a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007382:	b29b      	uxth	r3, r3
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	b29b      	uxth	r3, r3
 8007388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	e024      	b.n	80073e4 <USB_EPStartXfer+0x109e>
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d11f      	bne.n	80073e4 <USB_EPStartXfer+0x109e>
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073bc:	4413      	add	r3, r2
 80073be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	00da      	lsls	r2, r3, #3
 80073ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	1d3b      	adds	r3, r7, #4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ec:	463b      	mov	r3, r7
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d16f      	bne.n	80074d6 <USB_EPStartXfer+0x1190>
 80073f6:	1d3b      	adds	r3, r7, #4
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800740e:	4413      	add	r3, r2
 8007410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007414:	463b      	mov	r3, r7
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	00da      	lsls	r2, r3, #3
 800741c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007420:	4413      	add	r3, r2
 8007422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800742a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d116      	bne.n	8007460 <USB_EPStartXfer+0x111a>
 8007432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29a      	uxth	r2, r3
 8007458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	e05e      	b.n	800751e <USB_EPStartXfer+0x11d8>
 8007460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007464:	2b3e      	cmp	r3, #62	; 0x3e
 8007466:	d818      	bhi.n	800749a <USB_EPStartXfer+0x1154>
 8007468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <USB_EPStartXfer+0x1142>
 800747e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007482:	3301      	adds	r3, #1
 8007484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748c:	b29b      	uxth	r3, r3
 800748e:	029b      	lsls	r3, r3, #10
 8007490:	b29a      	uxth	r2, r3
 8007492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	e041      	b.n	800751e <USB_EPStartXfer+0x11d8>
 800749a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <USB_EPStartXfer+0x1174>
 80074b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b4:	3b01      	subs	r3, #1
 80074b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e023      	b.n	800751e <USB_EPStartXfer+0x11d8>
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d11e      	bne.n	800751e <USB_EPStartXfer+0x11d8>
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f0:	4413      	add	r3, r2
 80074f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f6:	463b      	mov	r3, r7
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	00da      	lsls	r2, r3, #3
 80074fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007502:	4413      	add	r3, r2
 8007504:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800750c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007510:	b29a      	uxth	r2, r3
 8007512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	e001      	b.n	800751e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e02e      	b.n	800757c <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800751e:	1d3b      	adds	r3, r7, #4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	463b      	mov	r3, r7
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007538:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800753c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007540:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007544:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007548:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800754c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007550:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	463b      	mov	r3, r7
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	441a      	add	r2, r3
 8007562:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007576:	b29b      	uxth	r3, r3
 8007578:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d020      	beq.n	80075da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ae:	81bb      	strh	r3, [r7, #12]
 80075b0:	89bb      	ldrh	r3, [r7, #12]
 80075b2:	f083 0310 	eor.w	r3, r3, #16
 80075b6:	81bb      	strh	r3, [r7, #12]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	441a      	add	r2, r3
 80075c2:	89bb      	ldrh	r3, [r7, #12]
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]
 80075d8:	e01f      	b.n	800761a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	81fb      	strh	r3, [r7, #14]
 80075f2:	89fb      	ldrh	r3, [r7, #14]
 80075f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075f8:	81fb      	strh	r3, [r7, #14]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	441a      	add	r2, r3
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	b29b      	uxth	r3, r3
 8007618:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	7b1b      	ldrb	r3, [r3, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 809d 	bne.w	8007776 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d04c      	beq.n	80076de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	823b      	strh	r3, [r7, #16]
 8007652:	8a3b      	ldrh	r3, [r7, #16]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <USB_EPClearStall+0x6c>
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007672:	81fb      	strh	r3, [r7, #14]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	89fb      	ldrh	r3, [r7, #14]
 8007680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007690:	b29b      	uxth	r3, r3
 8007692:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	78db      	ldrb	r3, [r3, #3]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d06c      	beq.n	8007776 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b2:	81bb      	strh	r3, [r7, #12]
 80076b4:	89bb      	ldrh	r3, [r7, #12]
 80076b6:	f083 0320 	eor.w	r3, r3, #32
 80076ba:	81bb      	strh	r3, [r7, #12]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	89bb      	ldrh	r3, [r7, #12]
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]
 80076dc:	e04b      	b.n	8007776 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	82fb      	strh	r3, [r7, #22]
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01b      	beq.n	800772e <USB_EPClearStall+0x106>
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	82bb      	strh	r3, [r7, #20]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	441a      	add	r2, r3
 8007718:	8abb      	ldrh	r3, [r7, #20]
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	827b      	strh	r3, [r7, #18]
 8007746:	8a7b      	ldrh	r3, [r7, #18]
 8007748:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800774c:	827b      	strh	r3, [r7, #18]
 800774e:	8a7b      	ldrh	r3, [r7, #18]
 8007750:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007754:	827b      	strh	r3, [r7, #18]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	8a7b      	ldrh	r3, [r7, #18]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2280      	movs	r2, #128	; 0x80
 800779a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077d4:	68fb      	ldr	r3, [r7, #12]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b08d      	sub	sp, #52	; 0x34
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	4611      	mov	r1, r2
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	80fb      	strh	r3, [r7, #6]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077f8:	88bb      	ldrh	r3, [r7, #4]
 80077fa:	3301      	adds	r3, #1
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007818:	e01b      	b.n	8007852 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	3301      	adds	r3, #1
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	b29b      	uxth	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	b29a      	uxth	r2, r3
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	3302      	adds	r3, #2
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	3301      	adds	r3, #1
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	3b01      	subs	r3, #1
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e0      	bne.n	800781a <USB_WritePMA+0x38>
  }
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	3734      	adds	r7, #52	; 0x34
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007866:	b480      	push	{r7}
 8007868:	b08b      	sub	sp, #44	; 0x2c
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4611      	mov	r1, r2
 8007872:	461a      	mov	r2, r3
 8007874:	460b      	mov	r3, r1
 8007876:	80fb      	strh	r3, [r7, #6]
 8007878:	4613      	mov	r3, r2
 800787a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800787c:	88bb      	ldrh	r3, [r7, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007896:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
 800789c:	e018      	b.n	80078d0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	3302      	adds	r3, #2
 80078aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	3b01      	subs	r3, #1
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078d6:	88bb      	ldrh	r3, [r7, #4]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	701a      	strb	r2, [r3, #0]
  }
}
 80078f2:	bf00      	nop
 80078f4:	372c      	adds	r7, #44	; 0x2c
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7c1b      	ldrb	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d115      	bne.n	8007942 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791a:	2202      	movs	r2, #2
 800791c:	2181      	movs	r1, #129	; 0x81
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fdb7 	bl	8009492 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	2202      	movs	r2, #2
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fdad 	bl	8009492 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007940:	e012      	b.n	8007968 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	2202      	movs	r2, #2
 8007946:	2181      	movs	r1, #129	; 0x81
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fda2 	bl	8009492 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	2202      	movs	r2, #2
 8007958:	2101      	movs	r1, #1
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fd99 	bl	8009492 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007968:	2308      	movs	r3, #8
 800796a:	2203      	movs	r2, #3
 800796c:	2182      	movs	r1, #130	; 0x82
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fd8f 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800797a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800797e:	f001 feb1 	bl	80096e4 <USBD_static_malloc>
 8007982:	4602      	mov	r2, r0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
 8007998:	e026      	b.n	80079e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ce:	2101      	movs	r1, #1
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 fe50 	bl	8009676 <USBD_LL_PrepareReceive>
 80079d6:	e007      	b.n	80079e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	2101      	movs	r1, #1
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fe47 	bl	8009676 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a02:	2181      	movs	r1, #129	; 0x81
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fd6a 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fd63 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a20:	2182      	movs	r1, #130	; 0x82
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fd5b 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 fe59 	bl	8009700 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d039      	beq.n	8007afe <USBD_CDC_Setup+0x9e>
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d17f      	bne.n	8007b8e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	88db      	ldrh	r3, [r3, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d029      	beq.n	8007aea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b25b      	sxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da11      	bge.n	8007ac4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007aac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	88d2      	ldrh	r2, [r2, #6]
 8007ab2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ab4:	6939      	ldr	r1, [r7, #16]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fa14 	bl	8008eea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ac2:	e06b      	b.n	8007b9c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	785a      	ldrb	r2, [r3, #1]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ada:	6939      	ldr	r1, [r7, #16]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	88db      	ldrh	r3, [r3, #6]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fa2f 	bl	8008f46 <USBD_CtlPrepareRx>
      break;
 8007ae8:	e058      	b.n	8007b9c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	7850      	ldrb	r0, [r2, #1]
 8007af6:	2200      	movs	r2, #0
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4798      	blx	r3
      break;
 8007afc:	e04e      	b.n	8007b9c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b0b      	cmp	r3, #11
 8007b04:	d02e      	beq.n	8007b64 <USBD_CDC_Setup+0x104>
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	dc38      	bgt.n	8007b7c <USBD_CDC_Setup+0x11c>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <USBD_CDC_Setup+0xb4>
 8007b0e:	2b0a      	cmp	r3, #10
 8007b10:	d014      	beq.n	8007b3c <USBD_CDC_Setup+0xdc>
 8007b12:	e033      	b.n	8007b7c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d107      	bne.n	8007b2e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	2202      	movs	r2, #2
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f9df 	bl	8008eea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b2c:	e02e      	b.n	8007b8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f96f 	bl	8008e14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b36:	2302      	movs	r3, #2
 8007b38:	75fb      	strb	r3, [r7, #23]
          break;
 8007b3a:	e027      	b.n	8007b8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d107      	bne.n	8007b56 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b46:	f107 030f 	add.w	r3, r7, #15
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 f9cb 	bl	8008eea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b54:	e01a      	b.n	8007b8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f95b 	bl	8008e14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	75fb      	strb	r3, [r7, #23]
          break;
 8007b62:	e013      	b.n	8007b8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d00d      	beq.n	8007b8a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f94f 	bl	8008e14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b76:	2302      	movs	r3, #2
 8007b78:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b7a:	e006      	b.n	8007b8a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f948 	bl	8008e14 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b84:	2302      	movs	r3, #2
 8007b86:	75fb      	strb	r3, [r7, #23]
          break;
 8007b88:	e000      	b.n	8007b8c <USBD_CDC_Setup+0x12c>
          break;
 8007b8a:	bf00      	nop
      }
      break;
 8007b8c:	e006      	b.n	8007b9c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f93f 	bl	8008e14 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b96:	2302      	movs	r3, #2
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	bf00      	nop
  }

  return ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d03a      	beq.n	8007c42 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	331c      	adds	r3, #28
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d029      	beq.n	8007c36 <USBD_CDC_DataIn+0x90>
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	331c      	adds	r3, #28
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	78f9      	ldrb	r1, [r7, #3]
 8007bf6:	68b8      	ldr	r0, [r7, #8]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4403      	add	r3, r0
 8007c02:	3338      	adds	r3, #56	; 0x38
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c0a:	fb03 f301 	mul.w	r3, r3, r1
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d110      	bne.n	8007c36 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007c14:	78fa      	ldrb	r2, [r7, #3]
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	331c      	adds	r3, #28
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c28:	78f9      	ldrb	r1, [r7, #3]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fcfe 	bl	8009630 <USBD_LL_Transmit>
 8007c34:	e003      	b.n	8007c3e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e000      	b.n	8007c44 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c42:	2302      	movs	r3, #2
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fd29 	bl	80096bc <USBD_LL_GetRxDataSize>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c90:	4611      	mov	r1, r2
 8007c92:	4798      	blx	r3

    return USBD_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e000      	b.n	8007c9a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c98:	2302      	movs	r3, #2
  }
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <USBD_CDC_EP0_RxReady+0x46>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cc2:	2bff      	cmp	r3, #255	; 0xff
 8007cc4:	d010      	beq.n	8007ce8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007cd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	22ff      	movs	r2, #255	; 0xff
 8007ce4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2243      	movs	r2, #67	; 0x43
 8007d00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007d02:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	200000a8 	.word	0x200000a8

08007d14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2243      	movs	r2, #67	; 0x43
 8007d20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d22:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000064 	.word	0x20000064

08007d34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2243      	movs	r2, #67	; 0x43
 8007d40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d42:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	200000ec 	.word	0x200000ec

08007d54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220a      	movs	r2, #10
 8007d60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d62:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	20000020 	.word	0x20000020

08007d74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01c      	beq.n	8007e52 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d115      	bne.n	8007e4e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2181      	movs	r1, #129	; 0x81
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fbf3 	bl	8009630 <USBD_LL_Transmit>

      return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e002      	b.n	8007e54 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e52:	2302      	movs	r3, #2
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7c1b      	ldrb	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fbf3 	bl	8009676 <USBD_LL_PrepareReceive>
 8007e90:	e007      	b.n	8007ea2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e98:	2340      	movs	r3, #64	; 0x40
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fbea 	bl	8009676 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e01a      	b.n	8007efe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	79fa      	ldrb	r2, [r7, #7]
 8007ef4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f001 fa56 	bl	80093a8 <USBD_LL_Init>

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d006      	beq.n	8007f28 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	e001      	b.n	8007f2c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fa8a 	bl	800945c <USBD_LL_Start>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00c      	beq.n	8007f9c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	78fa      	ldrb	r2, [r7, #3]
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3

  return USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fedb 	bl	8008d9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2b02      	cmp	r3, #2
 8008006:	d016      	beq.n	8008036 <USBD_LL_SetupStage+0x6a>
 8008008:	2b02      	cmp	r3, #2
 800800a:	d81c      	bhi.n	8008046 <USBD_LL_SetupStage+0x7a>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <USBD_LL_SetupStage+0x4a>
 8008010:	2b01      	cmp	r3, #1
 8008012:	d008      	beq.n	8008026 <USBD_LL_SetupStage+0x5a>
 8008014:	e017      	b.n	8008046 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9ce 	bl	80083c0 <USBD_StdDevReq>
      break;
 8008024:	e01a      	b.n	800805c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa30 	bl	8008494 <USBD_StdItfReq>
      break;
 8008034:	e012      	b.n	800805c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa70 	bl	8008524 <USBD_StdEPReq>
      break;
 8008044:	e00a      	b.n	800805c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800804c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008050:	b2db      	uxtb	r3, r3
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 fa61 	bl	800951c <USBD_LL_StallEP>
      break;
 800805a:	bf00      	nop
  }

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	460b      	mov	r3, r1
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008074:	7afb      	ldrb	r3, [r7, #11]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d14b      	bne.n	8008112 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008080:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008088:	2b03      	cmp	r3, #3
 800808a:	d134      	bne.n	80080f6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d919      	bls.n	80080cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d203      	bcs.n	80080ba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	e002      	b.n	80080c0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080be:	b29b      	uxth	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 ff5c 	bl	8008f82 <USBD_CtlContinueRx>
 80080ca:	e038      	b.n	800813e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d105      	bne.n	80080ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 ff59 	bl	8008fa6 <USBD_CtlSendStatus>
 80080f4:	e023      	b.n	800813e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d11e      	bne.n	800813e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 fa06 	bl	800951c <USBD_LL_StallEP>
 8008110:	e015      	b.n	800813e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008124:	2b03      	cmp	r3, #3
 8008126:	d108      	bne.n	800813a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	7afa      	ldrb	r2, [r7, #11]
 8008132:	4611      	mov	r1, r2
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	4798      	blx	r3
 8008138:	e001      	b.n	800813e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800813a:	2302      	movs	r3, #2
 800813c:	e000      	b.n	8008140 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	460b      	mov	r3, r1
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d17f      	bne.n	800825c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3314      	adds	r3, #20
 8008160:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008168:	2b02      	cmp	r3, #2
 800816a:	d15c      	bne.n	8008226 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	429a      	cmp	r2, r3
 8008176:	d915      	bls.n	80081a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fec6 	bl	8008f22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008196:	2300      	movs	r3, #0
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fa6a 	bl	8009676 <USBD_LL_PrepareReceive>
 80081a2:	e04e      	b.n	8008242 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	6912      	ldr	r2, [r2, #16]
 80081ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80081b0:	fb02 f201 	mul.w	r2, r2, r1
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d11c      	bne.n	80081f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d316      	bcc.n	80081f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d20f      	bcs.n	80081f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 fea2 	bl	8008f22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e6:	2300      	movs	r3, #0
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f001 fa42 	bl	8009676 <USBD_LL_PrepareReceive>
 80081f2:	e026      	b.n	8008242 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008206:	2b03      	cmp	r3, #3
 8008208:	d105      	bne.n	8008216 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 f97f 	bl	800951c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fed4 	bl	8008fcc <USBD_CtlReceiveStatus>
 8008224:	e00d      	b.n	8008242 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800822c:	2b04      	cmp	r3, #4
 800822e:	d004      	beq.n	800823a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800823a:	2180      	movs	r1, #128	; 0x80
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 f96d 	bl	800951c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008248:	2b01      	cmp	r3, #1
 800824a:	d11d      	bne.n	8008288 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff fe80 	bl	8007f52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800825a:	e015      	b.n	8008288 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800826e:	2b03      	cmp	r3, #3
 8008270:	d108      	bne.n	8008284 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	7afa      	ldrb	r2, [r7, #11]
 800827c:	4611      	mov	r1, r2
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	4798      	blx	r3
 8008282:	e001      	b.n	8008288 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008284:	2302      	movs	r3, #2
 8008286:	e000      	b.n	800828a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800829a:	2340      	movs	r3, #64	; 0x40
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f8f6 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2240      	movs	r2, #64	; 0x40
 80082b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	2200      	movs	r2, #0
 80082ba:	2180      	movs	r1, #128	; 0x80
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f8e8 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2240      	movs	r2, #64	; 0x40
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6852      	ldr	r2, [r2, #4]
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	4611      	mov	r1, r2
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
  }

  return USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2204      	movs	r2, #4
 800834c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	2b04      	cmp	r3, #4
 800836e:	d105      	bne.n	800837c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	2b03      	cmp	r3, #3
 800839a:	d10b      	bne.n	80083b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d005      	beq.n	80083e6 <USBD_StdDevReq+0x26>
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d84f      	bhi.n	800847e <USBD_StdDevReq+0xbe>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <USBD_StdDevReq+0x36>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d14b      	bne.n	800847e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
      break;
 80083f4:	e048      	b.n	8008488 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d839      	bhi.n	8008472 <USBD_StdDevReq+0xb2>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <USBD_StdDevReq+0x44>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008455 	.word	0x08008455
 8008408:	08008469 	.word	0x08008469
 800840c:	08008473 	.word	0x08008473
 8008410:	0800845f 	.word	0x0800845f
 8008414:	08008473 	.word	0x08008473
 8008418:	08008437 	.word	0x08008437
 800841c:	0800842d 	.word	0x0800842d
 8008420:	08008473 	.word	0x08008473
 8008424:	0800844b 	.word	0x0800844b
 8008428:	08008441 	.word	0x08008441
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f9dc 	bl	80087ec <USBD_GetDescriptor>
          break;
 8008434:	e022      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb3f 	bl	8008abc <USBD_SetAddress>
          break;
 800843e:	e01d      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fb7e 	bl	8008b44 <USBD_SetConfig>
          break;
 8008448:	e018      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc07 	bl	8008c60 <USBD_GetConfig>
          break;
 8008452:	e013      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fc37 	bl	8008cca <USBD_GetStatus>
          break;
 800845c:	e00e      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc65 	bl	8008d30 <USBD_SetFeature>
          break;
 8008466:	e009      	b.n	800847c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc74 	bl	8008d58 <USBD_ClrFeature>
          break;
 8008470:	e004      	b.n	800847c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fccd 	bl	8008e14 <USBD_CtlError>
          break;
 800847a:	bf00      	nop
      }
      break;
 800847c:	e004      	b.n	8008488 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fcc7 	bl	8008e14 <USBD_CtlError>
      break;
 8008486:	bf00      	nop
  }

  return ret;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop

08008494 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d005      	beq.n	80084ba <USBD_StdItfReq+0x26>
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	d82e      	bhi.n	8008510 <USBD_StdItfReq+0x7c>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <USBD_StdItfReq+0x26>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d12a      	bne.n	8008510 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	3b01      	subs	r3, #1
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d81d      	bhi.n	8008502 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	889b      	ldrh	r3, [r3, #4]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d813      	bhi.n	80084f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d110      	bne.n	800850c <USBD_StdItfReq+0x78>
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fd58 	bl	8008fa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f6:	e009      	b.n	800850c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fc8a 	bl	8008e14 <USBD_CtlError>
          break;
 8008500:	e004      	b.n	800850c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc85 	bl	8008e14 <USBD_CtlError>
          break;
 800850a:	e000      	b.n	800850e <USBD_StdItfReq+0x7a>
          break;
 800850c:	bf00      	nop
      }
      break;
 800850e:	e004      	b.n	800851a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc7e 	bl	8008e14 <USBD_CtlError>
      break;
 8008518:	bf00      	nop
  }

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d007      	beq.n	8008554 <USBD_StdEPReq+0x30>
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	f200 8146 	bhi.w	80087d6 <USBD_StdEPReq+0x2b2>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <USBD_StdEPReq+0x40>
 800854e:	2b20      	cmp	r3, #32
 8008550:	f040 8141 	bne.w	80087d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
      break;
 8008562:	e13d      	b.n	80087e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800856c:	2b20      	cmp	r3, #32
 800856e:	d10a      	bne.n	8008586 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	e12d      	b.n	80087e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	2b03      	cmp	r3, #3
 800858c:	d007      	beq.n	800859e <USBD_StdEPReq+0x7a>
 800858e:	2b03      	cmp	r3, #3
 8008590:	f300 811b 	bgt.w	80087ca <USBD_StdEPReq+0x2a6>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d072      	beq.n	800867e <USBD_StdEPReq+0x15a>
 8008598:	2b01      	cmp	r3, #1
 800859a:	d03a      	beq.n	8008612 <USBD_StdEPReq+0xee>
 800859c:	e115      	b.n	80087ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d002      	beq.n	80085ae <USBD_StdEPReq+0x8a>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d015      	beq.n	80085d8 <USBD_StdEPReq+0xb4>
 80085ac:	e02b      	b.n	8008606 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <USBD_StdEPReq+0xaa>
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d009      	beq.n	80085ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 ffac 	bl	800951c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085c4:	2180      	movs	r1, #128	; 0x80
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 ffa8 	bl	800951c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085cc:	e020      	b.n	8008610 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc1f 	bl	8008e14 <USBD_CtlError>
              break;
 80085d6:	e01b      	b.n	8008610 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10e      	bne.n	80085fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <USBD_StdEPReq+0xda>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d008      	beq.n	80085fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 ff8f 	bl	800951c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fcd1 	bl	8008fa6 <USBD_CtlSendStatus>

              break;
 8008604:	e004      	b.n	8008610 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc03 	bl	8008e14 <USBD_CtlError>
              break;
 800860e:	bf00      	nop
          }
          break;
 8008610:	e0e0      	b.n	80087d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008618:	2b02      	cmp	r3, #2
 800861a:	d002      	beq.n	8008622 <USBD_StdEPReq+0xfe>
 800861c:	2b03      	cmp	r3, #3
 800861e:	d015      	beq.n	800864c <USBD_StdEPReq+0x128>
 8008620:	e026      	b.n	8008670 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <USBD_StdEPReq+0x11e>
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b80      	cmp	r3, #128	; 0x80
 800862c:	d009      	beq.n	8008642 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 ff72 	bl	800951c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008638:	2180      	movs	r1, #128	; 0x80
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 ff6e 	bl	800951c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008640:	e01c      	b.n	800867c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fbe5 	bl	8008e14 <USBD_CtlError>
              break;
 800864a:	e017      	b.n	800867c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	885b      	ldrh	r3, [r3, #2]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d112      	bne.n	800867a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 ff79 	bl	800955a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc9c 	bl	8008fa6 <USBD_CtlSendStatus>
              }
              break;
 800866e:	e004      	b.n	800867a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fbce 	bl	8008e14 <USBD_CtlError>
              break;
 8008678:	e000      	b.n	800867c <USBD_StdEPReq+0x158>
              break;
 800867a:	bf00      	nop
          }
          break;
 800867c:	e0aa      	b.n	80087d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	2b02      	cmp	r3, #2
 8008686:	d002      	beq.n	800868e <USBD_StdEPReq+0x16a>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d032      	beq.n	80086f2 <USBD_StdEPReq+0x1ce>
 800868c:	e097      	b.n	80087be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <USBD_StdEPReq+0x180>
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d004      	beq.n	80086a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fbb9 	bl	8008e14 <USBD_CtlError>
                break;
 80086a2:	e091      	b.n	80087c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da0b      	bge.n	80086c4 <USBD_StdEPReq+0x1a0>
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	3310      	adds	r3, #16
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	e00b      	b.n	80086dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2202      	movs	r2, #2
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fbfd 	bl	8008eea <USBD_CtlSendData>
              break;
 80086f0:	e06a      	b.n	80087c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da11      	bge.n	800871e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3318      	adds	r3, #24
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d117      	bne.n	8008744 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fb7c 	bl	8008e14 <USBD_CtlError>
                  break;
 800871c:	e054      	b.n	80087c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 020f 	and.w	r2, r3, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb69 	bl	8008e14 <USBD_CtlError>
                  break;
 8008742:	e041      	b.n	80087c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0b      	bge.n	8008764 <USBD_StdEPReq+0x240>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3310      	adds	r3, #16
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	e00b      	b.n	800877c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <USBD_StdEPReq+0x266>
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d103      	bne.n	8008792 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e00e      	b.n	80087b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fefe 	bl	8009598 <USBD_LL_IsStallEP>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb97 	bl	8008eea <USBD_CtlSendData>
              break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fb27 	bl	8008e14 <USBD_CtlError>
              break;
 80087c6:	bf00      	nop
          }
          break;
 80087c8:	e004      	b.n	80087d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb21 	bl	8008e14 <USBD_CtlError>
          break;
 80087d2:	bf00      	nop
      }
      break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb1b 	bl	8008e14 <USBD_CtlError>
      break;
 80087de:	bf00      	nop
  }

  return ret;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	b29b      	uxth	r3, r3
 800880a:	3b01      	subs	r3, #1
 800880c:	2b06      	cmp	r3, #6
 800880e:	f200 8128 	bhi.w	8008a62 <USBD_GetDescriptor+0x276>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <USBD_GetDescriptor+0x2c>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008835 	.word	0x08008835
 800881c:	0800884d 	.word	0x0800884d
 8008820:	0800888d 	.word	0x0800888d
 8008824:	08008a63 	.word	0x08008a63
 8008828:	08008a63 	.word	0x08008a63
 800882c:	08008a03 	.word	0x08008a03
 8008830:	08008a2f 	.word	0x08008a2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
      break;
 800884a:	e112      	b.n	8008a72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7c1b      	ldrb	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f107 0208 	add.w	r2, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800886e:	e100      	b.n	8008a72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	f107 0208 	add.w	r2, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	2202      	movs	r2, #2
 8008888:	701a      	strb	r2, [r3, #0]
      break;
 800888a:	e0f2      	b.n	8008a72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b05      	cmp	r3, #5
 8008894:	f200 80ac 	bhi.w	80089f0 <USBD_GetDescriptor+0x204>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <USBD_GetDescriptor+0xb4>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088ed 	.word	0x080088ed
 80088a8:	08008921 	.word	0x08008921
 80088ac:	08008955 	.word	0x08008955
 80088b0:	08008989 	.word	0x08008989
 80088b4:	080089bd 	.word	0x080089bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e091      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa98 	bl	8008e14 <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e089      	b.n	8008a00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e077      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa7e 	bl	8008e14 <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e06f      	b.n	8008a00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e05d      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa64 	bl	8008e14 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e055      	b.n	8008a00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e043      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa4a 	bl	8008e14 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e03b      	b.n	8008a00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00b      	beq.n	80089ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7c12      	ldrb	r2, [r2, #16]
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089aa:	e029      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa30 	bl	8008e14 <USBD_CtlError>
            err++;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	3301      	adds	r3, #1
 80089b8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ba:	e021      	b.n	8008a00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089de:	e00f      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa16 	bl	8008e14 <USBD_CtlError>
            err++;
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	3301      	adds	r3, #1
 80089ec:	72fb      	strb	r3, [r7, #11]
          break;
 80089ee:	e007      	b.n	8008a00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa0e 	bl	8008e14 <USBD_CtlError>
          err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089fe:	e038      	b.n	8008a72 <USBD_GetDescriptor+0x286>
 8008a00:	e037      	b.n	8008a72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7c1b      	ldrb	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4610      	mov	r0, r2
 8008a18:	4798      	blx	r3
 8008a1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a1c:	e029      	b.n	8008a72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9f7 	bl	8008e14 <USBD_CtlError>
        err++;
 8008a26:	7afb      	ldrb	r3, [r7, #11]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a2c:	e021      	b.n	8008a72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7c1b      	ldrb	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10d      	bne.n	8008a52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f107 0208 	add.w	r2, r7, #8
 8008a42:	4610      	mov	r0, r2
 8008a44:	4798      	blx	r3
 8008a46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a50:	e00f      	b.n	8008a72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9dd 	bl	8008e14 <USBD_CtlError>
        err++;
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a60:	e007      	b.n	8008a72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9d5 	bl	8008e14 <USBD_CtlError>
      err++;
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a70:	bf00      	nop
  }

  if (err != 0U)
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d11c      	bne.n	8008ab2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d011      	beq.n	8008aa2 <USBD_GetDescriptor+0x2b6>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88db      	ldrh	r3, [r3, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00d      	beq.n	8008aa2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88da      	ldrh	r2, [r3, #6]
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bf28      	it	cs
 8008a90:	4613      	movcs	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a96:	893b      	ldrh	r3, [r7, #8]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa24 	bl	8008eea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d104      	bne.n	8008ab4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa7b 	bl	8008fa6 <USBD_CtlSendStatus>
 8008ab0:	e000      	b.n	8008ab4 <USBD_GetDescriptor+0x2c8>
    return;
 8008ab2:	bf00      	nop
    }
  }
}
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop

08008abc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	889b      	ldrh	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d130      	bne.n	8008b30 <USBD_SetAddress+0x74>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88db      	ldrh	r3, [r3, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d12c      	bne.n	8008b30 <USBD_SetAddress+0x74>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	2b7f      	cmp	r3, #127	; 0x7f
 8008adc:	d828      	bhi.n	8008b30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d104      	bne.n	8008afe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f98c 	bl	8008e14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afc:	e01d      	b.n	8008b3a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7bfa      	ldrb	r2, [r7, #15]
 8008b02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fd71 	bl	80095f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa48 	bl	8008fa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	e009      	b.n	8008b3a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2e:	e004      	b.n	8008b3a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f96e 	bl	8008e14 <USBD_CtlError>
  }
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	4b41      	ldr	r3, [pc, #260]	; (8008c5c <USBD_SetConfig+0x118>)
 8008b56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b58:	4b40      	ldr	r3, [pc, #256]	; (8008c5c <USBD_SetConfig+0x118>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d904      	bls.n	8008b6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f956 	bl	8008e14 <USBD_CtlError>
 8008b68:	e075      	b.n	8008c56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d002      	beq.n	8008b7a <USBD_SetConfig+0x36>
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d023      	beq.n	8008bc0 <USBD_SetConfig+0x7c>
 8008b78:	e062      	b.n	8008c40 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b7a:	4b38      	ldr	r3, [pc, #224]	; (8008c5c <USBD_SetConfig+0x118>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01a      	beq.n	8008bb8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b82:	4b36      	ldr	r3, [pc, #216]	; (8008c5c <USBD_SetConfig+0x118>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b94:	4b31      	ldr	r3, [pc, #196]	; (8008c5c <USBD_SetConfig+0x118>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff f9e4 	bl	8007f68 <USBD_SetClassConfig>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d104      	bne.n	8008bb0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f933 	bl	8008e14 <USBD_CtlError>
            return;
 8008bae:	e052      	b.n	8008c56 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9f8 	bl	8008fa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bb6:	e04e      	b.n	8008c56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f9f4 	bl	8008fa6 <USBD_CtlSendStatus>
        break;
 8008bbe:	e04a      	b.n	8008c56 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008bc0:	4b26      	ldr	r3, [pc, #152]	; (8008c5c <USBD_SetConfig+0x118>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d112      	bne.n	8008bee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008bd0:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <USBD_SetConfig+0x118>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008bda:	4b20      	ldr	r3, [pc, #128]	; (8008c5c <USBD_SetConfig+0x118>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff f9e0 	bl	8007fa6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9dd 	bl	8008fa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bec:	e033      	b.n	8008c56 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008bee:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <USBD_SetConfig+0x118>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d01d      	beq.n	8008c38 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff f9ce 	bl	8007fa6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c0a:	4b14      	ldr	r3, [pc, #80]	; (8008c5c <USBD_SetConfig+0x118>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c14:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <USBD_SetConfig+0x118>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff f9a4 	bl	8007f68 <USBD_SetClassConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d104      	bne.n	8008c30 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8f3 	bl	8008e14 <USBD_CtlError>
            return;
 8008c2e:	e012      	b.n	8008c56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f9b8 	bl	8008fa6 <USBD_CtlSendStatus>
        break;
 8008c36:	e00e      	b.n	8008c56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9b4 	bl	8008fa6 <USBD_CtlSendStatus>
        break;
 8008c3e:	e00a      	b.n	8008c56 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f8e6 	bl	8008e14 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <USBD_SetConfig+0x118>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff f9a9 	bl	8007fa6 <USBD_ClrClassConfig>
        break;
 8008c54:	bf00      	nop
    }
  }
}
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000234 	.word	0x20000234

08008c60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	88db      	ldrh	r3, [r3, #6]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d004      	beq.n	8008c7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8cd 	bl	8008e14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c7a:	e022      	b.n	8008cc2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	dc02      	bgt.n	8008c8c <USBD_GetConfig+0x2c>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dc03      	bgt.n	8008c92 <USBD_GetConfig+0x32>
 8008c8a:	e015      	b.n	8008cb8 <USBD_GetConfig+0x58>
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetConfig+0x48>
 8008c90:	e012      	b.n	8008cb8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f922 	bl	8008eea <USBD_CtlSendData>
        break;
 8008ca6:	e00c      	b.n	8008cc2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	2201      	movs	r2, #1
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f91a 	bl	8008eea <USBD_CtlSendData>
        break;
 8008cb6:	e004      	b.n	8008cc2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f8aa 	bl	8008e14 <USBD_CtlError>
        break;
 8008cc0:	bf00      	nop
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d81e      	bhi.n	8008d1e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	88db      	ldrh	r3, [r3, #6]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d004      	beq.n	8008cf2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f892 	bl	8008e14 <USBD_CtlError>
        break;
 8008cf0:	e01a      	b.n	8008d28 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f043 0202 	orr.w	r2, r3, #2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	330c      	adds	r3, #12
 8008d12:	2202      	movs	r2, #2
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8e7 	bl	8008eea <USBD_CtlSendData>
      break;
 8008d1c:	e004      	b.n	8008d28 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f877 	bl	8008e14 <USBD_CtlError>
      break;
 8008d26:	bf00      	nop
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	885b      	ldrh	r3, [r3, #2]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d106      	bne.n	8008d50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f92b 	bl	8008fa6 <USBD_CtlSendStatus>
  }
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d80b      	bhi.n	8008d86 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d10c      	bne.n	8008d90 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f911 	bl	8008fa6 <USBD_CtlSendStatus>
      }
      break;
 8008d84:	e004      	b.n	8008d90 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f843 	bl	8008e14 <USBD_CtlError>
      break;
 8008d8e:	e000      	b.n	8008d92 <USBD_ClrFeature+0x3a>
      break;
 8008d90:	bf00      	nop
  }
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	785a      	ldrb	r2, [r3, #1]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	3302      	adds	r3, #2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	3303      	adds	r3, #3
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4413      	add	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	3305      	adds	r3, #5
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	4413      	add	r3, r2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	3306      	adds	r3, #6
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	3307      	adds	r3, #7
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	80da      	strh	r2, [r3, #6]

}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fb7b 	bl	800951c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e26:	2100      	movs	r1, #0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb77 	bl	800951c <USBD_LL_StallEP>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d032      	beq.n	8008eb2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f834 	bl	8008eba <USBD_GetLen>
 8008e52:	4603      	mov	r3, r0
 8008e54:	3301      	adds	r3, #1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	75fa      	strb	r2, [r7, #23]
 8008e66:	461a      	mov	r2, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	75fa      	strb	r2, [r7, #23]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	2203      	movs	r2, #3
 8008e80:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e82:	e012      	b.n	8008eaa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	60fa      	str	r2, [r7, #12]
 8008e8a:	7dfa      	ldrb	r2, [r7, #23]
 8008e8c:	1c51      	adds	r1, r2, #1
 8008e8e:	75f9      	strb	r1, [r7, #23]
 8008e90:	4611      	mov	r1, r2
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	440a      	add	r2, r1
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	75fa      	strb	r2, [r7, #23]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e8      	bne.n	8008e84 <USBD_GetString+0x4e>
    }
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ec6:	e005      	b.n	8008ed4 <USBD_GetLen+0x1a>
  {
    len++;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f5      	bne.n	8008ec8 <USBD_GetLen+0xe>
  }

  return len;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f0c:	88fb      	ldrh	r3, [r7, #6]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	2100      	movs	r1, #0
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fb8c 	bl	8009630 <USBD_LL_Transmit>

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	2100      	movs	r1, #0
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fb7a 	bl	8009630 <USBD_LL_Transmit>

  return USBD_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f5c:	88fa      	ldrh	r2, [r7, #6]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	2100      	movs	r1, #0
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fb7f 	bl	8009676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fb6d 	bl	8009676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2100      	movs	r1, #0
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fb37 	bl	8009630 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fb47 	bl	8009676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2212      	movs	r2, #18
 8009004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	; (8009014 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	2000014c 	.word	0x2000014c

08009018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2204      	movs	r2, #4
 8009028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000160 	.word	0x20000160

0800903c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4907      	ldr	r1, [pc, #28]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
 8009052:	4808      	ldr	r0, [pc, #32]	; (8009074 <USBD_FS_ProductStrDescriptor+0x38>)
 8009054:	f7ff feef 	bl	8008e36 <USBD_GetString>
 8009058:	e004      	b.n	8009064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4904      	ldr	r1, [pc, #16]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
 800905e:	4805      	ldr	r0, [pc, #20]	; (8009074 <USBD_FS_ProductStrDescriptor+0x38>)
 8009060:	f7ff fee9 	bl	8008e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	2000177c 	.word	0x2000177c
 8009074:	0800993c 	.word	0x0800993c

08009078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	4904      	ldr	r1, [pc, #16]	; (8009098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009088:	4804      	ldr	r0, [pc, #16]	; (800909c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800908a:	f7ff fed4 	bl	8008e36 <USBD_GetString>
  return USBD_StrDesc;
 800908e:	4b02      	ldr	r3, [pc, #8]	; (8009098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	2000177c 	.word	0x2000177c
 800909c:	08009954 	.word	0x08009954

080090a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	221a      	movs	r2, #26
 80090b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090b2:	f000 f843 	bl	800913c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090b6:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000164 	.word	0x20000164

080090c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d105      	bne.n	80090e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4907      	ldr	r1, [pc, #28]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090da:	4808      	ldr	r0, [pc, #32]	; (80090fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090dc:	f7ff feab 	bl	8008e36 <USBD_GetString>
 80090e0:	e004      	b.n	80090ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4904      	ldr	r1, [pc, #16]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090e8:	f7ff fea5 	bl	8008e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	2000177c 	.word	0x2000177c
 80090fc:	08009968 	.word	0x08009968

08009100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4907      	ldr	r1, [pc, #28]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009116:	4808      	ldr	r0, [pc, #32]	; (8009138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009118:	f7ff fe8d 	bl	8008e36 <USBD_GetString>
 800911c:	e004      	b.n	8009128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	4904      	ldr	r1, [pc, #16]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009122:	4805      	ldr	r0, [pc, #20]	; (8009138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009124:	f7ff fe87 	bl	8008e36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009128:	4b02      	ldr	r3, [pc, #8]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000177c 	.word	0x2000177c
 8009138:	08009974 	.word	0x08009974

0800913c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <Get_SerialNum+0x44>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009148:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <Get_SerialNum+0x48>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800914e:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <Get_SerialNum+0x4c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009162:	2208      	movs	r2, #8
 8009164:	4909      	ldr	r1, [pc, #36]	; (800918c <Get_SerialNum+0x50>)
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 f814 	bl	8009194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800916c:	2204      	movs	r2, #4
 800916e:	4908      	ldr	r1, [pc, #32]	; (8009190 <Get_SerialNum+0x54>)
 8009170:	68b8      	ldr	r0, [r7, #8]
 8009172:	f000 f80f 	bl	8009194 <IntToUnicode>
  }
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	1ffff7ac 	.word	0x1ffff7ac
 8009184:	1ffff7b0 	.word	0x1ffff7b0
 8009188:	1ffff7b4 	.word	0x1ffff7b4
 800918c:	20000166 	.word	0x20000166
 8009190:	20000176 	.word	0x20000176

08009194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
 80091aa:	e027      	b.n	80091fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	0f1b      	lsrs	r3, r3, #28
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d80b      	bhi.n	80091cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	0f1b      	lsrs	r3, r3, #28
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	4619      	mov	r1, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	440b      	add	r3, r1
 80091c4:	3230      	adds	r2, #48	; 0x30
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e00a      	b.n	80091e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4619      	mov	r1, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	440b      	add	r3, r1
 80091dc:	3237      	adds	r2, #55	; 0x37
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	3301      	adds	r3, #1
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	3301      	adds	r3, #1
 80091fa:	75fb      	strb	r3, [r7, #23]
 80091fc:	7dfa      	ldrb	r2, [r7, #23]
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	429a      	cmp	r2, r3
 8009202:	d3d3      	bcc.n	80091ac <IntToUnicode+0x18>
  }
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
	...

08009214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a10      	ldr	r2, [pc, #64]	; (8009264 <HAL_PCD_MspInit+0x50>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d119      	bne.n	800925a <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <HAL_PCD_MspInit+0x54>)
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	4a0f      	ldr	r2, [pc, #60]	; (8009268 <HAL_PCD_MspInit+0x54>)
 800922c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009230:	61d3      	str	r3, [r2, #28]
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <HAL_PCD_MspInit+0x54>)
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800923e:	4b0b      	ldr	r3, [pc, #44]	; (800926c <HAL_PCD_MspInit+0x58>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a0a      	ldr	r2, [pc, #40]	; (800926c <HAL_PCD_MspInit+0x58>)
 8009244:	f043 0320 	orr.w	r3, r3, #32
 8009248:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800924a:	2200      	movs	r2, #0
 800924c:	2100      	movs	r1, #0
 800924e:	204b      	movs	r0, #75	; 0x4b
 8009250:	f7f9 faa1 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009254:	204b      	movs	r0, #75	; 0x4b
 8009256:	f7f9 faba 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40005c00 	.word	0x40005c00
 8009268:	40021000 	.word	0x40021000
 800926c:	40010000 	.word	0x40010000

08009270 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7fe fea0 	bl	8007fcc <USBD_LL_SetupStage>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	440b      	add	r3, r1
 80092b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	4619      	mov	r1, r3
 80092be:	f7fe fed2 	bl	8008066 <USBD_LL_DataOutStage>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	440b      	add	r3, r1
 80092ea:	333c      	adds	r3, #60	; 0x3c
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fe ff29 	bl	8008148 <USBD_LL_DataInStage>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff f83c 	bl	800838a <USBD_LL_SOF>
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d001      	beq.n	8009332 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800932e:	f7f7 fc79 	bl	8000c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009338:	7bfa      	ldrb	r2, [r7, #15]
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe ffe9 	bl	8008314 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe ffa2 	bl	8008292 <USBD_LL_Reset>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe ffe4 	bl	8008334 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009374:	4b04      	ldr	r3, [pc, #16]	; (8009388 <HAL_PCD_SuspendCallback+0x30>)
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	4a03      	ldr	r2, [pc, #12]	; (8009388 <HAL_PCD_SuspendCallback+0x30>)
 800937a:	f043 0306 	orr.w	r3, r3, #6
 800937e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	e000ed00 	.word	0xe000ed00

0800938c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe ffdf 	bl	800835e <USBD_LL_Resume>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093b0:	4a28      	ldr	r2, [pc, #160]	; (8009454 <USBD_LL_Init+0xac>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a26      	ldr	r2, [pc, #152]	; (8009454 <USBD_LL_Init+0xac>)
 80093bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <USBD_LL_Init+0xac>)
 80093c2:	4a25      	ldr	r2, [pc, #148]	; (8009458 <USBD_LL_Init+0xb0>)
 80093c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093c6:	4b23      	ldr	r3, [pc, #140]	; (8009454 <USBD_LL_Init+0xac>)
 80093c8:	2208      	movs	r2, #8
 80093ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093cc:	4b21      	ldr	r3, [pc, #132]	; (8009454 <USBD_LL_Init+0xac>)
 80093ce:	2202      	movs	r2, #2
 80093d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093d2:	4b20      	ldr	r3, [pc, #128]	; (8009454 <USBD_LL_Init+0xac>)
 80093d4:	2202      	movs	r2, #2
 80093d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093d8:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <USBD_LL_Init+0xac>)
 80093da:	2200      	movs	r2, #0
 80093dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <USBD_LL_Init+0xac>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093e4:	481b      	ldr	r0, [pc, #108]	; (8009454 <USBD_LL_Init+0xac>)
 80093e6:	f7f9 fc6b 	bl	8002cc0 <HAL_PCD_Init>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80093f0:	f7f7 fc18 	bl	8000c24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093fa:	2318      	movs	r3, #24
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	f7fa feff 	bl	8004202 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800940a:	2358      	movs	r3, #88	; 0x58
 800940c:	2200      	movs	r2, #0
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	f7fa fef7 	bl	8004202 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800941a:	23c0      	movs	r3, #192	; 0xc0
 800941c:	2200      	movs	r2, #0
 800941e:	2181      	movs	r1, #129	; 0x81
 8009420:	f7fa feef 	bl	8004202 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800942a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800942e:	2200      	movs	r2, #0
 8009430:	2101      	movs	r1, #1
 8009432:	f7fa fee6 	bl	8004202 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800943c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009440:	2200      	movs	r2, #0
 8009442:	2182      	movs	r1, #130	; 0x82
 8009444:	f7fa fedd 	bl	8004202 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	2000197c 	.word	0x2000197c
 8009458:	40005c00 	.word	0x40005c00

0800945c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009472:	4618      	mov	r0, r3
 8009474:	f7f9 fd02 	bl	8002e7c <HAL_PCD_Start>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f954 	bl	800972c <USBD_Get_USB_Status>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009488:	7bbb      	ldrb	r3, [r7, #14]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	4608      	mov	r0, r1
 800949c:	4611      	mov	r1, r2
 800949e:	461a      	mov	r2, r3
 80094a0:	4603      	mov	r3, r0
 80094a2:	70fb      	strb	r3, [r7, #3]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70bb      	strb	r3, [r7, #2]
 80094a8:	4613      	mov	r3, r2
 80094aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094ba:	78bb      	ldrb	r3, [r7, #2]
 80094bc:	883a      	ldrh	r2, [r7, #0]
 80094be:	78f9      	ldrb	r1, [r7, #3]
 80094c0:	f7f9 fe1e 	bl	8003100 <HAL_PCD_EP_Open>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f92e 	bl	800972c <USBD_Get_USB_Status>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f9 fe65 	bl	80031cc <HAL_PCD_EP_Close>
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	4618      	mov	r0, r3
 800950a:	f000 f90f 	bl	800972c <USBD_Get_USB_Status>
 800950e:	4603      	mov	r3, r0
 8009510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009512:	7bbb      	ldrb	r3, [r7, #14]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	4611      	mov	r1, r2
 800953a:	4618      	mov	r0, r3
 800953c:	f7f9 ff26 	bl	800338c <HAL_PCD_EP_SetStall>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f8f0 	bl	800972c <USBD_Get_USB_Status>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009550:	7bbb      	ldrb	r3, [r7, #14]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7f9 ff59 	bl	8003430 <HAL_PCD_EP_ClrStall>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f8d1 	bl	800972c <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da0c      	bge.n	80095ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	3302      	adds	r3, #2
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	e00b      	b.n	80095e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	440b      	add	r3, r1
 80095e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f7f9 fd50 	bl	80030b6 <HAL_PCD_SetAddress>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f885 	bl	800972c <USBD_Get_USB_Status>
 8009622:	4603      	mov	r3, r0
 8009624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009626:	7bbb      	ldrb	r3, [r7, #14]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	461a      	mov	r2, r3
 800963c:	460b      	mov	r3, r1
 800963e:	72fb      	strb	r3, [r7, #11]
 8009640:	4613      	mov	r3, r2
 8009642:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	7af9      	ldrb	r1, [r7, #11]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	f7f9 fe55 	bl	8003306 <HAL_PCD_EP_Transmit>
 800965c:	4603      	mov	r3, r0
 800965e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f862 	bl	800972c <USBD_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800966c:	7dbb      	ldrb	r3, [r7, #22]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b086      	sub	sp, #24
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	461a      	mov	r2, r3
 8009682:	460b      	mov	r3, r1
 8009684:	72fb      	strb	r3, [r7, #11]
 8009686:	4613      	mov	r3, r2
 8009688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009698:	893b      	ldrh	r3, [r7, #8]
 800969a:	7af9      	ldrb	r1, [r7, #11]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	f7f9 fddd 	bl	800325c <HAL_PCD_EP_Receive>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 f83f 	bl	800972c <USBD_Get_USB_Status>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f9 fdff 	bl	80032d6 <HAL_PCD_EP_GetRxCount>
 80096d8:	4603      	mov	r3, r0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <USBD_static_malloc+0x18>)
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20000238 	.word	0x20000238

08009700 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	2b03      	cmp	r3, #3
 800973e:	d817      	bhi.n	8009770 <USBD_Get_USB_Status+0x44>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <USBD_Get_USB_Status+0x1c>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	08009759 	.word	0x08009759
 800974c:	0800975f 	.word	0x0800975f
 8009750:	08009765 	.word	0x08009765
 8009754:	0800976b 	.word	0x0800976b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
    break;
 800975c:	e00b      	b.n	8009776 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800975e:	2302      	movs	r3, #2
 8009760:	73fb      	strb	r3, [r7, #15]
    break;
 8009762:	e008      	b.n	8009776 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	e005      	b.n	8009776 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800976a:	2302      	movs	r3, #2
 800976c:	73fb      	strb	r3, [r7, #15]
    break;
 800976e:	e002      	b.n	8009776 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009770:	2302      	movs	r3, #2
 8009772:	73fb      	strb	r3, [r7, #15]
    break;
 8009774:	bf00      	nop
  }
  return usb_status;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <calloc>:
 8009784:	4b02      	ldr	r3, [pc, #8]	; (8009790 <calloc+0xc>)
 8009786:	460a      	mov	r2, r1
 8009788:	4601      	mov	r1, r0
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	f000 b842 	b.w	8009814 <_calloc_r>
 8009790:	20000180 	.word	0x20000180

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000180 	.word	0x20000180

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4d0d      	ldr	r5, [pc, #52]	; (80097d8 <__libc_init_array+0x38>)
 80097a4:	4c0d      	ldr	r4, [pc, #52]	; (80097dc <__libc_init_array+0x3c>)
 80097a6:	1b64      	subs	r4, r4, r5
 80097a8:	10a4      	asrs	r4, r4, #2
 80097aa:	2600      	movs	r6, #0
 80097ac:	42a6      	cmp	r6, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	4d0b      	ldr	r5, [pc, #44]	; (80097e0 <__libc_init_array+0x40>)
 80097b2:	4c0c      	ldr	r4, [pc, #48]	; (80097e4 <__libc_init_array+0x44>)
 80097b4:	f000 f8b6 	bl	8009924 <_init>
 80097b8:	1b64      	subs	r4, r4, r5
 80097ba:	10a4      	asrs	r4, r4, #2
 80097bc:	2600      	movs	r6, #0
 80097be:	42a6      	cmp	r6, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c8:	4798      	blx	r3
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d2:	4798      	blx	r3
 80097d4:	3601      	adds	r6, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	080099b4 	.word	0x080099b4
 80097dc:	080099b4 	.word	0x080099b4
 80097e0:	080099b4 	.word	0x080099b4
 80097e4:	080099b8 	.word	0x080099b8

080097e8 <memcpy>:
 80097e8:	440a      	add	r2, r1
 80097ea:	4291      	cmp	r1, r2
 80097ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f0:	d100      	bne.n	80097f4 <memcpy+0xc>
 80097f2:	4770      	bx	lr
 80097f4:	b510      	push	{r4, lr}
 80097f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097fe:	4291      	cmp	r1, r2
 8009800:	d1f9      	bne.n	80097f6 <memcpy+0xe>
 8009802:	bd10      	pop	{r4, pc}

08009804 <memset>:
 8009804:	4402      	add	r2, r0
 8009806:	4603      	mov	r3, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	d100      	bne.n	800980e <memset+0xa>
 800980c:	4770      	bx	lr
 800980e:	f803 1b01 	strb.w	r1, [r3], #1
 8009812:	e7f9      	b.n	8009808 <memset+0x4>

08009814 <_calloc_r>:
 8009814:	b513      	push	{r0, r1, r4, lr}
 8009816:	434a      	muls	r2, r1
 8009818:	4611      	mov	r1, r2
 800981a:	9201      	str	r2, [sp, #4]
 800981c:	f000 f80a 	bl	8009834 <_malloc_r>
 8009820:	4604      	mov	r4, r0
 8009822:	b118      	cbz	r0, 800982c <_calloc_r+0x18>
 8009824:	9a01      	ldr	r2, [sp, #4]
 8009826:	2100      	movs	r1, #0
 8009828:	f7ff ffec 	bl	8009804 <memset>
 800982c:	4620      	mov	r0, r4
 800982e:	b002      	add	sp, #8
 8009830:	bd10      	pop	{r4, pc}
	...

08009834 <_malloc_r>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	1ccd      	adds	r5, r1, #3
 8009838:	f025 0503 	bic.w	r5, r5, #3
 800983c:	3508      	adds	r5, #8
 800983e:	2d0c      	cmp	r5, #12
 8009840:	bf38      	it	cc
 8009842:	250c      	movcc	r5, #12
 8009844:	2d00      	cmp	r5, #0
 8009846:	4606      	mov	r6, r0
 8009848:	db01      	blt.n	800984e <_malloc_r+0x1a>
 800984a:	42a9      	cmp	r1, r5
 800984c:	d903      	bls.n	8009856 <_malloc_r+0x22>
 800984e:	230c      	movs	r3, #12
 8009850:	6033      	str	r3, [r6, #0]
 8009852:	2000      	movs	r0, #0
 8009854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009856:	f000 f857 	bl	8009908 <__malloc_lock>
 800985a:	4921      	ldr	r1, [pc, #132]	; (80098e0 <_malloc_r+0xac>)
 800985c:	680a      	ldr	r2, [r1, #0]
 800985e:	4614      	mov	r4, r2
 8009860:	b99c      	cbnz	r4, 800988a <_malloc_r+0x56>
 8009862:	4f20      	ldr	r7, [pc, #128]	; (80098e4 <_malloc_r+0xb0>)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	b923      	cbnz	r3, 8009872 <_malloc_r+0x3e>
 8009868:	4621      	mov	r1, r4
 800986a:	4630      	mov	r0, r6
 800986c:	f000 f83c 	bl	80098e8 <_sbrk_r>
 8009870:	6038      	str	r0, [r7, #0]
 8009872:	4629      	mov	r1, r5
 8009874:	4630      	mov	r0, r6
 8009876:	f000 f837 	bl	80098e8 <_sbrk_r>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d123      	bne.n	80098c6 <_malloc_r+0x92>
 800987e:	230c      	movs	r3, #12
 8009880:	6033      	str	r3, [r6, #0]
 8009882:	4630      	mov	r0, r6
 8009884:	f000 f846 	bl	8009914 <__malloc_unlock>
 8009888:	e7e3      	b.n	8009852 <_malloc_r+0x1e>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	1b5b      	subs	r3, r3, r5
 800988e:	d417      	bmi.n	80098c0 <_malloc_r+0x8c>
 8009890:	2b0b      	cmp	r3, #11
 8009892:	d903      	bls.n	800989c <_malloc_r+0x68>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	441c      	add	r4, r3
 8009898:	6025      	str	r5, [r4, #0]
 800989a:	e004      	b.n	80098a6 <_malloc_r+0x72>
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	42a2      	cmp	r2, r4
 80098a0:	bf0c      	ite	eq
 80098a2:	600b      	streq	r3, [r1, #0]
 80098a4:	6053      	strne	r3, [r2, #4]
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f834 	bl	8009914 <__malloc_unlock>
 80098ac:	f104 000b 	add.w	r0, r4, #11
 80098b0:	1d23      	adds	r3, r4, #4
 80098b2:	f020 0007 	bic.w	r0, r0, #7
 80098b6:	1ac2      	subs	r2, r0, r3
 80098b8:	d0cc      	beq.n	8009854 <_malloc_r+0x20>
 80098ba:	1a1b      	subs	r3, r3, r0
 80098bc:	50a3      	str	r3, [r4, r2]
 80098be:	e7c9      	b.n	8009854 <_malloc_r+0x20>
 80098c0:	4622      	mov	r2, r4
 80098c2:	6864      	ldr	r4, [r4, #4]
 80098c4:	e7cc      	b.n	8009860 <_malloc_r+0x2c>
 80098c6:	1cc4      	adds	r4, r0, #3
 80098c8:	f024 0403 	bic.w	r4, r4, #3
 80098cc:	42a0      	cmp	r0, r4
 80098ce:	d0e3      	beq.n	8009898 <_malloc_r+0x64>
 80098d0:	1a21      	subs	r1, r4, r0
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f808 	bl	80098e8 <_sbrk_r>
 80098d8:	3001      	adds	r0, #1
 80098da:	d1dd      	bne.n	8009898 <_malloc_r+0x64>
 80098dc:	e7cf      	b.n	800987e <_malloc_r+0x4a>
 80098de:	bf00      	nop
 80098e0:	20000458 	.word	0x20000458
 80098e4:	2000045c 	.word	0x2000045c

080098e8 <_sbrk_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d06      	ldr	r5, [pc, #24]	; (8009904 <_sbrk_r+0x1c>)
 80098ec:	2300      	movs	r3, #0
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	f7f7 feba 	bl	800166c <_sbrk>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_sbrk_r+0x1a>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_sbrk_r+0x1a>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	20001c68 	.word	0x20001c68

08009908 <__malloc_lock>:
 8009908:	4801      	ldr	r0, [pc, #4]	; (8009910 <__malloc_lock+0x8>)
 800990a:	f000 b809 	b.w	8009920 <__retarget_lock_acquire_recursive>
 800990e:	bf00      	nop
 8009910:	20001c70 	.word	0x20001c70

08009914 <__malloc_unlock>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__malloc_unlock+0x8>)
 8009916:	f000 b804 	b.w	8009922 <__retarget_lock_release_recursive>
 800991a:	bf00      	nop
 800991c:	20001c70 	.word	0x20001c70

08009920 <__retarget_lock_acquire_recursive>:
 8009920:	4770      	bx	lr

08009922 <__retarget_lock_release_recursive>:
 8009922:	4770      	bx	lr

08009924 <_init>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	bf00      	nop
 8009928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992a:	bc08      	pop	{r3}
 800992c:	469e      	mov	lr, r3
 800992e:	4770      	bx	lr

08009930 <_fini>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr
