
USB2CAN_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d378  0800d378  0001d378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d440  0800d440  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800d440  0800d440  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d440  0800d440  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800d448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000348c  20000184  0800d5cc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003610  0800d5cc  00023610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f382  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004821  00000000  00000000  0003f536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00045618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000065a4  00000000  00000000  00046ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddf0  00000000  00000000  0004d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2da0  00000000  00000000  0006b074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011de14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  0011de64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000184 	.word	0x20000184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d360 	.word	0x0800d360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000188 	.word	0x20000188
 80001cc:	0800d360 	.word	0x0800d360

080001d0 <LedInit>:
 *      Author: coryg
 */

#include "led.h"

void LedInit(Led_t* stLed, GPIO_TypeDef *pPort, uint16_t nPin){
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	4613      	mov	r3, r2
 80001dc:	80fb      	strh	r3, [r7, #6]
  stLed->pPort = pPort;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	68ba      	ldr	r2, [r7, #8]
 80001e2:	601a      	str	r2, [r3, #0]
  stLed->nPin = nPin;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	88fa      	ldrh	r2, [r7, #6]
 80001e8:	809a      	strh	r2, [r3, #4]
}
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr

080001f6 <LedUpdate>:

void LedUpdate(Led_t* stLed){
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b084      	sub	sp, #16
 80001fa:	af00      	add	r7, sp, #0
 80001fc:	6078      	str	r0, [r7, #4]
  uint32_t nNow = HAL_GetTick();
 80001fe:	f001 f98f 	bl	8001520 <HAL_GetTick>
 8000202:	60f8      	str	r0, [r7, #12]

  if(nNow < stLed->nOnUntil){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	68fa      	ldr	r2, [r7, #12]
 800020a:	429a      	cmp	r2, r3
 800020c:	d20a      	bcs.n	8000224 <LedUpdate+0x2e>
    stLed->pPort->ODR |= stLed->nPin;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	695a      	ldr	r2, [r3, #20]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	889b      	ldrh	r3, [r3, #4]
 8000218:	4619      	mov	r1, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	430a      	orrs	r2, r1
 8000220:	615a      	str	r2, [r3, #20]
  } else{
    stLed->pPort->ODR &= ~stLed->nPin;
  }
}
 8000222:	e00a      	b.n	800023a <LedUpdate+0x44>
    stLed->pPort->ODR &= ~stLed->nPin;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	889b      	ldrh	r3, [r3, #4]
 800022e:	43db      	mvns	r3, r3
 8000230:	4619      	mov	r1, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	400a      	ands	r2, r1
 8000238:	615a      	str	r2, [r3, #20]
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <LedBlink>:

void LedBlink(Led_t* stLed, uint16_t nOnTime){
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]
  stLed->nOnUntil = HAL_GetTick() + nOnTime;
 800024e:	f001 f967 	bl	8001520 <HAL_GetTick>
 8000252:	4602      	mov	r2, r0
 8000254:	887b      	ldrh	r3, [r7, #2]
 8000256:	441a      	add	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <USBD_CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUSBD, USBD_TxBuffer, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	4905      	ldr	r1, [pc, #20]	; (8000280 <USBD_CDC_Init+0x1c>)
 800026c:	4805      	ldr	r0, [pc, #20]	; (8000284 <USBD_CDC_Init+0x20>)
 800026e:	f008 fc40 	bl	8008af2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBD, USBD_RxBuffer);
 8000272:	4905      	ldr	r1, [pc, #20]	; (8000288 <USBD_CDC_Init+0x24>)
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <USBD_CDC_Init+0x20>)
 8000276:	f008 fc56 	bl	8008b26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000a84 	.word	0x20000a84
 8000284:	20001284 	.word	0x20001284
 8000288:	20000284 	.word	0x20000284

0800028c <USBD_CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_DeInit(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <USBD_CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Control(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	6039      	str	r1, [r7, #0]
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	80bb      	strh	r3, [r7, #4]
  switch(cmd)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b23      	cmp	r3, #35	; 0x23
 80002b0:	d866      	bhi.n	8000380 <USBD_CDC_Control+0xe4>
 80002b2:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <USBD_CDC_Control+0x1c>)
 80002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b8:	08000381 	.word	0x08000381
 80002bc:	08000381 	.word	0x08000381
 80002c0:	08000381 	.word	0x08000381
 80002c4:	08000381 	.word	0x08000381
 80002c8:	08000381 	.word	0x08000381
 80002cc:	08000381 	.word	0x08000381
 80002d0:	08000381 	.word	0x08000381
 80002d4:	08000381 	.word	0x08000381
 80002d8:	08000381 	.word	0x08000381
 80002dc:	08000381 	.word	0x08000381
 80002e0:	08000381 	.word	0x08000381
 80002e4:	08000381 	.word	0x08000381
 80002e8:	08000381 	.word	0x08000381
 80002ec:	08000381 	.word	0x08000381
 80002f0:	08000381 	.word	0x08000381
 80002f4:	08000381 	.word	0x08000381
 80002f8:	08000381 	.word	0x08000381
 80002fc:	08000381 	.word	0x08000381
 8000300:	08000381 	.word	0x08000381
 8000304:	08000381 	.word	0x08000381
 8000308:	08000381 	.word	0x08000381
 800030c:	08000381 	.word	0x08000381
 8000310:	08000381 	.word	0x08000381
 8000314:	08000381 	.word	0x08000381
 8000318:	08000381 	.word	0x08000381
 800031c:	08000381 	.word	0x08000381
 8000320:	08000381 	.word	0x08000381
 8000324:	08000381 	.word	0x08000381
 8000328:	08000381 	.word	0x08000381
 800032c:	08000381 	.word	0x08000381
 8000330:	08000381 	.word	0x08000381
 8000334:	08000381 	.word	0x08000381
 8000338:	08000381 	.word	0x08000381
 800033c:	08000349 	.word	0x08000349
 8000340:	08000381 	.word	0x08000381
 8000344:	08000381 	.word	0x08000381
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(115200);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(115200 >> 8);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	22c2      	movs	r2, #194	; 0xc2
 8000354:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(115200 >> 16);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	3302      	adds	r3, #2
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(115200 >> 24);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3303      	adds	r3, #3
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0; //Stop bits (1)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	3304      	adds	r3, #4
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0; //Parity (none)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3305      	adds	r3, #5
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8; //Number of bits (8)
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3306      	adds	r3, #6
 800037a:	2208      	movs	r2, #8
 800037c:	701a      	strb	r2, [r3, #0]
    break;
 800037e:	e000      	b.n	8000382 <USBD_CDC_Control+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000380:	bf00      	nop
  }

  return (USBD_OK);
 8000382:	2300      	movs	r3, #0
}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <USBD_CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USBD_CDC_Receive(uint8_t* Buf, uint32_t *Len)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  SLCAN_Rx(Buf, Len, &stUSBD_RX_Frame);
 800039a:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <USBD_CDC_Receive+0x3c>)
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 fc26 	bl	8000bf0 <SLCAN_Rx>
  osMessageQueuePut(qMsgQueueUsbRx, &stUSBD_RX_Frame, 0U, 0U);
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <USBD_CDC_Receive+0x40>)
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	2300      	movs	r3, #0
 80003aa:	2200      	movs	r2, #0
 80003ac:	4907      	ldr	r1, [pc, #28]	; (80003cc <USBD_CDC_Receive+0x3c>)
 80003ae:	f009 fe61 	bl	800a074 <osMessageQueuePut>

  USBD_CDC_SetRxBuffer(&hUSBD, &Buf[0]);
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	4807      	ldr	r0, [pc, #28]	; (80003d4 <USBD_CDC_Receive+0x44>)
 80003b6:	f008 fbb6 	bl	8008b26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUSBD);
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <USBD_CDC_Receive+0x44>)
 80003bc:	f008 fbf6 	bl	8008bac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200001fc 	.word	0x200001fc
 80003d0:	2000027c 	.word	0x2000027c
 80003d4:	20001284 	.word	0x20001284

080003d8 <USBD_CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t USBD_CDC_Transmit(uint8_t* Buf, uint16_t Len)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUSBD.pClassData;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <USBD_CDC_Transmit+0x48>)
 80003ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80003ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <USBD_CDC_Transmit+0x26>
    return USBD_BUSY;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e00b      	b.n	8000416 <USBD_CDC_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUSBD, Buf, Len);
 80003fe:	887b      	ldrh	r3, [r7, #2]
 8000400:	461a      	mov	r2, r3
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	4806      	ldr	r0, [pc, #24]	; (8000420 <USBD_CDC_Transmit+0x48>)
 8000406:	f008 fb74 	bl	8008af2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUSBD);
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <USBD_CDC_Transmit+0x48>)
 800040c:	f008 fb9f 	bl	8008b4e <USBD_CDC_TransmitPacket>
 8000410:	4603      	mov	r3, r0
 8000412:	73fb      	strb	r3, [r7, #15]
  return result;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20001284 	.word	0x20001284

08000424 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &stCanRxHeader, nCanRxData) != HAL_OK)
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000430:	2100      	movs	r1, #0
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f001 fbd0 	bl	8001bd8 <HAL_CAN_GetRxMessage>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800043e:	f000 fbd2 	bl	8000be6 <Error_Handler>
  }

  //Add message to CAN RX queue
  memcpy(&stCAN_RX_Frame.stRxHeader, &stCanRxHeader, sizeof(stCAN_RX_Frame.stRxHeader));
 8000442:	221c      	movs	r2, #28
 8000444:	490e      	ldr	r1, [pc, #56]	; (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000446:	480f      	ldr	r0, [pc, #60]	; (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000448:	f00c ff74 	bl	800d334 <memcpy>
  memcpy(&stCAN_RX_Frame.nData, nCanRxData, sizeof(stCAN_RX_Frame.nData));
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800044e:	490b      	ldr	r1, [pc, #44]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000450:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8000454:	460b      	mov	r3, r1
 8000456:	cb03      	ldmia	r3!, {r0, r1}
 8000458:	6010      	str	r0, [r2, #0]
 800045a:	6051      	str	r1, [r2, #4]
  osMessageQueuePut(qMsgQueueCanRx, &stCAN_RX_Frame, 0U, 0U);
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800045e:	6818      	ldr	r0, [r3, #0]
 8000460:	2300      	movs	r3, #0
 8000462:	2200      	movs	r2, #0
 8000464:	4908      	ldr	r1, [pc, #32]	; (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000466:	f009 fe05 	bl	800a074 <osMessageQueuePut>

  LedBlink(&stLedRx, 20);
 800046a:	2114      	movs	r1, #20
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800046e:	f7ff fee8 	bl	8000242 <LedBlink>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200001e4 	.word	0x200001e4
 8000480:	200001c8 	.word	0x200001c8
 8000484:	20000255 	.word	0x20000255
 8000488:	2000023c 	.word	0x2000023c
 800048c:	20000280 	.word	0x20000280
 8000490:	20001558 	.word	0x20001558

08000494 <CAN_Enable>:

void CAN_Enable()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  if(eCanBusState == OFF_BUS){
 800049a:	4b54      	ldr	r3, [pc, #336]	; (80005ec <CAN_Enable+0x158>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f040 809f 	bne.w	80005e2 <CAN_Enable+0x14e>
    uint32_t nPrescaler = 4; //Default 500k
 80004a4:	2304      	movs	r3, #4
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t nTimeSeq1 = CAN_BS1_15TQ;
 80004a8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (eCanBitRate)
 80004ae:	4b50      	ldr	r3, [pc, #320]	; (80005f0 <CAN_Enable+0x15c>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b09      	cmp	r3, #9
 80004b4:	d834      	bhi.n	8000520 <CAN_Enable+0x8c>
 80004b6:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <CAN_Enable+0x28>)
 80004b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004bc:	080004e5 	.word	0x080004e5
 80004c0:	080004eb 	.word	0x080004eb
 80004c4:	080004f1 	.word	0x080004f1
 80004c8:	080004f7 	.word	0x080004f7
 80004cc:	080004fd 	.word	0x080004fd
 80004d0:	08000503 	.word	0x08000503
 80004d4:	08000509 	.word	0x08000509
 80004d8:	0800050f 	.word	0x0800050f
 80004dc:	0800051b 	.word	0x0800051b
 80004e0:	08000521 	.word	0x08000521
    {
      case CAN_BITRATE_10K:
        nPrescaler = 200;
 80004e4:	23c8      	movs	r3, #200	; 0xc8
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80004e8:	e01a      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_20K:
        nPrescaler = 100;
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80004ee:	e017      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_50K:
        nPrescaler = 40;
 80004f0:	2328      	movs	r3, #40	; 0x28
 80004f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80004f4:	e014      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_100K:
        nPrescaler = 20;
 80004f6:	2314      	movs	r3, #20
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80004fa:	e011      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_125K:
        nPrescaler = 16;
 80004fc:	2310      	movs	r3, #16
 80004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000500:	e00e      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_250K:
        nPrescaler = 8;
 8000502:	2308      	movs	r3, #8
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000506:	e00b      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_500K:
        nPrescaler = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800050c:	e008      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_750K:
        nPrescaler = 8;
 800050e:	2308      	movs	r3, #8
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
        nTimeSeq1 = CAN_BS1_13TQ;
 8000512:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8000518:	e002      	b.n	8000520 <CAN_Enable+0x8c>
      case CAN_BITRATE_1000K:
        nPrescaler = 2;
 800051a:	2302      	movs	r3, #2
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800051e:	bf00      	nop
        //Do nothing - use default vals
        assert_param(0);
        break;
    }

    hcan.Instance = CAN;
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <CAN_Enable+0x160>)
 8000522:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <CAN_Enable+0x164>)
 8000524:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = nPrescaler;
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <CAN_Enable+0x160>)
 8000528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052a:	6053      	str	r3, [r2, #4]
    hcan.Init.Mode = nCanMode;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <CAN_Enable+0x168>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <CAN_Enable+0x160>)
 8000532:	6093      	str	r3, [r2, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <CAN_Enable+0x160>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = nTimeSeq1;
 800053a:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <CAN_Enable+0x160>)
 800053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800053e:	6113      	str	r3, [r2, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <CAN_Enable+0x160>)
 8000542:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000546:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <CAN_Enable+0x160>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <CAN_Enable+0x160>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <CAN_Enable+0x160>)
 8000556:	2200      	movs	r2, #0
 8000558:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = eAutoRetry;
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <CAN_Enable+0x16c>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <CAN_Enable+0x160>)
 8000560:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <CAN_Enable+0x160>)
 8000564:	2200      	movs	r2, #0
 8000566:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <CAN_Enable+0x160>)
 800056a:	2200      	movs	r2, #0
 800056c:	775a      	strb	r2, [r3, #29]

    if (HAL_CAN_Init(&hcan) != HAL_OK)
 800056e:	4821      	ldr	r0, [pc, #132]	; (80005f4 <CAN_Enable+0x160>)
 8000570:	f000 ffe2 	bl	8001538 <HAL_CAN_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <CAN_Enable+0xea>
      Error_Handler();
 800057a:	f000 fb34 	bl	8000be6 <Error_Handler>
    //---------------------------------------------------------------
    //Set CAN RX filter
    //---------------------------------------------------------------
    CAN_FilterTypeDef  sFilterConfig;

    sFilterConfig.FilterBank = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000586:	2301      	movs	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800059e:	2301      	movs	r3, #1
 80005a0:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005a2:	230e      	movs	r3, #14
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <CAN_Enable+0x160>)
 80005ac:	f001 f8e2 	bl	8001774 <HAL_CAN_ConfigFilter>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <CAN_Enable+0x126>
      Error_Handler();
 80005b6:	f000 fb16 	bl	8000be6 <Error_Handler>

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <CAN_Enable+0x160>)
 80005bc:	f001 f9a4 	bl	8001908 <HAL_CAN_Start>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <CAN_Enable+0x136>
      Error_Handler();
 80005c6:	f000 fb0e 	bl	8000be6 <Error_Handler>

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005ca:	2102      	movs	r1, #2
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <CAN_Enable+0x160>)
 80005ce:	f001 fc15 	bl	8001dfc <HAL_CAN_ActivateNotification>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <CAN_Enable+0x148>
      Error_Handler();
 80005d8:	f000 fb05 	bl	8000be6 <Error_Handler>

    eCanBusState = ON_BUS;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <CAN_Enable+0x158>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
  }
}
 80005e2:	bf00      	nop
 80005e4:	3730      	adds	r7, #48	; 0x30
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200001f0 	.word	0x200001f0
 80005f0:	20000000 	.word	0x20000000
 80005f4:	200001a0 	.word	0x200001a0
 80005f8:	40006400 	.word	0x40006400
 80005fc:	200001f4 	.word	0x200001f4
 8000600:	200001f8 	.word	0x200001f8

08000604 <CAN_Disable>:

void CAN_Disable()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  if(eCanBusState == ON_BUS){
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <CAN_Disable+0x48>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d11b      	bne.n	8000648 <CAN_Disable+0x44>
    if (HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000610:	2102      	movs	r1, #2
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <CAN_Disable+0x4c>)
 8000614:	f001 fc18 	bl	8001e48 <HAL_CAN_DeactivateNotification>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <CAN_Disable+0x1e>
      Error_Handler();
 800061e:	f000 fae2 	bl	8000be6 <Error_Handler>

    if (HAL_CAN_Stop(&hcan) != HAL_OK)
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <CAN_Disable+0x4c>)
 8000624:	f001 f9b4 	bl	8001990 <HAL_CAN_Stop>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <CAN_Disable+0x2e>
      Error_Handler();
 800062e:	f000 fada 	bl	8000be6 <Error_Handler>

    if (HAL_CAN_DeInit(&hcan) != HAL_OK)
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <CAN_Disable+0x4c>)
 8000634:	f001 f87b 	bl	800172e <HAL_CAN_DeInit>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <CAN_Disable+0x3e>
      Error_Handler();
 800063e:	f000 fad2 	bl	8000be6 <Error_Handler>

    eCanBusState = OFF_BUS;
 8000642:	4b02      	ldr	r3, [pc, #8]	; (800064c <CAN_Disable+0x48>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
  }
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001f0 	.word	0x200001f0
 8000650:	200001a0 	.word	0x200001a0

08000654 <CAN_SetBitRate>:

void CAN_SetBitRate(uint8_t nBitRate)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <CAN_SetBitRate+0x2c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d105      	bne.n	8000672 <CAN_SetBitRate+0x1e>
    if(nBitRate < CAN_BITRATE_INVALID){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b08      	cmp	r3, #8
 800066a:	d802      	bhi.n	8000672 <CAN_SetBitRate+0x1e>
      eCanBitRate = (enum CAN_BITRATE)nBitRate;
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <CAN_SetBitRate+0x30>)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	7013      	strb	r3, [r2, #0]
    }
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200001f0 	.word	0x200001f0
 8000684:	20000000 	.word	0x20000000

08000688 <CAN_SetMode>:

void CAN_SetMode(uint8_t nMode)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <CAN_SetMode+0x34>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d109      	bne.n	80006ae <CAN_SetMode+0x26>
    if(nMode == 1)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d103      	bne.n	80006a8 <CAN_SetMode+0x20>
      nCanMode = 1;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <CAN_SetMode+0x38>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
    else
      nCanMode = 0;
  }
}
 80006a6:	e002      	b.n	80006ae <CAN_SetMode+0x26>
      nCanMode = 0;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <CAN_SetMode+0x38>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200001f0 	.word	0x200001f0
 80006c0:	200001f4 	.word	0x200001f4

080006c4 <CAN_SetAutoRetry>:

void CAN_SetAutoRetry(uint8_t nAutoRetry)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if(eCanBusState == OFF_BUS){
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <CAN_SetAutoRetry+0x34>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <CAN_SetAutoRetry+0x26>
    if(nAutoRetry == 1)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d103      	bne.n	80006e4 <CAN_SetAutoRetry+0x20>
      eAutoRetry = ENABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <CAN_SetAutoRetry+0x38>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
    else
      eAutoRetry = DISABLE;
  }
}
 80006e2:	e002      	b.n	80006ea <CAN_SetAutoRetry+0x26>
      eAutoRetry = DISABLE;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <CAN_SetAutoRetry+0x38>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200001f0 	.word	0x200001f0
 80006fc:	200001f8 	.word	0x200001f8

08000700 <HAL_RCC_CSSCallback>:

void HAL_RCC_CSSCallback(void) {
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  //Catch the HSE failure and take proper actions
  while (1)
 8000704:	e7fe      	b.n	8000704 <HAL_RCC_CSSCallback+0x4>
	...

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fede 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f86c 	bl	80007ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_RCC_EnableCSS();
 8000714:	f004 ffbe 	bl	8005694 <HAL_RCC_EnableCSS>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f000 f8ca 	bl	80008b0 <MX_GPIO_Init>
  MX_CAN_Init();
 800071c:	f000 f8c1 	bl	80008a2 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

   osKernelInitialize();
 8000720:	f009 fb10 	bl	8009d44 <osKernelInitialize>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUSBD, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000724:	2200      	movs	r2, #0
 8000726:	4928      	ldr	r1, [pc, #160]	; (80007c8 <main+0xc0>)
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <main+0xc4>)
 800072a:	f008 fa69 	bl	8008c00 <USBD_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <main+0x30>
  {
    Error_Handler();
 8000734:	f000 fa57 	bl	8000be6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUSBD, &USBD_CDC) != USBD_OK)
 8000738:	4925      	ldr	r1, [pc, #148]	; (80007d0 <main+0xc8>)
 800073a:	4824      	ldr	r0, [pc, #144]	; (80007cc <main+0xc4>)
 800073c:	f008 fa8b 	bl	8008c56 <USBD_RegisterClass>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <main+0x42>
  {
    Error_Handler();
 8000746:	f000 fa4e 	bl	8000be6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUSBD, &USBD_Interface) != USBD_OK)
 800074a:	4922      	ldr	r1, [pc, #136]	; (80007d4 <main+0xcc>)
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <main+0xc4>)
 800074e:	f008 f9b9 	bl	8008ac4 <USBD_CDC_RegisterInterface>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <main+0x54>
  {
    Error_Handler();
 8000758:	f000 fa45 	bl	8000be6 <Error_Handler>
  }
  if (USBD_Start(&hUSBD) != USBD_OK)
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <main+0xc4>)
 800075e:	f008 fa94 	bl	8008c8a <USBD_Start>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <main+0x64>
  {
    Error_Handler();
 8000768:	f000 fa3d 	bl	8000be6 <Error_Handler>
  }

  qMsgQueueUsbRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(struct USBD_CAN_Frame), NULL);
 800076c:	2200      	movs	r2, #0
 800076e:	213d      	movs	r1, #61	; 0x3d
 8000770:	2010      	movs	r0, #16
 8000772:	f009 fbf9 	bl	8009f68 <osMessageQueueNew>
 8000776:	4603      	mov	r3, r0
 8000778:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <main+0xd0>)
 800077a:	6013      	str	r3, [r2, #0]
  if(qMsgQueueUsbRx == NULL){
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <main+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <main+0x80>
    //TODO: Message queue not created
    Error_Handler();
 8000784:	f000 fa2f 	bl	8000be6 <Error_Handler>
  }

  qMsgQueueCanRx = osMessageQueueNew(MSGQUEUE_RX_SIZE, sizeof(struct USBD_CAN_Frame), NULL);
 8000788:	2200      	movs	r2, #0
 800078a:	213d      	movs	r1, #61	; 0x3d
 800078c:	2010      	movs	r0, #16
 800078e:	f009 fbeb 	bl	8009f68 <osMessageQueueNew>
 8000792:	4603      	mov	r3, r0
 8000794:	4a11      	ldr	r2, [pc, #68]	; (80007dc <main+0xd4>)
 8000796:	6013      	str	r3, [r2, #0]
  if(qMsgQueueCanRx == NULL){
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <main+0x9c>
    //TODO: Message queue not created
    Error_Handler();
 80007a0:	f000 fa21 	bl	8000be6 <Error_Handler>
  }


  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <main+0xd8>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0xdc>)
 80007aa:	f009 fb33 	bl	8009e14 <osThreadNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <main+0xe0>)
 80007b2:	6013      	str	r3, [r2, #0]
  if(defaultTaskHandle == 0x0)
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <main+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d101      	bne.n	80007c0 <main+0xb8>
      Error_Handler();
 80007bc:	f000 fa13 	bl	8000be6 <Error_Handler>

  osKernelStart();
 80007c0:	f009 faf4 	bl	8009dac <osKernelStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <main+0xbc>
 80007c6:	bf00      	nop
 80007c8:	20000134 	.word	0x20000134
 80007cc:	20001284 	.word	0x20001284
 80007d0:	2000002c 	.word	0x2000002c
 80007d4:	20000004 	.word	0x20000004
 80007d8:	2000027c 	.word	0x2000027c
 80007dc:	20000280 	.word	0x20000280
 80007e0:	0800d3e4 	.word	0x0800d3e4
 80007e4:	080009b1 	.word	0x080009b1
 80007e8:	20001564 	.word	0x20001564

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	; 0x70
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00c fda8 	bl	800d350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2234      	movs	r2, #52	; 0x34
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00c fd9a 	bl	800d350 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000836:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fd6c 	bl	8004320 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084e:	f000 f9ca 	bl	8000be6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fd94 	bl	800539c <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800087a:	f000 f9b4 	bl	8000be6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800087e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000882:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fffc 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000896:	f000 f9a6 	bl	8000be6 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3770      	adds	r7, #112	; 0x70
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 1 */
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <MX_GPIO_Init+0xf8>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_GPIO_Init+0xf8>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|USB_PU_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f002 f814 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRA_GPIO_Port, EXTRA_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <MX_GPIO_Init+0xfc>)
 8000924:	f002 f80e 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f001 fdb9 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_Pin */
  GPIO_InitStruct.Pin = EXTRA_Pin;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTRA_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_GPIO_Init+0xfc>)
 8000960:	f001 fdaa 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f001 fd9c 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f001 fd8c 	bl	80024b8 <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400

080009b0 <StartDefaultTask>:

/* USER CODE BEGIN 4 */

void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0aa      	sub	sp, #168	; 0xa8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  LedInit(&stLedRx, LED1_GPIO_Port, LED1_Pin);
 80009b8:	2220      	movs	r2, #32
 80009ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80009be:	487c      	ldr	r0, [pc, #496]	; (8000bb0 <StartDefaultTask+0x200>)
 80009c0:	f7ff fc06 	bl	80001d0 <LedInit>
  LedInit(&stLedTx, LED2_GPIO_Port, LED2_Pin);
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80009ca:	487a      	ldr	r0, [pc, #488]	; (8000bb4 <StartDefaultTask+0x204>)
 80009cc:	f7ff fc00 	bl	80001d0 <LedInit>

  LedBlink(&stLedRx, 1000);
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	4876      	ldr	r0, [pc, #472]	; (8000bb0 <StartDefaultTask+0x200>)
 80009d6:	f7ff fc34 	bl	8000242 <LedBlink>
  LedBlink(&stLedTx, 1000);
 80009da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009de:	4875      	ldr	r0, [pc, #468]	; (8000bb4 <StartDefaultTask+0x204>)
 80009e0:	f7ff fc2f 	bl	8000242 <LedBlink>

  while(1){
    LedUpdate(&stLedTx);
 80009e4:	4873      	ldr	r0, [pc, #460]	; (8000bb4 <StartDefaultTask+0x204>)
 80009e6:	f7ff fc06 	bl	80001f6 <LedUpdate>
    LedUpdate(&stLedRx);
 80009ea:	4871      	ldr	r0, [pc, #452]	; (8000bb0 <StartDefaultTask+0x200>)
 80009ec:	f7ff fc03 	bl	80001f6 <LedUpdate>

    if( (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && !nUsbConnected){
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <StartDefaultTask+0x6c>
 80009fe:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <StartDefaultTask+0x208>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10a      	bne.n	8000a1c <StartDefaultTask+0x6c>
      USB_PU_GPIO_Port->ODR |= USB_PU_Pin;
 8000a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a14:	6153      	str	r3, [r2, #20]
      nUsbConnected = 1;
 8000a16:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <StartDefaultTask+0x208>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
    }

    if( !(USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) && nUsbConnected){
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10e      	bne.n	8000a48 <StartDefaultTask+0x98>
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <StartDefaultTask+0x208>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00a      	beq.n	8000a48 <StartDefaultTask+0x98>
      USB_PU_GPIO_Port->ODR &= ~USB_PU_Pin;
 8000a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a40:	6153      	str	r3, [r2, #20]
      nUsbConnected = 0;
 8000a42:	4b5d      	ldr	r3, [pc, #372]	; (8000bb8 <StartDefaultTask+0x208>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
    }

    //Check for messages in USB To Host queue
    //Send to USB host
    struct USBD_CAN_Frame stToHostFrame;
    if(osMessageQueueGet(qMsgQueueCanRx, &stToHostFrame, NULL, 0U) == osOK){
 8000a48:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <StartDefaultTask+0x20c>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	f107 0108 	add.w	r1, r7, #8
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	f009 fb82 	bl	800a15c <osMessageQueueGet>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d11e      	bne.n	8000a9c <StartDefaultTask+0xec>
      //Build USB array
      uint8_t nUsbData[30];
      uint8_t nUsbDataLen = SLCAN_Tx(&stToHostFrame, nUsbData);
 8000a5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 faa8 	bl	8000fbe <SLCAN_Tx>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

      if(USBD_CDC_Transmit(nUsbData, (uint16_t)nUsbDataLen) == USBD_FAIL){
 8000a74:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fca9 	bl	80003d8 <USBD_CDC_Transmit>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d107      	bne.n	8000a9c <StartDefaultTask+0xec>
        osMessageQueuePut(qMsgQueueCanRx, &stToHostFrame, 0U, 0U);
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <StartDefaultTask+0x20c>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f107 0108 	add.w	r1, r7, #8
 8000a94:	2300      	movs	r3, #0
 8000a96:	2200      	movs	r2, #0
 8000a98:	f009 faec 	bl	800a074 <osMessageQueuePut>
      }
    }

    struct USBD_CAN_Frame stFromHostFrame;
    if(osMessageQueueGet(qMsgQueueCanRx, &stFromHostFrame, NULL, 0U) == osOK){
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <StartDefaultTask+0x20c>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f009 fb58 	bl	800a15c <osMessageQueueGet>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d178      	bne.n	8000ba4 <StartDefaultTask+0x1f4>
      switch(stFromHostFrame.eUsbdCmd){
 8000ab2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000ab6:	3b41      	subs	r3, #65	; 0x41
 8000ab8:	2b15      	cmp	r3, #21
 8000aba:	d847      	bhi.n	8000b4c <StartDefaultTask+0x19c>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <StartDefaultTask+0x114>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000b41 	.word	0x08000b41
 8000ac8:	08000b4d 	.word	0x08000b4d
 8000acc:	08000b23 	.word	0x08000b23
 8000ad0:	08000b4d 	.word	0x08000b4d
 8000ad4:	08000b4d 	.word	0x08000b4d
 8000ad8:	08000b4d 	.word	0x08000b4d
 8000adc:	08000b4d 	.word	0x08000b4d
 8000ae0:	08000b4d 	.word	0x08000b4d
 8000ae4:	08000b4d 	.word	0x08000b4d
 8000ae8:	08000b4d 	.word	0x08000b4d
 8000aec:	08000b4d 	.word	0x08000b4d
 8000af0:	08000b4d 	.word	0x08000b4d
 8000af4:	08000b35 	.word	0x08000b35
 8000af8:	08000b4d 	.word	0x08000b4d
 8000afc:	08000b1d 	.word	0x08000b1d
 8000b00:	08000b4d 	.word	0x08000b4d
 8000b04:	08000b4d 	.word	0x08000b4d
 8000b08:	08000b4d 	.word	0x08000b4d
 8000b0c:	08000b29 	.word	0x08000b29
 8000b10:	08000b4d 	.word	0x08000b4d
 8000b14:	08000b4d 	.word	0x08000b4d
 8000b18:	08000ba9 	.word	0x08000ba9
      case USBD_CMD_OPEN_CAN:
        CAN_Enable();
 8000b1c:	f7ff fcba 	bl	8000494 <CAN_Enable>
        break;
 8000b20:	e045      	b.n	8000bae <StartDefaultTask+0x1fe>

      case USBD_CMD_CLOSE_CAN:
        CAN_Disable();
 8000b22:	f7ff fd6f 	bl	8000604 <CAN_Disable>
        break;
 8000b26:	e042      	b.n	8000bae <StartDefaultTask+0x1fe>

      case USBD_CMD_SET_CAN_BITRATE:
        CAN_SetBitRate(stFromHostFrame.nData[1]);
 8000b28:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd91 	bl	8000654 <CAN_SetBitRate>
        break;
 8000b32:	e03c      	b.n	8000bae <StartDefaultTask+0x1fe>

      case USBD_CMD_SET_CAN_MODE:
        CAN_SetMode(stFromHostFrame.nData[1]);
 8000b34:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fda5 	bl	8000688 <CAN_SetMode>
        break;
 8000b3e:	e036      	b.n	8000bae <StartDefaultTask+0x1fe>

      case USBD_CMD_SET_CAN_AUTORETRY:
        CAN_SetAutoRetry(stFromHostFrame.nData[1]);
 8000b40:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fdbd 	bl	80006c4 <CAN_SetAutoRetry>
        break;
 8000b4a:	e030      	b.n	8000bae <StartDefaultTask+0x1fe>

      case USBD_CMD_GET_VERSION:
        break;

      default:
        if((stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT) ||
 8000b4c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b50:	2b74      	cmp	r3, #116	; 0x74
 8000b52:	d00b      	beq.n	8000b6c <StartDefaultTask+0x1bc>
            (stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT) ||
 8000b54:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
        if((stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT) ||
 8000b58:	2b72      	cmp	r3, #114	; 0x72
 8000b5a:	d007      	beq.n	8000b6c <StartDefaultTask+0x1bc>
            (stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT) ||
 8000b5c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
            (stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT) ||
 8000b60:	2b54      	cmp	r3, #84	; 0x54
 8000b62:	d003      	beq.n	8000b6c <StartDefaultTask+0x1bc>
            (stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_REMOTE_29BIT)){
 8000b64:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
            (stFromHostFrame.eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT) ||
 8000b68:	2b52      	cmp	r3, #82	; 0x52
 8000b6a:	d11f      	bne.n	8000bac <StartDefaultTask+0x1fc>
          //Add to queue
          if(HAL_CAN_AddTxMessage(&hcan, &stFromHostFrame.stTxHeader, stFromHostFrame.nData, &nCanTxMailbox) == HAL_OK){
 8000b6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b70:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8000b74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b78:	1c59      	adds	r1, r3, #1
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <StartDefaultTask+0x210>)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <StartDefaultTask+0x214>)
 8000b7e:	f000 ff50 	bl	8001a22 <HAL_CAN_AddTxMessage>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <StartDefaultTask+0x1e2>
            //Tx success - put pointer back in memory pool
            LedBlink(&stLedTx, 20);
 8000b88:	2114      	movs	r1, #20
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <StartDefaultTask+0x204>)
 8000b8c:	f7ff fb59 	bl	8000242 <LedBlink>
          }else{
            //Tx failed - add back to front of queue
            osMessageQueuePut(qMsgQueueCanRx, &stFromHostFrame, 0U, 0U);
          }
        }
        break;
 8000b90:	e00c      	b.n	8000bac <StartDefaultTask+0x1fc>
            osMessageQueuePut(qMsgQueueCanRx, &stFromHostFrame, 0U, 0U);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <StartDefaultTask+0x20c>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f009 fa69 	bl	800a074 <osMessageQueuePut>
        break;
 8000ba2:	e003      	b.n	8000bac <StartDefaultTask+0x1fc>
      }
    }
 8000ba4:	bf00      	nop
 8000ba6:	e71d      	b.n	80009e4 <StartDefaultTask+0x34>
        break;
 8000ba8:	bf00      	nop
 8000baa:	e71b      	b.n	80009e4 <StartDefaultTask+0x34>
        break;
 8000bac:	bf00      	nop
  while(1){
 8000bae:	e719      	b.n	80009e4 <StartDefaultTask+0x34>
 8000bb0:	20001558 	.word	0x20001558
 8000bb4:	2000154c 	.word	0x2000154c
 8000bb8:	20001548 	.word	0x20001548
 8000bbc:	20000280 	.word	0x20000280
 8000bc0:	200001ec 	.word	0x200001ec
 8000bc4:	200001a0 	.word	0x200001a0

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE END 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d101      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bda:	f000 fc8d 	bl	80014f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bea:	b672      	cpsid	i
}
 8000bec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bee:	e7fe      	b.n	8000bee <Error_Handler+0x8>

08000bf0 <SLCAN_Rx>:
 *      Author: cgrant
 */

#include "slcan.h"

void SLCAN_Rx(uint8_t* nRxData, uint32_t* nRxDataLen, struct USBD_CAN_Frame *stRxFrame){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint8_t nDataFirstPos;

  stRxFrame->eUsbdCmd = (enum USBD_CMD)nRxData[0];
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	701a      	strb	r2, [r3, #0]

  // Convert from ASCII (2nd character to end)
  for (uint8_t i = 1; i < *nRxDataLen; i++)
 8000c04:	2301      	movs	r3, #1
 8000c06:	77bb      	strb	r3, [r7, #30]
 8000c08:	e02e      	b.n	8000c68 <SLCAN_Rx+0x78>
  {
      // Lowercase letters
      if(nRxData[i] >= 'a')
 8000c0a:	7fbb      	ldrb	r3, [r7, #30]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b60      	cmp	r3, #96	; 0x60
 8000c14:	d90a      	bls.n	8000c2c <SLCAN_Rx+0x3c>
          nRxData[i] = nRxData[i] - 'a' + 10;
 8000c16:	7fbb      	ldrb	r3, [r7, #30]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	7fbb      	ldrb	r3, [r7, #30]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	440b      	add	r3, r1
 8000c24:	3a57      	subs	r2, #87	; 0x57
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e01a      	b.n	8000c62 <SLCAN_Rx+0x72>
      // Uppercase letters
      else if(nRxData[i] >= 'A')
 8000c2c:	7fbb      	ldrb	r3, [r7, #30]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b40      	cmp	r3, #64	; 0x40
 8000c36:	d90a      	bls.n	8000c4e <SLCAN_Rx+0x5e>
          nRxData[i] = nRxData[i] - 'A' + 10;
 8000c38:	7fbb      	ldrb	r3, [r7, #30]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	7fbb      	ldrb	r3, [r7, #30]
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	440b      	add	r3, r1
 8000c46:	3a37      	subs	r2, #55	; 0x37
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e009      	b.n	8000c62 <SLCAN_Rx+0x72>
      // Numbers
      else
          nRxData[i] = nRxData[i] - '0';
 8000c4e:	7fbb      	ldrb	r3, [r7, #30]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	7fbb      	ldrb	r3, [r7, #30]
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3a30      	subs	r2, #48	; 0x30
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < *nRxDataLen; i++)
 8000c62:	7fbb      	ldrb	r3, [r7, #30]
 8000c64:	3301      	adds	r3, #1
 8000c66:	77bb      	strb	r3, [r7, #30]
 8000c68:	7fba      	ldrb	r2, [r7, #30]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3cb      	bcc.n	8000c0a <SLCAN_Rx+0x1a>
  }

  if( (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE) ||
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b53      	cmp	r3, #83	; 0x53
 8000c78:	d007      	beq.n	8000c8a <SLCAN_Rx+0x9a>
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_MODE) ||
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
  if( (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE) ||
 8000c7e:	2b4d      	cmp	r3, #77	; 0x4d
 8000c80:	d003      	beq.n	8000c8a <SLCAN_Rx+0x9a>
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_BITRATE)){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	781b      	ldrb	r3, [r3, #0]
      (stRxFrame->eUsbdCmd == USBD_CMD_SET_CAN_MODE) ||
 8000c86:	2b53      	cmp	r3, #83	; 0x53
 8000c88:	d104      	bne.n	8000c94 <SLCAN_Rx+0xa4>
    stRxFrame->nData[1] = nRxData[1];
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	785a      	ldrb	r2, [r3, #1]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_11BIT){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b74      	cmp	r3, #116	; 0x74
 8000c9a:	d166      	bne.n	8000d6a <SLCAN_Rx+0x17a>
    stRxFrame->stTxHeader.StdId = ((nRxData[1] & 0xF) << 8) + ((nRxData[2] & 0xF) << 4) + (nRxData[3] & 0xF);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3302      	adds	r3, #2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3303      	adds	r3, #3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	4413      	add	r3, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f8c3 2001 	str.w	r2, [r3, #1]

    stRxFrame->stTxHeader.DLC = nRxData[4];
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8c3 2011 	str.w	r2, [r3, #17]

    nDataFirstPos = 5;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	77fb      	strb	r3, [r7, #31]

    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	e020      	b.n	8000d22 <SLCAN_Rx+0x132>
      stRxFrame->nData[i] = ((nRxData[i + nDataFirstPos] & 0xF) << 4) + (nRxData[i + nDataFirstPos + 1] & 0xF);
 8000ce0:	7ffa      	ldrb	r2, [r7, #31]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	7ff9      	ldrb	r1, [r7, #31]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	68f9      	ldr	r1, [r7, #12]
 8000cfc:	440b      	add	r3, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	4413      	add	r3, r2
 8000d10:	3335      	adds	r3, #53	; 0x35
 8000d12:	460a      	mov	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
      nDataFirstPos++;
 8000d16:	7ffb      	ldrb	r3, [r7, #31]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	77fb      	strb	r3, [r7, #31]
    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f8d3 2011 	ldr.w	r2, [r3, #17]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8d8      	bhi.n	8000ce0 <SLCAN_Rx+0xf0>
    }

    stRxFrame->stTxHeader.ExtId = 0;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	715a      	strb	r2, [r3, #5]
 8000d34:	2200      	movs	r2, #0
 8000d36:	719a      	strb	r2, [r3, #6]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	71da      	strb	r2, [r3, #7]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	721a      	strb	r2, [r3, #8]
    stRxFrame->stTxHeader.IDE = CAN_ID_STD;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	725a      	strb	r2, [r3, #9]
 8000d46:	2200      	movs	r2, #0
 8000d48:	729a      	strb	r2, [r3, #10]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	72da      	strb	r2, [r3, #11]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_DATA;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	735a      	strb	r2, [r3, #13]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	739a      	strb	r2, [r3, #14]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	73da      	strb	r2, [r3, #15]
 8000d60:	2200      	movs	r2, #0
 8000d62:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_11BIT){
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b72      	cmp	r3, #114	; 0x72
 8000d70:	d135      	bne.n	8000dde <SLCAN_Rx+0x1ee>
    stRxFrame->stTxHeader.StdId = ((nRxData[1] & 0xF) << 8) + ((nRxData[2] & 0xF) << 4) + (nRxData[3] & 0xF);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3302      	adds	r3, #2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	4413      	add	r3, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8c3 2001 	str.w	r2, [r3, #1]

    stRxFrame->stTxHeader.ExtId = 0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	715a      	strb	r2, [r3, #5]
 8000da4:	2200      	movs	r2, #0
 8000da6:	719a      	strb	r2, [r3, #6]
 8000da8:	2200      	movs	r2, #0
 8000daa:	71da      	strb	r2, [r3, #7]
 8000dac:	2200      	movs	r2, #0
 8000dae:	721a      	strb	r2, [r3, #8]
    stRxFrame->stTxHeader.IDE = CAN_ID_STD;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	725a      	strb	r2, [r3, #9]
 8000db6:	2200      	movs	r2, #0
 8000db8:	729a      	strb	r2, [r3, #10]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	72da      	strb	r2, [r3, #11]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_REMOTE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f042 0202 	orr.w	r2, r2, #2
 8000dca:	735a      	strb	r2, [r3, #13]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	739a      	strb	r2, [r3, #14]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	73da      	strb	r2, [r3, #15]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_TRANSMIT_29BIT){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b54      	cmp	r3, #84	; 0x54
 8000de4:	f040 8089 	bne.w	8000efa <SLCAN_Rx+0x30a>
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	071a      	lsls	r2, r3, #28
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3302      	adds	r3, #2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	061b      	lsls	r3, r3, #24
 8000df8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000dfc:	441a      	add	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3303      	adds	r3, #3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	041b      	lsls	r3, r3, #16
 8000e14:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e18:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	031b      	lsls	r3, r3, #12
 8000e22:	b29b      	uxth	r3, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000e24:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3306      	adds	r3, #6
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e32:	441a      	add	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3307      	adds	r3, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	441a      	add	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	4413      	add	r3, r2
 8000e4c:	461a      	mov	r2, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8c3 2005 	str.w	r2, [r3, #5]

    stRxFrame->stTxHeader.DLC = nRxData[9];
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3309      	adds	r3, #9
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8c3 2011 	str.w	r2, [r3, #17]

    nDataFirstPos = 10;
 8000e62:	230a      	movs	r3, #10
 8000e64:	77fb      	strb	r3, [r7, #31]

    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e020      	b.n	8000eae <SLCAN_Rx+0x2be>
      stRxFrame->nData[i] = ((nRxData[i + nDataFirstPos] & 0xF) << 4) + (nRxData[i + nDataFirstPos + 1] & 0xF);
 8000e6c:	7ffa      	ldrb	r2, [r7, #31]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	7ff9      	ldrb	r1, [r7, #31]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	440b      	add	r3, r1
 8000e84:	3301      	adds	r3, #1
 8000e86:	68f9      	ldr	r1, [r7, #12]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b2d9      	uxtb	r1, r3
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3335      	adds	r3, #53	; 0x35
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
      nDataFirstPos++;
 8000ea2:	7ffb      	ldrb	r3, [r7, #31]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	77fb      	strb	r3, [r7, #31]
    for(int i=0; i < stRxFrame->stTxHeader.DLC; i++){
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8d3 2011 	ldr.w	r2, [r3, #17]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d8d8      	bhi.n	8000e6c <SLCAN_Rx+0x27c>
    }

    stRxFrame->stTxHeader.StdId = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	705a      	strb	r2, [r3, #1]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	709a      	strb	r2, [r3, #2]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	70da      	strb	r2, [r3, #3]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	711a      	strb	r2, [r3, #4]
    stRxFrame->stTxHeader.IDE = CAN_ID_EXT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f042 0204 	orr.w	r2, r2, #4
 8000ed4:	725a      	strb	r2, [r3, #9]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	729a      	strb	r2, [r3, #10]
 8000eda:	2200      	movs	r2, #0
 8000edc:	72da      	strb	r2, [r3, #11]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_DATA;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	735a      	strb	r2, [r3, #13]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	739a      	strb	r2, [r3, #14]
 8000eec:	2200      	movs	r2, #0
 8000eee:	73da      	strb	r2, [r3, #15]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	755a      	strb	r2, [r3, #21]
  }

  if(stRxFrame->eUsbdCmd == USBD_CMD_CAN_REMOTE_29BIT){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b52      	cmp	r3, #82	; 0x52
 8000f00:	d157      	bne.n	8000fb2 <SLCAN_Rx+0x3c2>
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	071a      	lsls	r2, r3, #28
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	061b      	lsls	r3, r3, #24
 8000f12:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000f16:	441a      	add	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	051b      	lsls	r3, r3, #20
 8000f20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000f24:	441a      	add	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f32:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3305      	adds	r3, #5
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	b29b      	uxth	r3, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000f3e:	441a      	add	r2, r3
                                  ((nRxData[5] & 0xF) << 12) + ((nRxData[6] & 0xF) << 8) + ((nRxData[7] & 0xF) << 4) + (nRxData[8] & 0xF);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3306      	adds	r3, #6
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f4c:	441a      	add	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3307      	adds	r3, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	441a      	add	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
    stRxFrame->stTxHeader.ExtId = ((nRxData[1] & 0xF) << 28) + ((nRxData[2] & 0xF) << 24) + ((nRxData[3] & 0xF) << 20) + ((nRxData[4] & 0xF) << 16) +
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8c3 2005 	str.w	r2, [r3, #5]

    stRxFrame->stTxHeader.StdId = 0;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	705a      	strb	r2, [r3, #1]
 8000f74:	2200      	movs	r2, #0
 8000f76:	709a      	strb	r2, [r3, #2]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	70da      	strb	r2, [r3, #3]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	711a      	strb	r2, [r3, #4]
    stRxFrame->stTxHeader.IDE = CAN_ID_EXT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f042 0204 	orr.w	r2, r2, #4
 8000f88:	725a      	strb	r2, [r3, #9]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	729a      	strb	r2, [r3, #10]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	72da      	strb	r2, [r3, #11]
 8000f92:	2200      	movs	r2, #0
 8000f94:	731a      	strb	r2, [r3, #12]
    stRxFrame->stTxHeader.RTR = CAN_RTR_REMOTE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	735a      	strb	r2, [r3, #13]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	739a      	strb	r2, [r3, #14]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	73da      	strb	r2, [r3, #15]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	741a      	strb	r2, [r3, #16]
    stRxFrame->stTxHeader.TransmitGlobalTime = DISABLE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	755a      	strb	r2, [r3, #21]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SLCAN_Tx>:

uint8_t SLCAN_Tx(struct USBD_CAN_Frame *stTxFrame, uint8_t* nTxData){
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  uint8_t nFirstDataPos;
  uint8_t nLastDataPos;

  for(uint8_t i=0; i < 30; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	737b      	strb	r3, [r7, #13]
 8000fcc:	e007      	b.n	8000fde <SLCAN_Tx+0x20>
    nTxData[i] = '\0';
 8000fce:	7b7b      	ldrb	r3, [r7, #13]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i < 30; i++)
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	737b      	strb	r3, [r7, #13]
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	2b1d      	cmp	r3, #29
 8000fe2:	d9f4      	bls.n	8000fce <SLCAN_Tx+0x10>

  if(stTxFrame->stRxHeader.RTR == CAN_RTR_DATA){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <SLCAN_Tx+0x4a>
    if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <SLCAN_Tx+0x42>
      nTxData[0] = 't';
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2274      	movs	r2, #116	; 0x74
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e00f      	b.n	8001020 <SLCAN_Tx+0x62>
    } else{
      nTxData[0] = 'T';
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2254      	movs	r2, #84	; 0x54
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e00b      	b.n	8001020 <SLCAN_Tx+0x62>
    }
  } else{
    if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <SLCAN_Tx+0x5c>
      nTxData[0] = 'r';
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2272      	movs	r2, #114	; 0x72
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e002      	b.n	8001020 <SLCAN_Tx+0x62>
    } else{
      nTxData[0] = 'R';
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2252      	movs	r2, #82	; 0x52
 800101e:	701a      	strb	r2, [r3, #0]
    }
  }

  if(stTxFrame->stRxHeader.IDE == CAN_ID_STD){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8001026:	2b00      	cmp	r3, #0
 8001028:	d129      	bne.n	800107e <SLCAN_Tx+0xc0>
    nTxData[1] = (stTxFrame->stRxHeader.StdId >> 8) & 0xF;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b2da      	uxtb	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	f002 020f 	and.w	r2, r2, #15
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
    nTxData[2] = (stTxFrame->stRxHeader.StdId >> 4) & 0xF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	b2da      	uxtb	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3302      	adds	r3, #2
 800104e:	f002 020f 	and.w	r2, r2, #15
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
    nTxData[3] = stTxFrame->stRxHeader.StdId & 0xF;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f8d3 3019 	ldr.w	r3, [r3, #25]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3303      	adds	r3, #3
 8001062:	f002 020f 	and.w	r2, r2, #15
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]

    nTxData[4] = (stTxFrame->stRxHeader.DLC & 0xFF);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3304      	adds	r3, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
    nFirstDataPos = 5;
 8001078:	2305      	movs	r3, #5
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e05c      	b.n	8001138 <SLCAN_Tx+0x17a>
  } else{
    nTxData[1] = (stTxFrame->stRxHeader.StdId >> 28) & 0xF;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001084:	0f1a      	lsrs	r2, r3, #28
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
    nTxData[2] = (stTxFrame->stRxHeader.StdId >> 24) & 0xF;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001094:	0e1b      	lsrs	r3, r3, #24
 8001096:	b2da      	uxtb	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3302      	adds	r3, #2
 800109c:	f002 020f 	and.w	r2, r2, #15
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	701a      	strb	r2, [r3, #0]
    nTxData[3] = (stTxFrame->stRxHeader.StdId >> 20) & 0xF;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80010aa:	0d1b      	lsrs	r3, r3, #20
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3303      	adds	r3, #3
 80010b2:	f002 020f 	and.w	r2, r2, #15
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
    nTxData[4] = (stTxFrame->stRxHeader.StdId >> 16) & 0xF;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80010c0:	0c1b      	lsrs	r3, r3, #16
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3304      	adds	r3, #4
 80010c8:	f002 020f 	and.w	r2, r2, #15
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]
    nTxData[5] = (stTxFrame->stRxHeader.StdId >> 12) & 0xF;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80010d6:	0b1b      	lsrs	r3, r3, #12
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3305      	adds	r3, #5
 80010de:	f002 020f 	and.w	r2, r2, #15
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
    nTxData[6] = (stTxFrame->stRxHeader.StdId >> 8) & 0xF;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3306      	adds	r3, #6
 80010f4:	f002 020f 	and.w	r2, r2, #15
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    nTxData[7] = (stTxFrame->stRxHeader.StdId >> 4) & 0xF;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	b2da      	uxtb	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3307      	adds	r3, #7
 800110a:	f002 020f 	and.w	r2, r2, #15
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
    nTxData[8] = stTxFrame->stRxHeader.StdId & 0xF;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3308      	adds	r3, #8
 800111e:	f002 020f 	and.w	r2, r2, #15
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]

    nTxData[9] = (stTxFrame->stRxHeader.DLC & 0xFF);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3309      	adds	r3, #9
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
    nFirstDataPos = 10;
 8001134:	230a      	movs	r3, #10
 8001136:	73fb      	strb	r3, [r7, #15]
  }

  nLastDataPos = nFirstDataPos;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	73bb      	strb	r3, [r7, #14]
  for(uint8_t i=0; i < stTxFrame->stRxHeader.DLC; i++){
 800113c:	2300      	movs	r3, #0
 800113e:	733b      	strb	r3, [r7, #12]
 8001140:	e026      	b.n	8001190 <SLCAN_Tx+0x1d2>
    nTxData[i + nFirstDataPos] = (stTxFrame->nData[i] >> 4);
 8001142:	7b3b      	ldrb	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800114c:	7b39      	ldrb	r1, [r7, #12]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	440b      	add	r3, r1
 8001152:	4619      	mov	r1, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	440b      	add	r3, r1
 8001158:	0912      	lsrs	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    nFirstDataPos++;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	3301      	adds	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
    nTxData[i + nFirstDataPos] = (stTxFrame->nData[i] & 0x0F);
 8001164:	7b3b      	ldrb	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800116e:	7b39      	ldrb	r1, [r7, #12]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	440b      	add	r3, r1
 8001174:	4619      	mov	r1, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	440b      	add	r3, r1
 800117a:	f002 020f 	and.w	r2, r2, #15
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
    nLastDataPos = i + nFirstDataPos;
 8001182:	7b3a      	ldrb	r2, [r7, #12]
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4413      	add	r3, r2
 8001188:	73bb      	strb	r3, [r7, #14]
  for(uint8_t i=0; i < stTxFrame->stRxHeader.DLC; i++){
 800118a:	7b3b      	ldrb	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	733b      	strb	r3, [r7, #12]
 8001190:	7b3a      	ldrb	r2, [r7, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8001198:	429a      	cmp	r2, r3
 800119a:	d3d2      	bcc.n	8001142 <SLCAN_Tx+0x184>
  }

  for(uint8_t j = 1; j <= nLastDataPos; j++){
 800119c:	2301      	movs	r3, #1
 800119e:	72fb      	strb	r3, [r7, #11]
 80011a0:	e01d      	b.n	80011de <SLCAN_Tx+0x220>
    if(nTxData[j] < 0xA){
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b09      	cmp	r3, #9
 80011ac:	d80a      	bhi.n	80011c4 <SLCAN_Tx+0x206>
      nTxData[j] += 0x30;
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	440b      	add	r3, r1
 80011bc:	3230      	adds	r2, #48	; 0x30
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e009      	b.n	80011d8 <SLCAN_Tx+0x21a>
    } else{
      nTxData[j] += 0x37;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	440b      	add	r3, r1
 80011d2:	3237      	adds	r2, #55	; 0x37
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
  for(uint8_t j = 1; j <= nLastDataPos; j++){
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	3301      	adds	r3, #1
 80011dc:	72fb      	strb	r3, [r7, #11]
 80011de:	7afa      	ldrb	r2, [r7, #11]
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d9dd      	bls.n	80011a2 <SLCAN_Tx+0x1e4>
    }
  }

  nLastDataPos++;
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73bb      	strb	r3, [r7, #14]
  nTxData[nLastDataPos] = '\r';
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	220d      	movs	r2, #13
 80011f4:	701a      	strb	r2, [r3, #0]

  //Increment by 1 to return total size (include 0 index)
  return ++nLastDataPos;
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	3301      	adds	r3, #1
 80011fa:	73bb      	strb	r3, [r7, #14]
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_MspInit+0x4c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_MspInit+0x4c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_MspInit+0x4c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_MspInit+0x4c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_MspInit+0x4c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	210f      	movs	r1, #15
 8001246:	f06f 0001 	mvn.w	r0, #1
 800124a:	f001 f90b 	bl	8002464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_CAN_MspInit+0x8c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d130      	bne.n	80012e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_CAN_MspInit+0x90>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_CAN_MspInit+0x90>)
 8001284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_CAN_MspInit+0x90>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_CAN_MspInit+0x90>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_CAN_MspInit+0x90>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_CAN_MspInit+0x90>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80012c0:	2309      	movs	r3, #9
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <HAL_CAN_MspInit+0x94>)
 80012cc:	f001 f8f4 	bl	80024b8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	2014      	movs	r0, #20
 80012d6:	f001 f8c5 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80012da:	2014      	movs	r0, #20
 80012dc:	f001 f8de 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40006400 	.word	0x40006400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_CAN_MspDeInit+0x30>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10a      	bne.n	800131c <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_CAN_MspDeInit+0x34>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_CAN_MspDeInit+0x34>)
 800130c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001310:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001312:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_CAN_MspDeInit+0x38>)
 8001318:	f001 fa40 	bl	800279c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40006400 	.word	0x40006400
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	201c      	movs	r0, #28
 8001346:	f001 f88d 	bl	8002464 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134a:	201c      	movs	r0, #28
 800134c:	f001 f8a6 	bl	800249c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_InitTick+0xa4>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_InitTick+0xa4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	61d3      	str	r3, [r2, #28]
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_InitTick+0xa4>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001368:	f107 0210 	add.w	r2, r7, #16
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fa42 	bl	80057fc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001378:	f004 fa1e 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_InitTick+0xa8>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	3b01      	subs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0xac>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_InitTick+0xac>)
 800139a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_InitTick+0xac>)
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_InitTick+0xac>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_InitTick+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80013b2:	480a      	ldr	r0, [pc, #40]	; (80013dc <HAL_InitTick+0xac>)
 80013b4:	f004 fbfa 	bl	8005bac <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d104      	bne.n	80013c8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <HAL_InitTick+0xac>)
 80013c0:	f004 fc56 	bl	8005c70 <HAL_TIM_Base_Start_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	e000      	b.n	80013ca <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	20001568 	.word	0x20001568

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013e4:	f004 fa3c 	bl	8005860 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x8>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001416:	f000 fd3e 	bl	8001e96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001a0 	.word	0x200001a0

08001424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM2_IRQHandler+0x10>)
 800142a:	f004 fc75 	bl	8005d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20001568 	.word	0x20001568

08001438 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority remap interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <USB_LP_IRQHandler+0x10>)
 800143e:	f001 fb9d 	bl	8002b7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20003104 	.word	0x20003104

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SystemInit+0x28>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <SystemInit+0x28>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SystemInit+0x28>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	609a      	str	r2, [r3, #8]
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800147c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800148e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
	ldr	r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001496:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LoopForever+0x16>)
	cmp	r2, r3
 800149e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff ffd3 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f00b ff21 	bl	800d2ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff f92d 	bl	8000708 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80014b4:	0800d448 	.word	0x0800d448
	ldr	r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014bc:	20000184 	.word	0x20000184
	ldr	r2, =_sbss
 80014c0:	20000184 	.word	0x20000184
	ldr	r3, = _ebss
 80014c4:	20003610 	.word	0x20003610

080014c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>
	...

080014cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 ffb6 	bl	800244e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f7ff ff24 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fe90 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000001c 	.word	0x2000001c
 800151c:	200015b4 	.word	0x200015b4

08001520 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;  
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200015b4 	.word	0x200015b4

08001538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0ed      	b.n	8001726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe80 	bl	800125c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff ffd8 	bl	8001520 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001572:	e012      	b.n	800159a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001574:	f7ff ffd4 	bl	8001520 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d90b      	bls.n	800159a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0c5      	b.n	8001726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0e5      	beq.n	8001574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0202 	bic.w	r2, r2, #2
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff ffb2 	bl	8001520 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c0:	f7ff ffae 	bl	8001520 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d90b      	bls.n	80015e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2205      	movs	r2, #5
 80015de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e09f      	b.n	8001726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e5      	bne.n	80015c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e5b      	ldrb	r3, [r3, #25]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e9b      	ldrb	r3, [r3, #26]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0220 	orr.w	r2, r2, #32
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0220 	bic.w	r2, r2, #32
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7edb      	ldrb	r3, [r3, #27]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0210 	bic.w	r2, r2, #16
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e007      	b.n	800169c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0210 	orr.w	r2, r2, #16
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7f1b      	ldrb	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e007      	b.n	80016c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7f5b      	ldrb	r3, [r3, #29]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0204 	orr.w	r2, r2, #4
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e007      	b.n	80016f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	ea42 0103 	orr.w	r1, r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e015      	b.n	800176c <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f925 	bl	8001990 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fdd4 	bl	80012f4 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800178c:	7cfb      	ldrb	r3, [r7, #19]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <HAL_CAN_ConfigFilter+0x26>
 8001792:	7cfb      	ldrb	r3, [r7, #19]
 8001794:	2b02      	cmp	r3, #2
 8001796:	f040 80aa 	bne.w	80018ee <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	2201      	movs	r2, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d123      	bne.n	800181c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3248      	adds	r2, #72	; 0x48
 80017fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001810:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001812:	6979      	ldr	r1, [r7, #20]
 8001814:	3348      	adds	r3, #72	; 0x48
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d122      	bne.n	800186a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001844:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3248      	adds	r2, #72	; 0x48
 800184a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	3348      	adds	r3, #72	; 0x48
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001884:	e007      	b.n	8001896 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	431a      	orrs	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	401a      	ands	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018b0:	e007      	b.n	80018c2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e0:	f023 0201 	bic.w	r2, r3, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d12e      	bne.n	800197a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fdf4 	bl	8001520 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800193a:	e012      	b.n	8001962 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800193c:	f7ff fdf0 	bl	8001520 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d90b      	bls.n	8001962 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e012      	b.n	8001988 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e5      	bne.n	800193c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e006      	b.n	8001988 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d133      	bne.n	8001a0c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fdb4 	bl	8001520 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ba:	e012      	b.n	80019e2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019bc:	f7ff fdb0 	bl	8001520 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b0a      	cmp	r3, #10
 80019c8:	d90b      	bls.n	80019e2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2205      	movs	r2, #5
 80019da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e01b      	b.n	8001a1a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0e5      	beq.n	80019bc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0202 	bic.w	r2, r2, #2
 80019fe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e006      	b.n	8001a1a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b089      	sub	sp, #36	; 0x24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d003      	beq.n	8001a4e <HAL_CAN_AddTxMessage+0x2c>
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f040 80b8 	bne.w	8001bbe <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a0 	beq.w	8001bae <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	0e1b      	lsrs	r3, r3, #24
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d907      	bls.n	8001a8e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e09e      	b.n	8001bcc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10d      	bne.n	8001abc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	6809      	ldr	r1, [r1, #0]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3318      	adds	r3, #24
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	440b      	add	r3, r1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e00f      	b.n	8001adc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ad0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	440b      	add	r3, r1
 8001ada:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	440b      	add	r3, r1
 8001aec:	3304      	adds	r3, #4
 8001aee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d111      	bne.n	8001b1c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3318      	adds	r3, #24
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	6811      	ldr	r1, [r2, #0]
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3318      	adds	r3, #24
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	440b      	add	r3, r1
 8001b18:	3304      	adds	r3, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3307      	adds	r3, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061a      	lsls	r2, r3, #24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3306      	adds	r3, #6
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3305      	adds	r3, #5
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	4313      	orrs	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	3204      	adds	r2, #4
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	6811      	ldr	r1, [r2, #0]
 8001b44:	ea43 0200 	orr.w	r2, r3, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3303      	adds	r3, #3
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	061a      	lsls	r2, r3, #24
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	4610      	mov	r0, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	ea43 0200 	orr.w	r2, r3, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	440b      	add	r3, r1
 8001b84:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3318      	adds	r3, #24
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	6811      	ldr	r1, [r2, #0]
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	440b      	add	r3, r1
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e00e      	b.n	8001bcc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e006      	b.n	8001bcc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3724      	adds	r7, #36	; 0x24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_GetRxMessage+0x24>
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	f040 80f3 	bne.w	8001de2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0e7      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0d8      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	331b      	adds	r3, #27
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0204 	and.w	r2, r3, #4
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10c      	bne.n	8001c76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	331b      	adds	r3, #27
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0d5b      	lsrs	r3, r3, #21
 8001c6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e00b      	b.n	8001c8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	331b      	adds	r3, #27
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	331b      	adds	r3, #27
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0202 	and.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	331b      	adds	r3, #27
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0a1a      	lsrs	r2, r3, #8
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0c1a      	lsrs	r2, r3, #16
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3302      	adds	r3, #2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e1a      	lsrs	r2, r3, #24
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0a1a      	lsrs	r2, r3, #8
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0c1a      	lsrs	r2, r3, #16
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3306      	adds	r3, #6
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e1a      	lsrs	r2, r3, #24
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3307      	adds	r3, #7
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e006      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d002      	beq.n	8001e1a <HAL_CAN_ActivateNotification+0x1e>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d109      	bne.n	8001e2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6959      	ldr	r1, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_CAN_DeactivateNotification+0x1e>
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d10a      	bne.n	8001e7c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6959      	ldr	r1, [r3, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e006      	b.n	8001e8a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b08a      	sub	sp, #40	; 0x28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d07c      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d023      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f983 	bl	8002204 <HAL_CAN_TxMailbox0CompleteCallback>
 8001efe:	e016      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
 8001f12:	e00c      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	e002      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f989 	bl	8002240 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d024      	beq.n	8001f82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f963 	bl	8002218 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f52:	e016      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e00c      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e002      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f969 	bl	8002254 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f943 	bl	800222c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fa6:	e016      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	e00c      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e002      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f949 	bl	8002268 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2208      	movs	r2, #8
 8002014:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f930 	bl	800227c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe f9f5 	bl	8000424 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2210      	movs	r2, #16
 800205c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00b      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2208      	movs	r2, #8
 8002078:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f912 	bl	80022a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8f9 	bl	8002290 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8fc 	bl	80022b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8f5 	bl	80022cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07b      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d072      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	d043      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03e      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002164:	2b60      	cmp	r3, #96	; 0x60
 8002166:	d02b      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x32a>
 8002168:	2b60      	cmp	r3, #96	; 0x60
 800216a:	d82e      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 800216c:	2b50      	cmp	r3, #80	; 0x50
 800216e:	d022      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x320>
 8002170:	2b50      	cmp	r3, #80	; 0x50
 8002172:	d82a      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d019      	beq.n	80021ac <HAL_CAN_IRQHandler+0x316>
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d826      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 800217c:	2b30      	cmp	r3, #48	; 0x30
 800217e:	d010      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x30c>
 8002180:	2b30      	cmp	r3, #48	; 0x30
 8002182:	d822      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 8002184:	2b10      	cmp	r3, #16
 8002186:	d002      	beq.n	800218e <HAL_CAN_IRQHandler+0x2f8>
 8002188:	2b20      	cmp	r3, #32
 800218a:	d005      	beq.n	8002198 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800218c:	e01d      	b.n	80021ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002196:	e019      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021a0:	e014      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021aa:	e00f      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021b4:	e00a      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021be:	e005      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c8:	e000      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            break;
 80021ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f872 	bl	80022e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff4c 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002476:	f7ff ff61 	bl	800233c <__NVIC_GetPriorityGrouping>
 800247a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff ffb1 	bl	80023e8 <NVIC_EncodePriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff80 	bl	8002394 <__NVIC_SetPriority>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff54 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c6:	e14e      	b.n	8002766 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8140 	beq.w	8002760 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d005      	beq.n	80024f8 <HAL_GPIO_Init+0x40>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d130      	bne.n	800255a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252e:	2201      	movs	r2, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0201 	and.w	r2, r3, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b03      	cmp	r3, #3
 8002564:	d017      	beq.n	8002596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d123      	bne.n	80025ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	6939      	ldr	r1, [r7, #16]
 80025e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 809a 	beq.w	8002760 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	4b55      	ldr	r3, [pc, #340]	; (8002784 <HAL_GPIO_Init+0x2cc>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x2cc>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_GPIO_Init+0x2cc>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1e0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a46      	ldr	r2, [pc, #280]	; (800278c <HAL_GPIO_Init+0x2d4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a45      	ldr	r2, [pc, #276]	; (8002790 <HAL_GPIO_Init+0x2d8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1d8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a44      	ldr	r2, [pc, #272]	; (8002794 <HAL_GPIO_Init+0x2dc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1d4>
 8002688:	2303      	movs	r3, #3
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x1e2>
 800268c:	2305      	movs	r3, #5
 800268e:	e004      	b.n	800269a <HAL_GPIO_Init+0x1e2>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x1e2>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_Init+0x1e2>
 8002698:	2300      	movs	r3, #0
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026aa:	4937      	ldr	r1, [pc, #220]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002706:	4a24      	ldr	r2, [pc, #144]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f aea9 	bne.w	80024c8 <HAL_GPIO_Init+0x10>
  }
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	48000400 	.word	0x48000400
 8002790:	48000800 	.word	0x48000800
 8002794:	48000c00 	.word	0x48000c00
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027aa:	e0b2      	b.n	8002912 <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027ac:	2201      	movs	r2, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a5 	beq.w	800290c <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_DeInit+0x194>)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_DeInit+0x78>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_GPIO_DeInit+0x198>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_DeInit+0x74>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_GPIO_DeInit+0x19c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_DeInit+0x70>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a4f      	ldr	r2, [pc, #316]	; (800293c <HAL_GPIO_DeInit+0x1a0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_DeInit+0x6c>
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_GPIO_DeInit+0x7a>
 8002808:	2305      	movs	r3, #5
 800280a:	e004      	b.n	8002816 <HAL_GPIO_DeInit+0x7a>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_DeInit+0x7a>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_DeInit+0x7a>
 8002814:	2300      	movs	r3, #0
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	429a      	cmp	r2, r3
 8002824:	d132      	bne.n	800288c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	4944      	ldr	r1, [pc, #272]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 8002830:	4013      	ands	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002834:	4b42      	ldr	r3, [pc, #264]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	4940      	ldr	r1, [pc, #256]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 800283e:	4013      	ands	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002842:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	493d      	ldr	r1, [pc, #244]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 800284c:	4013      	ands	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	4939      	ldr	r1, [pc, #228]	; (8002940 <HAL_GPIO_DeInit+0x1a4>)
 800285a:	4013      	ands	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800286e:	4a30      	ldr	r2, [pc, #192]	; (8002930 <HAL_GPIO_DeInit+0x194>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	43da      	mvns	r2, r3
 800287e:	482c      	ldr	r0, [pc, #176]	; (8002930 <HAL_GPIO_DeInit+0x194>)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	400a      	ands	r2, r1
 8002886:	3302      	adds	r3, #2
 8002888:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2103      	movs	r1, #3
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	08d2      	lsrs	r2, r2, #3
 80028c2:	4019      	ands	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2103      	movs	r1, #3
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	401a      	ands	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	2101      	movs	r1, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2103      	movs	r1, #3
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f af46 	bne.w	80027ac <HAL_GPIO_DeInit+0x10>
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000
 8002934:	48000400 	.word	0x48000400
 8002938:	48000800 	.word	0x48000800
 800293c:	48000c00 	.word	0x48000c00
 8002940:	40010400 	.word	0x40010400

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002960:	e002      	b.n	8002968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af06      	add	r7, sp, #24
 800297a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0d0      	b.n	8002b28 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f00a f9ee 	bl	800cd7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fb9e 	bl	80060ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e04c      	b.n	8002a52 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3301      	adds	r3, #1
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	b298      	uxth	r0, r3
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3336      	adds	r3, #54	; 0x36
 80029f6:	4602      	mov	r2, r0
 80029f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3338      	adds	r3, #56	; 0x38
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	333c      	adds	r3, #60	; 0x3c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3340      	adds	r3, #64	; 0x40
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d3ad      	bcc.n	80029b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e044      	b.n	8002aec <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3b5      	bcc.n	8002a62 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	687e      	ldr	r6, [r7, #4]
 8002afe:	466d      	mov	r5, sp
 8002b00:	f106 0410 	add.w	r4, r6, #16
 8002b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	1d33      	adds	r3, r6, #4
 8002b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b10:	6838      	ldr	r0, [r7, #0]
 8002b12:	f003 fb07 	bl	8006124 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_Start+0x16>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e016      	b.n	8002b74 <HAL_PCD_Start+0x44>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fab4 	bl	80060c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b58:	2101      	movs	r1, #1
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f00a fb8e 	bl	800d27c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 fcc9 	bl	80084fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 fcc2 	bl	8008512 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	d102      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 faf6 	bl	800318c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 fcb4 	bl	8008512 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d112      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f00a f957 	bl	800ce82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8c7 	bl	8002d6a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 fc96 	bl	8008512 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fc7f 	bl	8008512 <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d10b      	bne.n	8002c38 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c32:	b292      	uxth	r2, r2
 8002c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f005 fc68 	bl	8008512 <USB_ReadInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d126      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0204 	bic.w	r2, r2, #4
 8002c60:	b292      	uxth	r2, r2
 8002c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0208 	bic.w	r2, r2, #8
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f00a f938 	bl	800cef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fc36 	bl	8008512 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb0:	d126      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0208 	orr.w	r2, r2, #8
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0204 	orr.w	r2, r2, #4
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f00a f8e0 	bl	800cec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 fc04 	bl	8008512 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d14:	d10e      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f00a f899 	bl	800ce66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fbea 	bl	8008512 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d10b      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_PCD_SetAddress+0x1a>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e013      	b.n	8002dac <HAL_PCD_SetAddress+0x42>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f005 fb99 	bl	80084d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	70fb      	strb	r3, [r7, #3]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	803b      	strh	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0e      	bge.n	8002df8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	705a      	strb	r2, [r3, #1]
 8002df6:	e00e      	b.n	8002e16 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0207 	and.w	r2, r3, #7
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e22:	883a      	ldrh	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e40:	78bb      	ldrb	r3, [r7, #2]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_PCD_EP_Open+0xa6>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e00e      	b.n	8002e78 <HAL_PCD_EP_Open+0xc4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 f97d 	bl	8006168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0e      	bge.n	8002eb2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	705a      	strb	r2, [r3, #1]
 8002eb0:	e00e      	b.n	8002ed0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0207 	and.w	r2, r3, #7
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_PCD_EP_Close+0x6a>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e00e      	b.n	8002f08 <HAL_PCD_EP_Close+0x88>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fcc9 	bl	8006890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	7afb      	ldrb	r3, [r7, #11]
 8002f22:	f003 0207 	and.w	r2, r3, #7
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fe7c 	bl	8006c6a <USB_EPStartXfer>
 8002f72:	e005      	b.n	8002f80 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fe75 	bl	8006c6a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 0207 	and.w	r2, r3, #7
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002fac:	681b      	ldr	r3, [r3, #0]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	b2da      	uxtb	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003012:	7afb      	ldrb	r3, [r7, #11]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fe21 	bl	8006c6a <USB_EPStartXfer>
 8003028:	e005      	b.n	8003036 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fe1a 	bl	8006c6a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d901      	bls.n	800305e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e03e      	b.n	80030dc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800305e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003062:	2b00      	cmp	r3, #0
 8003064:	da0e      	bge.n	8003084 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	705a      	strb	r2, [r3, #1]
 8003082:	e00c      	b.n	800309e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_PCD_EP_SetStall+0x7e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e00e      	b.n	80030dc <HAL_PCD_EP_SetStall+0x9c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f005 f902 	bl	80082d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d901      	bls.n	8003102 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e040      	b.n	8003184 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	da0e      	bge.n	8003128 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
 8003126:	e00e      	b.n	8003146 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_PCD_EP_ClrStall+0x82>
 8003162:	2302      	movs	r3, #2
 8003164:	e00e      	b.n	8003184 <HAL_PCD_EP_ClrStall+0xa0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	4618      	mov	r0, r3
 8003176:	f005 f8ff 	bl	8008378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b096      	sub	sp, #88	; 0x58
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003194:	e39b      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800319e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80031b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 815e 	bne.w	8003476 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80031ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d150      	bne.n	8003268 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	81fb      	strh	r3, [r7, #14]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	89fb      	ldrh	r3, [r7, #14]
 80031de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3328      	adds	r3, #40	; 0x28
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	4413      	add	r3, r2
 800320a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003216:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	441a      	add	r2, r3
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f009 fe02 	bl	800ce32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8349 	beq.w	80038ce <PCD_EP_ISR_Handler+0x742>
 800323c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 8344 	bne.w	80038ce <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003252:	b2da      	uxtb	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b292      	uxth	r2, r2
 800325a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003266:	e332      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800326e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800327a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800327e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003282:	2b00      	cmp	r3, #0
 8003284:	d032      	beq.n	80032ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f005 f978 	bl	80085b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032d2:	4013      	ands	r3, r2
 80032d4:	823b      	strh	r3, [r7, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	8a3a      	ldrh	r2, [r7, #16]
 80032dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e0:	b292      	uxth	r2, r2
 80032e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f009 fd77 	bl	800cdd8 <HAL_PCD_SetupStageCallback>
 80032ea:	e2f0      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f280 82ec 	bge.w	80038ce <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003302:	4013      	ands	r3, r2
 8003304:	83fb      	strh	r3, [r7, #30]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	8bfa      	ldrh	r2, [r7, #30]
 800330c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003310:	b292      	uxth	r2, r2
 8003312:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d019      	beq.n	8003378 <PCD_EP_ISR_Handler+0x1ec>
 8003344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	6959      	ldr	r1, [r3, #20]
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800335c:	b29b      	uxth	r3, r3
 800335e:	f005 f92a 	bl	80085b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	441a      	add	r2, r3
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f009 fd42 	bl	800cdfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 82a2 	bne.w	80038ce <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d112      	bne.n	80033d8 <PCD_EP_ISR_Handler+0x24c>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033bc:	b29a      	uxth	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	e02f      	b.n	8003438 <PCD_EP_ISR_Handler+0x2ac>
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b3e      	cmp	r3, #62	; 0x3e
 80033de:	d813      	bhi.n	8003408 <PCD_EP_ISR_Handler+0x27c>
 80033e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	647b      	str	r3, [r7, #68]	; 0x44
 80033e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <PCD_EP_ISR_Handler+0x26e>
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	3301      	adds	r3, #1
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	b29a      	uxth	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	e017      	b.n	8003438 <PCD_EP_ISR_Handler+0x2ac>
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	647b      	str	r3, [r7, #68]	; 0x44
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <PCD_EP_ISR_Handler+0x296>
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	3b01      	subs	r3, #1
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003424:	b29b      	uxth	r3, r3
 8003426:	029b      	lsls	r3, r3, #10
 8003428:	b29b      	uxth	r3, r3
 800342a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003432:	b29a      	uxth	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	827b      	strh	r3, [r7, #18]
 800344a:	8a7b      	ldrh	r3, [r7, #18]
 800344c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003450:	827b      	strh	r3, [r7, #18]
 8003452:	8a7b      	ldrh	r3, [r7, #18]
 8003454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003458:	827b      	strh	r3, [r7, #18]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	8a7b      	ldrh	r3, [r7, #18]
 8003460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003470:	b29b      	uxth	r3, r3
 8003472:	8013      	strh	r3, [r2, #0]
 8003474:	e22b      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800348a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800348e:	2b00      	cmp	r3, #0
 8003490:	f280 80f6 	bge.w	8003680 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034aa:	4013      	ands	r3, r2
 80034ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80034c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034c6:	b292      	uxth	r2, r2
 80034c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80034ca:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80034e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e2:	7b1b      	ldrb	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d123      	bne.n	8003530 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4413      	add	r3, r2
 8003502:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003510:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 808e 	beq.w	8003636 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003520:	6959      	ldr	r1, [r3, #20]
 8003522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003524:	88da      	ldrh	r2, [r3, #6]
 8003526:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800352a:	f005 f844 	bl	80085b6 <USB_ReadPMA>
 800352e:	e082      	b.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	78db      	ldrb	r3, [r3, #3]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d10a      	bne.n	800354e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003538:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800353c:	461a      	mov	r2, r3
 800353e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9d2 	bl	80038ea <HAL_PCD_EP_DB_Receive>
 8003546:	4603      	mov	r3, r0
 8003548:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800354c:	e073      	b.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800357e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800358e:	b29b      	uxth	r3, r3
 8003590:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d022      	beq.n	80035f2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80035d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02c      	beq.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e2:	6959      	ldr	r1, [r3, #20]
 80035e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e6:	891a      	ldrh	r2, [r3, #8]
 80035e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035ec:	f004 ffe3 	bl	80085b6 <USB_ReadPMA>
 80035f0:	e021      	b.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	4413      	add	r3, r2
 800360c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003616:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800361a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	6959      	ldr	r1, [r3, #20]
 800362a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362c:	895a      	ldrh	r2, [r3, #10]
 800362e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003632:	f004 ffc0 	bl	80085b6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800363e:	441a      	add	r2, r3
 8003640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003642:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800364c:	441a      	add	r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <PCD_EP_ISR_Handler+0x4da>
 800365a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	d206      	bcs.n	8003674 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f009 fbc5 	bl	800cdfc <HAL_PCD_DataOutStageCallback>
 8003672:	e005      	b.n	8003680 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800367a:	4618      	mov	r0, r3
 800367c:	f003 faf5 	bl	8006c6a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003680:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8120 	beq.w	80038ce <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 800368e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80036d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036da:	b29b      	uxth	r3, r3
 80036dc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	78db      	ldrb	r3, [r3, #3]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f000 809d 	beq.w	8003822 <PCD_EP_ISR_Handler+0x696>
        {
          ep->xfer_len = 0U;
 80036e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d046      	beq.n	8003788 <PCD_EP_ISR_Handler+0x5fc>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d126      	bne.n	8003750 <PCD_EP_ISR_Handler+0x5c4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	4413      	add	r3, r2
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	4413      	add	r3, r2
 8003724:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003734:	b29a      	uxth	r2, r3
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	e061      	b.n	8003814 <PCD_EP_ISR_Handler+0x688>
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d15d      	bne.n	8003814 <PCD_EP_ISR_Handler+0x688>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	4413      	add	r3, r2
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00da      	lsls	r2, r3, #3
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	4413      	add	r3, r2
 800377a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	2200      	movs	r2, #0
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	e045      	b.n	8003814 <PCD_EP_ISR_Handler+0x688>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d126      	bne.n	80037e4 <PCD_EP_ISR_Handler+0x658>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	4413      	add	r3, r2
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	00da      	lsls	r2, r3, #3
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	4413      	add	r3, r2
 80037b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	e017      	b.n	8003814 <PCD_EP_ISR_Handler+0x688>
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d113      	bne.n	8003814 <PCD_EP_ISR_Handler+0x688>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	4413      	add	r3, r2
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	00da      	lsls	r2, r3, #3
 8003804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003806:	4413      	add	r3, r2
 8003808:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2200      	movs	r2, #0
 8003812:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f009 fb09 	bl	800ce32 <HAL_PCD_DataInStageCallback>
 8003820:	e055      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	78db      	ldrb	r3, [r3, #3]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d14a      	bne.n	80038c0 <PCD_EP_ISR_Handler+0x734>
 800382a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d144      	bne.n	80038c0 <PCD_EP_ISR_Handler+0x734>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	4413      	add	r3, r2
 8003850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800385e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003866:	429a      	cmp	r2, r3
 8003868:	d907      	bls.n	800387a <PCD_EP_ISR_Handler+0x6ee>
          {
            ep->xfer_len -= TxByteNbre;
 800386a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003876:	619a      	str	r2, [r3, #24]
 8003878:	e002      	b.n	8003880 <PCD_EP_ISR_Handler+0x6f4>
          }
          else
          {
            ep->xfer_len = 0U;
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <PCD_EP_ISR_Handler+0x70a>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f009 facf 	bl	800ce32 <HAL_PCD_DataInStageCallback>
 8003894:	e01b      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800389e:	441a      	add	r2, r3
 80038a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80038ac:	441a      	add	r2, r3
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 f9d6 	bl	8006c6a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80038be:	e006      	b.n	80038ce <PCD_EP_ISR_Handler+0x742>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038c4:	461a      	mov	r2, r3
 80038c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f917 	bl	8003afc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b21b      	sxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f6ff ac5b 	blt.w	8003196 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3758      	adds	r7, #88	; 0x58
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b088      	sub	sp, #32
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07c      	beq.n	80039fc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4413      	add	r3, r2
 800391c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003926:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	8b7b      	ldrh	r3, [r7, #26]
 800392e:	429a      	cmp	r2, r3
 8003930:	d306      	bcc.n	8003940 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	619a      	str	r2, [r3, #24]
 800393e:	e002      	b.n	8003946 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d123      	bne.n	8003996 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	833b      	strh	r3, [r7, #24]
 800396a:	8b3b      	ldrh	r3, [r7, #24]
 800396c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003970:	833b      	strh	r3, [r7, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	8b3b      	ldrh	r3, [r7, #24]
 8003982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01f      	beq.n	80039e0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	82fb      	strh	r3, [r7, #22]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039dc:	b29b      	uxth	r3, r3
 80039de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039e0:	8b7b      	ldrh	r3, [r7, #26]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8085 	beq.w	8003af2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6959      	ldr	r1, [r3, #20]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	891a      	ldrh	r2, [r3, #8]
 80039f4:	8b7b      	ldrh	r3, [r7, #26]
 80039f6:	f004 fdde 	bl	80085b6 <USB_ReadPMA>
 80039fa:	e07a      	b.n	8003af2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	8b7b      	ldrh	r3, [r7, #26]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d306      	bcc.n	8003a3a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	619a      	str	r2, [r3, #24]
 8003a38:	e002      	b.n	8003a40 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d123      	bne.n	8003a90 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	83fb      	strh	r3, [r7, #30]
 8003a64:	8bfb      	ldrh	r3, [r7, #30]
 8003a66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a6a:	83fb      	strh	r3, [r7, #30]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	8bfb      	ldrh	r3, [r7, #30]
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11f      	bne.n	8003ada <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	83bb      	strh	r3, [r7, #28]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	441a      	add	r2, r3
 8003ac4:	8bbb      	ldrh	r3, [r7, #28]
 8003ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ada:	8b7b      	ldrh	r3, [r7, #26]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6959      	ldr	r1, [r3, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	895a      	ldrh	r2, [r3, #10]
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
 8003aee:	f004 fd62 	bl	80085b6 <USB_ReadPMA>
    }
  }

  return count;
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b0a2      	sub	sp, #136	; 0x88
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 81c5 	beq.w	8003ea0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d907      	bls.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	619a      	str	r2, [r3, #24]
 8003b58:	e002      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f040 80b9 	bne.w	8003cdc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d126      	bne.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	4413      	add	r3, r2
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00da      	lsls	r2, r3, #3
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	4413      	add	r3, r2
 8003b94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	e01a      	b.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	785b      	ldrb	r3, [r3, #1]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d116      	bne.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	4413      	add	r3, r2
 8003bde:	633b      	str	r3, [r7, #48]	; 0x30
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	00da      	lsls	r2, r3, #3
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	4413      	add	r3, r2
 8003bea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d126      	bne.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x156>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4413      	add	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	00da      	lsls	r2, r3, #3
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4413      	add	r3, r2
 8003c26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	e017      	b.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d113      	bne.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	4413      	add	r3, r2
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	00da      	lsls	r2, r3, #3
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	4413      	add	r3, r2
 8003c76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4619      	mov	r1, r3
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f009 f8d2 	bl	800ce32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 82d2 	beq.w	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb4:	827b      	strh	r3, [r7, #18]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	441a      	add	r2, r3
 8003cc4:	8a7b      	ldrh	r3, [r7, #18]
 8003cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8013      	strh	r3, [r2, #0]
 8003cda:	e2b0      	b.n	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	441a      	add	r2, r3
 8003d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 8284 	bne.w	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d3e:	441a      	add	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d309      	bcc.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	1ad2      	subs	r2, r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	621a      	str	r2, [r3, #32]
 8003d70:	e015      	b.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d107      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8003d7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d88:	e009      	b.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d155      	bne.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x356>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	4413      	add	r3, r2
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00da      	lsls	r2, r3, #3
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d112      	bne.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x2fe>
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	e047      	b.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfe:	d811      	bhi.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x328>
 8003e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x31a>
 8003e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e12:	3301      	adds	r3, #1
 8003e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	029b      	lsls	r3, r3, #10
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	e032      	b.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x33e>
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	3b01      	subs	r3, #1
 8003e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	801a      	strh	r2, [r3, #0]
 8003e50:	e01b      	b.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d117      	bne.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	4413      	add	r3, r2
 8003e70:	643b      	str	r3, [r7, #64]	; 0x40
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	00da      	lsls	r2, r3, #3
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6959      	ldr	r1, [r3, #20]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	891a      	ldrh	r2, [r3, #8]
 8003e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f004 fb4a 	bl	8008532 <USB_WritePMA>
 8003e9e:	e1ce      	b.n	800423e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d307      	bcc.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003edc:	1ad2      	subs	r2, r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	619a      	str	r2, [r3, #24]
 8003ee2:	e002      	b.n	8003eea <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80c4 	bne.w	800407c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d126      	bne.n	8003f4a <HAL_PCD_EP_DB_Transmit+0x44e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	4413      	add	r3, r2
 8003f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	00da      	lsls	r2, r3, #3
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f32:	801a      	strh	r2, [r3, #0]
 8003f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	e01a      	b.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x484>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d116      	bne.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x484>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	677b      	str	r3, [r7, #116]	; 0x74
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	4413      	add	r3, r2
 8003f68:	677b      	str	r3, [r7, #116]	; 0x74
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00da      	lsls	r2, r3, #3
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	4413      	add	r3, r2
 8003f74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f78:	673b      	str	r3, [r7, #112]	; 0x70
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12f      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	00da      	lsls	r2, r3, #3
 8003fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e017      	b.n	800401e <HAL_PCD_EP_DB_Transmit+0x522>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d113      	bne.n	800401e <HAL_PCD_EP_DB_Transmit+0x522>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004004:	4413      	add	r3, r2
 8004006:	67bb      	str	r3, [r7, #120]	; 0x78
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00da      	lsls	r2, r3, #3
 800400e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004010:	4413      	add	r3, r2
 8004012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401a:	2200      	movs	r2, #0
 800401c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f008 ff04 	bl	800ce32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8104 	bne.w	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]
 800407a:	e0e0      	b.n	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 80b4 	bne.w	800423e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040de:	441a      	add	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ec:	441a      	add	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d309      	bcc.n	8004112 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	621a      	str	r2, [r3, #32]
 8004110:	e015      	b.n	800413e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 800411a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800411e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004128:	e009      	b.n	800413e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d155      	bne.n	80041f8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004160:	4413      	add	r3, r2
 8004162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00da      	lsls	r2, r3, #3
 800416a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416c:	4413      	add	r3, r2
 800416e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004172:	65bb      	str	r3, [r7, #88]	; 0x58
 8004174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004176:	2b00      	cmp	r3, #0
 8004178:	d112      	bne.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x6a4>
 800417a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004184:	b29a      	uxth	r2, r3
 8004186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29a      	uxth	r2, r3
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	e044      	b.n	800422a <HAL_PCD_EP_DB_Transmit+0x72e>
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	2b3e      	cmp	r3, #62	; 0x3e
 80041a4:	d811      	bhi.n	80041ca <HAL_PCD_EP_DB_Transmit+0x6ce>
 80041a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_PCD_EP_DB_Transmit+0x6c0>
 80041b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b8:	3301      	adds	r3, #1
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
 80041bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041be:	b29b      	uxth	r3, r3
 80041c0:	029b      	lsls	r3, r3, #10
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e02f      	b.n	800422a <HAL_PCD_EP_DB_Transmit+0x72e>
 80041ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
 80041d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x6e4>
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	3b01      	subs	r3, #1
 80041de:	657b      	str	r3, [r7, #84]	; 0x54
 80041e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e018      	b.n	800422a <HAL_PCD_EP_DB_Transmit+0x72e>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d114      	bne.n	800422a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420e:	4413      	add	r3, r2
 8004210:	667b      	str	r3, [r7, #100]	; 0x64
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	00da      	lsls	r2, r3, #3
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	4413      	add	r3, r2
 800421c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004220:	663b      	str	r3, [r7, #96]	; 0x60
 8004222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004224:	b29a      	uxth	r2, r3
 8004226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004228:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6959      	ldr	r1, [r3, #20]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	895a      	ldrh	r2, [r3, #10]
 8004236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004238:	b29b      	uxth	r3, r3
 800423a:	f004 f97a 	bl	8008532 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004258:	823b      	strh	r3, [r7, #16]
 800425a:	8a3b      	ldrh	r3, [r7, #16]
 800425c:	f083 0310 	eor.w	r3, r3, #16
 8004260:	823b      	strh	r3, [r7, #16]
 8004262:	8a3b      	ldrh	r3, [r7, #16]
 8004264:	f083 0320 	eor.w	r3, r3, #32
 8004268:	823b      	strh	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	441a      	add	r2, r3
 8004278:	8a3b      	ldrh	r3, [r7, #16]
 800427a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428a:	b29b      	uxth	r3, r3
 800428c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3788      	adds	r7, #136	; 0x88
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	4613      	mov	r3, r2
 80042a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e009      	b.n	80042e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ce:	897a      	ldrh	r2, [r7, #10]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2200      	movs	r2, #0
 80042ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	80da      	strh	r2, [r3, #6]
 80042f6:	e00b      	b.n	8004310 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2201      	movs	r2, #1
 80042fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	b29a      	uxth	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b29a      	uxth	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004326:	af00      	add	r7, sp, #0
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004330:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	f001 b823 	b.w	800538c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 817d 	beq.w	8004656 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800435c:	4bbc      	ldr	r3, [pc, #752]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b04      	cmp	r3, #4
 8004366:	d00c      	beq.n	8004382 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004368:	4bb9      	ldr	r3, [pc, #740]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d15c      	bne.n	800442e <HAL_RCC_OscConfig+0x10e>
 8004374:	4bb6      	ldr	r3, [pc, #728]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d155      	bne.n	800442e <HAL_RCC_OscConfig+0x10e>
 8004382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004396:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_OscConfig+0x94>
 80043ae:	4ba8      	ldr	r3, [pc, #672]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e015      	b.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80043dc:	4b9c      	ldr	r3, [pc, #624]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80043f8:	fab2 f282 	clz	r2, r2
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	f042 0220 	orr.w	r2, r2, #32
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	f002 021f 	and.w	r2, r2, #31
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 811f 	beq.w	8004654 <HAL_RCC_OscConfig+0x334>
 8004416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 8116 	bne.w	8004654 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f000 bfaf 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800442e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x12e>
 8004440:	4b83      	ldr	r3, [pc, #524]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a82      	ldr	r2, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e036      	b.n	80044bc <HAL_RCC_OscConfig+0x19c>
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x158>
 800445e:	4b7c      	ldr	r3, [pc, #496]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7b      	ldr	r2, [pc, #492]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a78      	ldr	r2, [pc, #480]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e021      	b.n	80044bc <HAL_RCC_OscConfig+0x19c>
 8004478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x184>
 800448a:	4b71      	ldr	r3, [pc, #452]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a70      	ldr	r2, [pc, #448]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b6e      	ldr	r3, [pc, #440]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0x19c>
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a69      	ldr	r2, [pc, #420]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b67      	ldr	r3, [pc, #412]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a66      	ldr	r2, [pc, #408]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044bc:	4b64      	ldr	r3, [pc, #400]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f023 020f 	bic.w	r2, r3, #15
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	495f      	ldr	r1, [pc, #380]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d059      	beq.n	800459a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fd f81b 	bl	8001520 <HAL_GetTick>
 80044ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fd f816 	bl	8001520 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d902      	bls.n	8004506 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	f000 bf43 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 8004506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800451a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d102      	bne.n	8004538 <HAL_RCC_OscConfig+0x218>
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	e015      	b.n	8004564 <HAL_RCC_OscConfig+0x244>
 8004538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800454c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004550:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004560:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004568:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800456c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004570:	fa92 f2a2 	rbit	r2, r2
 8004574:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004578:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800457c:	fab2 f282 	clz	r2, r2
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	f042 0220 	orr.w	r2, r2, #32
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f002 021f 	and.w	r2, r2, #31
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ab      	beq.n	80044f0 <HAL_RCC_OscConfig+0x1d0>
 8004598:	e05d      	b.n	8004656 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fc ffc1 	bl	8001520 <HAL_GetTick>
 800459e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fc ffbc 	bl	8001520 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d902      	bls.n	80045ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	f000 bee9 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 80045ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80045ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0x2cc>
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e015      	b.n	8004618 <HAL_RCC_OscConfig+0x2f8>
 80045ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004604:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004608:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800461c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004620:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004624:	fa92 f2a2 	rbit	r2, r2
 8004628:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800462c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004630:	fab2 f282 	clz	r2, r2
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ab      	bne.n	80045a4 <HAL_RCC_OscConfig+0x284>
 800464c:	e003      	b.n	8004656 <HAL_RCC_OscConfig+0x336>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 817d 	beq.w	8004966 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800466c:	4ba6      	ldr	r3, [pc, #664]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004678:	4ba3      	ldr	r3, [pc, #652]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b08      	cmp	r3, #8
 8004682:	d172      	bne.n	800476a <HAL_RCC_OscConfig+0x44a>
 8004684:	4ba0      	ldr	r3, [pc, #640]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d16c      	bne.n	800476a <HAL_RCC_OscConfig+0x44a>
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80046a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_OscConfig+0x3a0>
 80046ba:	4b93      	ldr	r3, [pc, #588]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e013      	b.n	80046e8 <HAL_RCC_OscConfig+0x3c8>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046d2:	2302      	movs	r3, #2
 80046d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046e4:	4b88      	ldr	r3, [pc, #544]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2202      	movs	r2, #2
 80046ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCC_OscConfig+0x410>
 800471a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f000 be2e 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004730:	4b75      	ldr	r3, [pc, #468]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	21f8      	movs	r1, #248	; 0xf8
 8004746:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800474e:	fa91 f1a1 	rbit	r1, r1
 8004752:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004756:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800475a:	fab1 f181 	clz	r1, r1
 800475e:	b2c9      	uxtb	r1, r1
 8004760:	408b      	lsls	r3, r1
 8004762:	4969      	ldr	r1, [pc, #420]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004768:	e0fd      	b.n	8004966 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8088 	beq.w	800488c <HAL_RCC_OscConfig+0x56c>
 800477c:	2301      	movs	r3, #1
 800477e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800478e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800479c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	2301      	movs	r3, #1
 80047a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fc feba 	bl	8001520 <HAL_GetTick>
 80047ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fc feb5 	bl	8001520 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d902      	bls.n	80047c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	f000 bde2 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4d8>
 80047f2:	4b45      	ldr	r3, [pc, #276]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	e013      	b.n	8004820 <HAL_RCC_OscConfig+0x500>
 80047f8:	2302      	movs	r3, #2
 80047fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800480a:	2302      	movs	r3, #2
 800480c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004810:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800481c:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2202      	movs	r2, #2
 8004822:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004826:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800482a:	fa92 f2a2 	rbit	r2, r2
 800482e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004832:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004836:	fab2 f282 	clz	r2, r2
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	f042 0220 	orr.w	r2, r2, #32
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f002 021f 	and.w	r2, r2, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f202 	lsl.w	r2, r1, r2
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0af      	beq.n	80047b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	21f8      	movs	r1, #248	; 0xf8
 8004868:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004870:	fa91 f1a1 	rbit	r1, r1
 8004874:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004878:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800487c:	fab1 f181 	clz	r1, r1
 8004880:	b2c9      	uxtb	r1, r1
 8004882:	408b      	lsls	r3, r1
 8004884:	4920      	ldr	r1, [pc, #128]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
 800488a:	e06c      	b.n	8004966 <HAL_RCC_OscConfig+0x646>
 800488c:	2301      	movs	r3, #1
 800488e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800489e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fc fe32 	bl	8001520 <HAL_GetTick>
 80048bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c2:	f7fc fe2d 	bl	8001520 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d902      	bls.n	80048d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	f000 bd5a 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 80048d8:	2302      	movs	r3, #2
 80048da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d104      	bne.n	800490c <HAL_RCC_OscConfig+0x5ec>
 8004902:	4b01      	ldr	r3, [pc, #4]	; (8004908 <HAL_RCC_OscConfig+0x5e8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	e015      	b.n	8004934 <HAL_RCC_OscConfig+0x614>
 8004908:	40021000 	.word	0x40021000
 800490c:	2302      	movs	r3, #2
 800490e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800491e:	2302      	movs	r3, #2
 8004920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004930:	4bc8      	ldr	r3, [pc, #800]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2202      	movs	r2, #2
 8004936:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800493a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800493e:	fa92 f2a2 	rbit	r2, r2
 8004942:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004946:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800494a:	fab2 f282 	clz	r2, r2
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	f042 0220 	orr.w	r2, r2, #32
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	f002 021f 	and.w	r2, r2, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ad      	bne.n	80048c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8110 	beq.w	8004b9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800497c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d079      	beq.n	8004a80 <HAL_RCC_OscConfig+0x760>
 800498c:	2301      	movs	r3, #1
 800498e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	4bab      	ldr	r3, [pc, #684]	; (8004c58 <HAL_RCC_OscConfig+0x938>)
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	461a      	mov	r2, r3
 80049b2:	2301      	movs	r3, #1
 80049b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fc fdb3 	bl	8001520 <HAL_GetTick>
 80049ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fc fdae 	bl	8001520 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	f000 bcdb 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 80049d6:	2302      	movs	r3, #2
 80049d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049f0:	2202      	movs	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	fa93 f2a3 	rbit	r2, r3
 8004a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	2202      	movs	r2, #2
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	fa93 f2a3 	rbit	r2, r3
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a30:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	6019      	str	r1, [r3, #0]
 8004a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	fa93 f1a3 	rbit	r1, r3
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a56:	6019      	str	r1, [r3, #0]
  return result;
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0a0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x6a0>
 8004a7e:	e08d      	b.n	8004b9c <HAL_RCC_OscConfig+0x87c>
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	fa93 f2a3 	rbit	r2, r3
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004aa2:	601a      	str	r2, [r3, #0]
  return result;
 8004aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004aac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCC_OscConfig+0x938>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	461a      	mov	r2, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fd2d 	bl	8001520 <HAL_GetTick>
 8004ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fc fd28 	bl	8001520 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d902      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	f000 bc55 	b.w	800538c <HAL_RCC_OscConfig+0x106c>
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aea:	2202      	movs	r2, #2
 8004aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fa93 f2a3 	rbit	r2, r3
 8004afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b0e:	2202      	movs	r2, #2
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	fa93 f2a3 	rbit	r2, r3
 8004b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b32:	2202      	movs	r2, #2
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	fa93 f2a3 	rbit	r2, r3
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	fa93 f1a3 	rbit	r1, r3
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b74:	6019      	str	r1, [r3, #0]
  return result;
 8004b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	fab3 f383 	clz	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d197      	bne.n	8004acc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 81a1 	beq.w	8004ef4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb8:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d116      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	61d3      	str	r3, [r2, #28]
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_OscConfig+0x93c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfe:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <HAL_RCC_OscConfig+0x93c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <HAL_RCC_OscConfig+0x93c>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0a:	f7fc fc89 	bl	8001520 <HAL_GetTick>
 8004c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	e009      	b.n	8004c28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fc fc84 	bl	8001520 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e3b1      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCC_OscConfig+0x93c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCC_OscConfig+0x940>
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	4a02      	ldr	r2, [pc, #8]	; (8004c54 <HAL_RCC_OscConfig+0x934>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6213      	str	r3, [r2, #32]
 8004c50:	e03c      	b.n	8004ccc <HAL_RCC_OscConfig+0x9ac>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	10908120 	.word	0x10908120
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCC_OscConfig+0x96a>
 8004c70:	4bc1      	ldr	r3, [pc, #772]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4ac0      	ldr	r2, [pc, #768]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	6213      	str	r3, [r2, #32]
 8004c7c:	4bbe      	ldr	r3, [pc, #760]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4abd      	ldr	r2, [pc, #756]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004c82:	f023 0304 	bic.w	r3, r3, #4
 8004c86:	6213      	str	r3, [r2, #32]
 8004c88:	e020      	b.n	8004ccc <HAL_RCC_OscConfig+0x9ac>
 8004c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x994>
 8004c9a:	4bb7      	ldr	r3, [pc, #732]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4ab6      	ldr	r2, [pc, #728]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6213      	str	r3, [r2, #32]
 8004ca6:	4bb4      	ldr	r3, [pc, #720]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	4ab3      	ldr	r2, [pc, #716]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6213      	str	r3, [r2, #32]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0x9ac>
 8004cb4:	4bb0      	ldr	r3, [pc, #704]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4aaf      	ldr	r2, [pc, #700]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6213      	str	r3, [r2, #32]
 8004cc0:	4bad      	ldr	r3, [pc, #692]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4aac      	ldr	r2, [pc, #688]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8081 	beq.w	8004de0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cde:	f7fc fc1f 	bl	8001520 <HAL_GetTick>
 8004ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fc fc1a 	bl	8001520 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e345      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d08:	2202      	movs	r2, #2
 8004d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	fa93 f2a3 	rbit	r2, r3
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d46:	601a      	str	r2, [r3, #0]
  return result;
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_OscConfig+0xa4c>
 8004d66:	4b84      	ldr	r3, [pc, #528]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	e013      	b.n	8004d94 <HAL_RCC_OscConfig+0xa74>
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d74:	2202      	movs	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	fa92 f1a2 	rbit	r1, r2
 8004dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004db6:	6011      	str	r1, [r2, #0]
  return result;
 8004db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	fab2 f282 	clz	r2, r2
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f002 021f 	and.w	r2, r2, #31
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d084      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x9c8>
 8004dde:	e07f      	b.n	8004ee0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de0:	f7fc fb9e 	bl	8001520 <HAL_GetTick>
 8004de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	e00b      	b.n	8004e02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fc fb99 	bl	8001520 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e2c4      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e2e:	2202      	movs	r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	fa93 f2a3 	rbit	r2, r3
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e48:	601a      	str	r2, [r3, #0]
  return result;
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d102      	bne.n	8004e6e <HAL_RCC_OscConfig+0xb4e>
 8004e68:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	e013      	b.n	8004e96 <HAL_RCC_OscConfig+0xb76>
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e76:	2202      	movs	r2, #2
 8004e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	fa92 f1a2 	rbit	r1, r2
 8004eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eb4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004eb8:	6011      	str	r1, [r2, #0]
  return result;
 8004eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ebe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	fab2 f282 	clz	r2, r2
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f002 021f 	and.w	r2, r2, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d184      	bne.n	8004dea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8242 	beq.w	800538a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <HAL_RCC_OscConfig+0xc58>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	f000 8213 	beq.w	800533a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	f040 8162 	bne.w	80051ea <HAL_RCC_OscConfig+0xeca>
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	fa93 f2a3 	rbit	r2, r3
 8004f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f4a:	601a      	str	r2, [r3, #0]
  return result;
 8004f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fad8 	bl	8001520 <HAL_GetTick>
 8004f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f74:	e00c      	b.n	8004f90 <HAL_RCC_OscConfig+0xc70>
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fc fad0 	bl	8001520 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e1fd      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
 8004f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	fa93 f2a3 	rbit	r2, r3
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004fb4:	601a      	str	r2, [r3, #0]
  return result;
 8004fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d102      	bne.n	8004fda <HAL_RCC_OscConfig+0xcba>
 8004fd4:	4bb0      	ldr	r3, [pc, #704]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	e027      	b.n	800502a <HAL_RCC_OscConfig+0xd0a>
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	fa93 f2a3 	rbit	r2, r3
 8004ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005004:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005012:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	4b9c      	ldr	r3, [pc, #624]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800502e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005032:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005036:	6011      	str	r1, [r2, #0]
 8005038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800503c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	fa92 f1a2 	rbit	r1, r2
 8005046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800504a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800504e:	6011      	str	r1, [r2, #0]
  return result;
 8005050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005054:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	fab2 f282 	clz	r2, r2
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	f042 0220 	orr.w	r2, r2, #32
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	f002 021f 	and.w	r2, r2, #31
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f202 	lsl.w	r2, r1, r2
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d182      	bne.n	8004f7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005076:	4b88      	ldr	r3, [pc, #544]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800507e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	430b      	orrs	r3, r1
 8005098:	497f      	ldr	r1, [pc, #508]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 800509a:	4313      	orrs	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
 800509e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80050a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	fa93 f2a3 	rbit	r2, r3
 80050ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050c2:	601a      	str	r2, [r3, #0]
  return result;
 80050c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	2301      	movs	r3, #1
 80050e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fc fa1c 	bl	8001520 <HAL_GetTick>
 80050e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ec:	e009      	b.n	8005102 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fc fa17 	bl	8001520 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e144      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800510a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800510e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	fa93 f2a3 	rbit	r2, r3
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005126:	601a      	str	r2, [r3, #0]
  return result;
 8005128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_RCC_OscConfig+0xe2c>
 8005146:	4b54      	ldr	r3, [pc, #336]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	e027      	b.n	800519c <HAL_RCC_OscConfig+0xe7c>
 800514c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005150:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	fa93 f2a3 	rbit	r2, r3
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005176:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800517a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005184:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	fa93 f2a3 	rbit	r2, r3
 800518e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005192:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80051a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051a8:	6011      	str	r1, [r2, #0]
 80051aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	fa92 f1a2 	rbit	r1, r2
 80051b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051c0:	6011      	str	r1, [r2, #0]
  return result;
 80051c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	fab2 f282 	clz	r2, r2
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	f042 0220 	orr.w	r2, r2, #32
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	f002 021f 	and.w	r2, r2, #31
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f202 	lsl.w	r2, r1, r2
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d082      	beq.n	80050ee <HAL_RCC_OscConfig+0xdce>
 80051e8:	e0cf      	b.n	800538a <HAL_RCC_OscConfig+0x106a>
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	fa93 f2a3 	rbit	r2, r3
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800520e:	601a      	str	r2, [r3, #0]
  return result;
 8005210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005214:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005218:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	fab3 f383 	clz	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fc f976 	bl	8001520 <HAL_GetTick>
 8005234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005238:	e009      	b.n	800524e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523a:	f7fc f971 	bl	8001520 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e09e      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
 800524e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005252:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800525a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005260:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	fa93 f2a3 	rbit	r2, r3
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005272:	601a      	str	r2, [r3, #0]
  return result;
 8005274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005278:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800527c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d104      	bne.n	800529c <HAL_RCC_OscConfig+0xf7c>
 8005292:	4b01      	ldr	r3, [pc, #4]	; (8005298 <HAL_RCC_OscConfig+0xf78>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	e029      	b.n	80052ec <HAL_RCC_OscConfig+0xfcc>
 8005298:	40021000 	.word	0x40021000
 800529c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80052a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	fa93 f2a3 	rbit	r2, r3
 80052b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	fa93 f2a3 	rbit	r2, r3
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <HAL_RCC_OscConfig+0x1078>)
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	fa92 f1a2 	rbit	r1, r2
 8005308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800530c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005310:	6011      	str	r1, [r2, #0]
  return result;
 8005312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005316:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	fab2 f282 	clz	r2, r2
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f042 0220 	orr.w	r2, r2, #32
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	f002 021f 	and.w	r2, r2, #31
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d180      	bne.n	800523a <HAL_RCC_OscConfig+0xf1a>
 8005338:	e027      	b.n	800538a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800533a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e01e      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_RCC_OscConfig+0x1078>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005356:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800535a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800535e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	429a      	cmp	r2, r3
 800536c:	d10b      	bne.n	8005386 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800536e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000

0800539c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b09e      	sub	sp, #120	; 0x78
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e162      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053b4:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d910      	bls.n	80053e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c2:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 0207 	bic.w	r2, r3, #7
 80053ca:	498b      	ldr	r1, [pc, #556]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b89      	ldr	r3, [pc, #548]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e14a      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b82      	ldr	r3, [pc, #520]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	497f      	ldr	r1, [pc, #508]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80dc 	beq.w	80055c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d13c      	bne.n	8005492 <HAL_RCC_ClockConfig+0xf6>
 8005418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800541c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005420:	fa93 f3a3 	rbit	r3, r3
 8005424:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_RCC_ClockConfig+0xa6>
 800543c:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	e00f      	b.n	8005462 <HAL_RCC_ClockConfig+0xc6>
 8005442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005446:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	667b      	str	r3, [r7, #100]	; 0x64
 8005450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005454:	663b      	str	r3, [r7, #96]	; 0x60
 8005456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545e:	4b67      	ldr	r3, [pc, #412]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005466:	65ba      	str	r2, [r7, #88]	; 0x58
 8005468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005472:	fab2 f282 	clz	r2, r2
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	f042 0220 	orr.w	r2, r2, #32
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	f002 021f 	and.w	r2, r2, #31
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d17b      	bne.n	8005586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0f3      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d13c      	bne.n	8005514 <HAL_RCC_ClockConfig+0x178>
 800549a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800549e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d102      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x128>
 80054be:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	e00f      	b.n	80054e4 <HAL_RCC_ClockConfig+0x148>
 80054c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
 80054d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054d6:	643b      	str	r3, [r7, #64]	; 0x40
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	4b46      	ldr	r3, [pc, #280]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80054ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ec:	fa92 f2a2 	rbit	r2, r2
 80054f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f4:	fab2 f282 	clz	r2, r2
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	f042 0220 	orr.w	r2, r2, #32
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	f002 021f 	and.w	r2, r2, #31
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f202 	lsl.w	r2, r1, r2
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d13a      	bne.n	8005586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0b2      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
 8005514:	2302      	movs	r3, #2
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005522:	fab3 f383 	clz	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d102      	bne.n	800553c <HAL_RCC_ClockConfig+0x1a0>
 8005536:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	e00d      	b.n	8005558 <HAL_RCC_ClockConfig+0x1bc>
 800553c:	2302      	movs	r3, #2
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	2302      	movs	r3, #2
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2202      	movs	r2, #2
 800555a:	61ba      	str	r2, [r7, #24]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	fa92 f2a2 	rbit	r2, r2
 8005562:	617a      	str	r2, [r7, #20]
  return result;
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	fab2 f282 	clz	r2, r2
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f042 0220 	orr.w	r2, r2, #32
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f002 021f 	and.w	r2, r2, #31
 8005576:	2101      	movs	r1, #1
 8005578:	fa01 f202 	lsl.w	r2, r1, r2
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e079      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005586:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f023 0203 	bic.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	491a      	ldr	r1, [pc, #104]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005598:	f7fb ffc2 	bl	8001520 <HAL_GetTick>
 800559c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a0:	f7fb ffbe 	bl	8001520 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e061      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_RCC_ClockConfig+0x260>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 020c 	and.w	r2, r3, #12
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d1eb      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d214      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 0207 	bic.w	r2, r3, #7
 80055de:	4906      	ldr	r1, [pc, #24]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <HAL_RCC_ClockConfig+0x25c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e040      	b.n	800567a <HAL_RCC_ClockConfig+0x2de>
 80055f8:	40022000 	.word	0x40022000
 80055fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_RCC_ClockConfig+0x2e8>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	491a      	ldr	r1, [pc, #104]	; (8005684 <HAL_RCC_ClockConfig+0x2e8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_RCC_ClockConfig+0x2e8>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4912      	ldr	r1, [pc, #72]	; (8005684 <HAL_RCC_ClockConfig+0x2e8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800563e:	f000 f845 	bl	80056cc <HAL_RCC_GetSysClockFreq>
 8005642:	4601      	mov	r1, r0
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <HAL_RCC_ClockConfig+0x2e8>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564c:	22f0      	movs	r2, #240	; 0xf0
 800564e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	fa92 f2a2 	rbit	r2, r2
 8005656:	60fa      	str	r2, [r7, #12]
  return result;
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	fab2 f282 	clz	r2, r2
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	40d3      	lsrs	r3, r2
 8005662:	4a09      	ldr	r2, [pc, #36]	; (8005688 <HAL_RCC_ClockConfig+0x2ec>)
 8005664:	5cd3      	ldrb	r3, [r2, r3]
 8005666:	fa21 f303 	lsr.w	r3, r1, r3
 800566a:	4a08      	ldr	r2, [pc, #32]	; (800568c <HAL_RCC_ClockConfig+0x2f0>)
 800566c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800566e:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_RCC_ClockConfig+0x2f4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fb fe5c 	bl	8001330 <HAL_InitTick>
  
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3778      	adds	r7, #120	; 0x78
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	0800d408 	.word	0x0800d408
 800568c:	20000014 	.word	0x20000014
 8005690:	20000018 	.word	0x20000018

08005694 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800569e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	603b      	str	r3, [r7, #0]
  return result;
 80056a8:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	461a      	mov	r2, r3
 80056bc:	2301      	movs	r3, #1
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b08b      	sub	sp, #44	; 0x2c
 80056d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	2300      	movs	r3, #0
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <HAL_RCC_GetSysClockFreq+0xc0>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x30>
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x36>
 80056fa:	e03c      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056fc:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056fe:	623b      	str	r3, [r7, #32]
      break;
 8005700:	e03c      	b.n	800577c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005708:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800570c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	fa92 f2a2 	rbit	r2, r2
 8005714:	607a      	str	r2, [r7, #4]
  return result;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	40d3      	lsrs	r3, r2
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005722:	5cd3      	ldrb	r3, [r2, r3]
 8005724:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	220f      	movs	r2, #15
 8005730:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	fa92 f2a2 	rbit	r2, r2
 8005738:	60fa      	str	r2, [r7, #12]
  return result;
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	fab2 f282 	clz	r2, r2
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	40d3      	lsrs	r3, r2
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005754:	4a0e      	ldr	r2, [pc, #56]	; (8005790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	fbb2 f2f3 	udiv	r2, r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
 8005764:	e004      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4a0c      	ldr	r2, [pc, #48]	; (800579c <HAL_RCC_GetSysClockFreq+0xd0>)
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	623b      	str	r3, [r7, #32]
      break;
 8005774:	e002      	b.n	800577c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005778:	623b      	str	r3, [r7, #32]
      break;
 800577a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800577c:	6a3b      	ldr	r3, [r7, #32]
}
 800577e:	4618      	mov	r0, r3
 8005780:	372c      	adds	r7, #44	; 0x2c
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	007a1200 	.word	0x007a1200
 8005794:	0800d420 	.word	0x0800d420
 8005798:	0800d430 	.word	0x0800d430
 800579c:	003d0900 	.word	0x003d0900

080057a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a6:	681b      	ldr	r3, [r3, #0]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000014 	.word	0x20000014

080057b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057be:	f7ff ffef 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057c2:	4601      	mov	r1, r0
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	fa92 f2a2 	rbit	r2, r2
 80057d8:	603a      	str	r2, [r7, #0]
  return result;
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	fab2 f282 	clz	r2, r2
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	40d3      	lsrs	r3, r2
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	0800d418 	.word	0x0800d418

080057fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	220f      	movs	r2, #15
 800580a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800580c:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_RCC_GetClockConfig+0x5c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0203 	and.w	r2, r3, #3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <HAL_RCC_GetClockConfig+0x5c>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCC_GetClockConfig+0x5c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCC_GetClockConfig+0x5c>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800583e:	4b07      	ldr	r3, [pc, #28]	; (800585c <HAL_RCC_GetClockConfig+0x60>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0207 	and.w	r2, r3, #7
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	601a      	str	r2, [r3, #0]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	40022000 	.word	0x40022000

08005860 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d104      	bne.n	800587a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005870:	f7fa ff46 	bl	8000700 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	701a      	strb	r2, [r3, #0]
  }
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	4002100a 	.word	0x4002100a

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b092      	sub	sp, #72	; 0x48
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80d4 	beq.w	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ac:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10e      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c2:	61d3      	str	r3, [r2, #28]
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b45      	ldr	r3, [pc, #276]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d118      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e2:	4b42      	ldr	r3, [pc, #264]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a41      	ldr	r2, [pc, #260]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7fb fe17 	bl	8001520 <HAL_GetTick>
 80058f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	e008      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fb fe13 	bl	8001520 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e14b      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005908:	4b38      	ldr	r3, [pc, #224]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005914:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8084 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005930:	429a      	cmp	r2, r3
 8005932:	d07c      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005934:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800593e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005942:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	fa93 f3a3 	rbit	r3, r3
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800594e:	fab3 f383 	clz	r3, r3
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	461a      	mov	r2, r3
 800595e:	2301      	movs	r3, #1
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	fa93 f3a3 	rbit	r3, r3
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	461a      	mov	r2, r3
 8005982:	2300      	movs	r3, #0
 8005984:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d04b      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005996:	f7fb fdc3 	bl	8001520 <HAL_GetTick>
 800599a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	e00a      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599e:	f7fb fdbf 	bl	8001520 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e0f5      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80059b4:	2302      	movs	r3, #2
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	fa93 f3a3 	rbit	r3, r3
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
 80059c0:	2302      	movs	r3, #2
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	61fb      	str	r3, [r7, #28]
  return result;
 80059cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d108      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059e2:	4b01      	ldr	r3, [pc, #4]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	e00d      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
 80059f0:	10908100 	.word	0x10908100
 80059f4:	2302      	movs	r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2202      	movs	r2, #2
 8005a06:	613a      	str	r2, [r7, #16]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	fa92 f2a2 	rbit	r2, r2
 8005a0e:	60fa      	str	r2, [r7, #12]
  return result;
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	fab2 f282 	clz	r2, r2
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	f002 021f 	and.w	r2, r2, #31
 8005a22:	2101      	movs	r1, #1
 8005a24:	fa01 f202 	lsl.w	r2, r1, r2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0b7      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a2e:	4b5e      	ldr	r3, [pc, #376]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	495b      	ldr	r1, [pc, #364]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a48:	4b57      	ldr	r3, [pc, #348]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4a56      	ldr	r2, [pc, #344]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a60:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	f023 0203 	bic.w	r2, r3, #3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	494e      	ldr	r1, [pc, #312]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f023 0210 	bic.w	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	4947      	ldr	r1, [pc, #284]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a9c:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	493f      	ldr	r1, [pc, #252]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f023 0220 	bic.w	r2, r3, #32
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	4938      	ldr	r1, [pc, #224]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ad8:	4b33      	ldr	r3, [pc, #204]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	4930      	ldr	r1, [pc, #192]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005af6:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4929      	ldr	r1, [pc, #164]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	4921      	ldr	r1, [pc, #132]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	491a      	ldr	r1, [pc, #104]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	4912      	ldr	r1, [pc, #72]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	490b      	ldr	r1, [pc, #44]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4903      	ldr	r1, [pc, #12]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3748      	adds	r7, #72	; 0x48
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40021000 	.word	0x40021000

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e049      	b.n	8005c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f841 	bl	8005c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 f9dc 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e03b      	b.n	8005d00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <HAL_TIM_Base_Start_IT+0x9c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIM_Base_Start_IT+0x4e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIM_Base_Start_IT+0x4e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d115      	bne.n	8005cea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <HAL_TIM_Base_Start_IT+0xa4>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b06      	cmp	r3, #6
 8005cce:	d015      	beq.n	8005cfc <HAL_TIM_Base_Start_IT+0x8c>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd6:	d011      	beq.n	8005cfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	e008      	b.n	8005cfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e000      	b.n	8005cfe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40012c00 	.word	0x40012c00
 8005d10:	40014000 	.word	0x40014000
 8005d14:	00010007 	.word	0x00010007

08005d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0202 	mvn.w	r2, #2
 8005d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f905 	bl	8005f6a <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8f7 	bl	8005f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f908 	bl	8005f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0204 	mvn.w	r2, #4
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8db 	bl	8005f6a <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8cd 	bl	8005f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8de 	bl	8005f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0208 	mvn.w	r2, #8
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2204      	movs	r2, #4
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8b1 	bl	8005f6a <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8a3 	bl	8005f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8b4 	bl	8005f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0210 	mvn.w	r2, #16
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2208      	movs	r2, #8
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f887 	bl	8005f6a <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f879 	bl	8005f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f88a 	bl	8005f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0201 	mvn.w	r2, #1
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fa fe96 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b80      	cmp	r3, #128	; 0x80
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8e8 	bl	8006098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d10e      	bne.n	8005ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d107      	bne.n	8005ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8db 	bl	80060ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d10e      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d107      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f838 	bl	8005f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d10e      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d107      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f06f 0220 	mvn.w	r2, #32
 8005f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f89b 	bl	8006084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a2e      	ldr	r2, [pc, #184]	; (8006074 <TIM_Base_SetConfig+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0x20>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d108      	bne.n	8005fda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <TIM_Base_SetConfig+0xcc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_Base_SetConfig+0x5a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d00b      	beq.n	8006002 <TIM_Base_SetConfig+0x5a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a22      	ldr	r2, [pc, #136]	; (8006078 <TIM_Base_SetConfig+0xd0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_Base_SetConfig+0x5a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <TIM_Base_SetConfig+0xd4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_Base_SetConfig+0x5a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <TIM_Base_SetConfig+0xd8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d108      	bne.n	8006014 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <TIM_Base_SetConfig+0xcc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_Base_SetConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <TIM_Base_SetConfig+0xd0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_Base_SetConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0xd4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_Base_SetConfig+0xb0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <TIM_Base_SetConfig+0xd8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	615a      	str	r2, [r3, #20]
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800

08006084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060f6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	b29b      	uxth	r3, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	4013      	ands	r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006124:	b084      	sub	sp, #16
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	f107 0014 	add.w	r0, r7, #20
 8006132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	b004      	add	sp, #16
 8006164:	4770      	bx	lr
	...

08006168 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006168:	b480      	push	{r7}
 800616a:	b09d      	sub	sp, #116	; 0x74
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	78db      	ldrb	r3, [r3, #3]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d81f      	bhi.n	80061da <USB_ActivateEndpoint+0x72>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <USB_ActivateEndpoint+0x38>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061e3 	.word	0x080061e3
 80061ac:	080061bf 	.word	0x080061bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061bc:	e012      	b.n	80061e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80061c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061ca:	e00b      	b.n	80061e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061d8:	e004      	b.n	80061e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80061e0:	e000      	b.n	80061e4 <USB_ActivateEndpoint+0x7c>
      break;
 80061e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	b21b      	sxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	b21a      	sxth	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b21b      	sxth	r3, r3
 8006226:	4313      	orrs	r3, r2
 8006228:	b21b      	sxth	r3, r3
 800622a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800623c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624c:	b29b      	uxth	r3, r3
 800624e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	7b1b      	ldrb	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8149 	bne.w	80064ec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8084 	beq.w	800636c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4413      	add	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	00da      	lsls	r2, r3, #3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	827b      	strh	r3, [r7, #18]
 80062a6:	8a7b      	ldrh	r3, [r7, #18]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <USB_ActivateEndpoint+0x180>
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	823b      	strh	r3, [r7, #16]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	8a3b      	ldrh	r3, [r7, #16]
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	78db      	ldrb	r3, [r3, #3]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d020      	beq.n	8006332 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	81bb      	strh	r3, [r7, #12]
 8006308:	89bb      	ldrh	r3, [r7, #12]
 800630a:	f083 0320 	eor.w	r3, r3, #32
 800630e:	81bb      	strh	r3, [r7, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	89bb      	ldrh	r3, [r7, #12]
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
 8006330:	e2a6      	b.n	8006880 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006348:	81fb      	strh	r3, [r7, #14]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	441a      	add	r2, r3
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800635a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	b29b      	uxth	r3, r3
 8006368:	8013      	strh	r3, [r2, #0]
 800636a:	e289      	b.n	8006880 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	633b      	str	r3, [r7, #48]	; 0x30
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	4413      	add	r3, r2
 800637e:	633b      	str	r3, [r7, #48]	; 0x30
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	00da      	lsls	r2, r3, #3
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	4413      	add	r3, r2
 800638a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	88db      	ldrh	r3, [r3, #6]
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	b29b      	uxth	r3, r3
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	4413      	add	r3, r2
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	00da      	lsls	r2, r3, #3
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	4413      	add	r3, r2
 80063be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d112      	bne.n	80063f2 <USB_ActivateEndpoint+0x28a>
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	e02f      	b.n	8006452 <USB_ActivateEndpoint+0x2ea>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b3e      	cmp	r3, #62	; 0x3e
 80063f8:	d813      	bhi.n	8006422 <USB_ActivateEndpoint+0x2ba>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	66bb      	str	r3, [r7, #104]	; 0x68
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <USB_ActivateEndpoint+0x2ac>
 800640e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006410:	3301      	adds	r3, #1
 8006412:	66bb      	str	r3, [r7, #104]	; 0x68
 8006414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29a      	uxth	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e017      	b.n	8006452 <USB_ActivateEndpoint+0x2ea>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	66bb      	str	r3, [r7, #104]	; 0x68
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <USB_ActivateEndpoint+0x2d4>
 8006436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006438:	3b01      	subs	r3, #1
 800643a:	66bb      	str	r3, [r7, #104]	; 0x68
 800643c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800643e:	b29b      	uxth	r3, r3
 8006440:	029b      	lsls	r3, r3, #10
 8006442:	b29b      	uxth	r3, r3
 8006444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644c:	b29a      	uxth	r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01b      	beq.n	80064a2 <USB_ActivateEndpoint+0x33a>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	843b      	strh	r3, [r7, #32]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8c3b      	ldrh	r3, [r7, #32]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	83fb      	strh	r3, [r7, #30]
 80064ba:	8bfb      	ldrh	r3, [r7, #30]
 80064bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064c0:	83fb      	strh	r3, [r7, #30]
 80064c2:	8bfb      	ldrh	r3, [r7, #30]
 80064c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c8:	83fb      	strh	r3, [r7, #30]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	8bfb      	ldrh	r3, [r7, #30]
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
 80064ea:	e1c9      	b.n	8006880 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	78db      	ldrb	r3, [r3, #3]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11e      	bne.n	8006532 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006524:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]
 8006530:	e01d      	b.n	800656e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800655a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656a:	b29b      	uxth	r3, r3
 800656c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657e:	4413      	add	r3, r2
 8006580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	00da      	lsls	r2, r3, #3
 8006588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658a:	4413      	add	r3, r2
 800658c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006590:	65bb      	str	r3, [r7, #88]	; 0x58
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	891b      	ldrh	r3, [r3, #8]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	b29b      	uxth	r3, r3
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	657b      	str	r3, [r7, #84]	; 0x54
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b2:	4413      	add	r3, r2
 80065b4:	657b      	str	r3, [r7, #84]	; 0x54
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	00da      	lsls	r2, r3, #3
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	4413      	add	r3, r2
 80065c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	895b      	ldrh	r3, [r3, #10]
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 8093 	bne.w	8006706 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80065f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <USB_ActivateEndpoint+0x4cc>
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <USB_ActivateEndpoint+0x51c>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	873b      	strh	r3, [r7, #56]	; 0x38
 800669c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800669e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80066a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]
 8006704:	e0bc      	b.n	8006880 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800671a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01d      	beq.n	800675e <USB_ActivateEndpoint+0x5f6>
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800676e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01d      	beq.n	80067b6 <USB_ActivateEndpoint+0x64e>
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d024      	beq.n	8006808 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067dc:	f083 0320 	eor.w	r3, r3, #32
 80067e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]
 8006806:	e01d      	b.n	8006844 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006884:	4618      	mov	r0, r3
 8006886:	3774      	adds	r7, #116	; 0x74
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006890:	b480      	push	{r7}
 8006892:	b08d      	sub	sp, #52	; 0x34
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	7b1b      	ldrb	r3, [r3, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 808e 	bne.w	80069c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d044      	beq.n	8006936 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	81bb      	strh	r3, [r7, #12]
 80068ba:	89bb      	ldrh	r3, [r7, #12]
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01b      	beq.n	80068fc <USB_DeactivateEndpoint+0x6c>
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	817b      	strh	r3, [r7, #10]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	897b      	ldrh	r3, [r7, #10]
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006912:	813b      	strh	r3, [r7, #8]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	b29b      	uxth	r3, r3
 8006932:	8013      	strh	r3, [r2, #0]
 8006934:	e192      	b.n	8006c5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	827b      	strh	r3, [r7, #18]
 8006944:	8a7b      	ldrh	r3, [r7, #18]
 8006946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <USB_DeactivateEndpoint+0xf6>
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	823b      	strh	r3, [r7, #16]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8a3b      	ldrh	r3, [r7, #16]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	81fb      	strh	r3, [r7, #14]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
 80069be:	e14d      	b.n	8006c5c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 80a5 	bne.w	8006b14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	843b      	strh	r3, [r7, #32]
 80069d8:	8c3b      	ldrh	r3, [r7, #32]
 80069da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <USB_DeactivateEndpoint+0x18a>
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	83fb      	strh	r3, [r7, #30]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	8bfb      	ldrh	r3, [r7, #30]
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	83bb      	strh	r3, [r7, #28]
 8006a28:	8bbb      	ldrh	r3, [r7, #28]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01b      	beq.n	8006a6a <USB_DeactivateEndpoint+0x1da>
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	837b      	strh	r3, [r7, #26]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	8b7b      	ldrh	r3, [r7, #26]
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a80:	833b      	strh	r3, [r7, #24]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8b3b      	ldrh	r3, [r7, #24]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	82fb      	strh	r3, [r7, #22]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	8afb      	ldrh	r3, [r7, #22]
 8006ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af0:	82bb      	strh	r3, [r7, #20]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	8abb      	ldrh	r3, [r7, #20]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]
 8006b12:	e0a3      	b.n	8006c5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <USB_DeactivateEndpoint+0x2d4>
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <USB_DeactivateEndpoint+0x324>
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	441a      	add	r2, r3
 8006b9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3734      	adds	r7, #52	; 0x34
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b0c2      	sub	sp, #264	; 0x108
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c78:	6018      	str	r0, [r3, #0]
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f040 867b 	bne.w	800798c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d908      	bls.n	8006cc4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cc2:	e007      	b.n	8006cd4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d13a      	bne.n	8006d5a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6959      	ldr	r1, [r3, #20]
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	88da      	ldrh	r2, [r3, #6]
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	f001 fc11 	bl	8008532 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4413      	add	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00da      	lsls	r2, r3, #3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	f000 bde3 	b.w	8007920 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	f040 843a 	bne.w	80075e0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	f240 83b7 	bls.w	80074f8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	441a      	add	r2, r3
 8006dce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 81b3 	beq.w	8007192 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d16d      	bne.n	8006f24 <USB_EPStartXfer+0x2ba>
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	4413      	add	r3, r2
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	00da      	lsls	r2, r3, #3
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d112      	bne.n	8006eb2 <USB_EPStartXfer+0x248>
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e05d      	b.n	8006f6e <USB_EPStartXfer+0x304>
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb8:	d817      	bhi.n	8006eea <USB_EPStartXfer+0x280>
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <USB_EPStartXfer+0x270>
 8006ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e041      	b.n	8006f6e <USB_EPStartXfer+0x304>
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <USB_EPStartXfer+0x2a0>
 8006f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f04:	3b01      	subs	r3, #1
 8006f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e024      	b.n	8006f6e <USB_EPStartXfer+0x304>
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d11c      	bne.n	8006f6e <USB_EPStartXfer+0x304>
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	4413      	add	r3, r2
 8006f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	00da      	lsls	r2, r3, #3
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	895b      	ldrh	r3, [r3, #10]
 8006f7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6959      	ldr	r1, [r3, #20]
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f001 fac8 	bl	8008532 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb2:	441a      	add	r2, r3
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d90f      	bls.n	8006ffc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fec:	1ad2      	subs	r2, r2, r3
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	621a      	str	r2, [r3, #32]
 8006ffa:	e00e      	b.n	800701a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d16d      	bne.n	8007106 <USB_EPStartXfer+0x49c>
 800702a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	4413      	add	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00da      	lsls	r2, r3, #3
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	4413      	add	r3, r2
 8007060:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	2b00      	cmp	r3, #0
 800706c:	d112      	bne.n	8007094 <USB_EPStartXfer+0x42a>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007078:	b29a      	uxth	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	e063      	b.n	800715c <USB_EPStartXfer+0x4f2>
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007098:	2b3e      	cmp	r3, #62	; 0x3e
 800709a:	d817      	bhi.n	80070cc <USB_EPStartXfer+0x462>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <USB_EPStartXfer+0x452>
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e047      	b.n	800715c <USB_EPStartXfer+0x4f2>
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <USB_EPStartXfer+0x482>
 80070e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e6:	3b01      	subs	r3, #1
 80070e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	029b      	lsls	r3, r3, #10
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fe:	b29a      	uxth	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e02a      	b.n	800715c <USB_EPStartXfer+0x4f2>
 8007106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d122      	bne.n	800715c <USB_EPStartXfer+0x4f2>
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	623b      	str	r3, [r7, #32]
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	4413      	add	r3, r2
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	4413      	add	r3, r2
 800714c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	b29a      	uxth	r2, r3
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	891b      	ldrh	r3, [r3, #8]
 8007168:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007182:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007186:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	f001 f9d1 	bl	8008532 <USB_WritePMA>
 8007190:	e3c6      	b.n	8007920 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d16d      	bne.n	800727e <USB_EPStartXfer+0x614>
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	4413      	add	r3, r2
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071dc:	647b      	str	r3, [r7, #68]	; 0x44
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d112      	bne.n	800720c <USB_EPStartXfer+0x5a2>
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e063      	b.n	80072d4 <USB_EPStartXfer+0x66a>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	2b3e      	cmp	r3, #62	; 0x3e
 8007212:	d817      	bhi.n	8007244 <USB_EPStartXfer+0x5da>
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <USB_EPStartXfer+0x5ca>
 800722a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007238:	b29b      	uxth	r3, r3
 800723a:	029b      	lsls	r3, r3, #10
 800723c:	b29a      	uxth	r2, r3
 800723e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e047      	b.n	80072d4 <USB_EPStartXfer+0x66a>
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <USB_EPStartXfer+0x5fa>
 800725a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800725e:	3b01      	subs	r3, #1
 8007260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007268:	b29b      	uxth	r3, r3
 800726a:	029b      	lsls	r3, r3, #10
 800726c:	b29b      	uxth	r3, r3
 800726e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007276:	b29a      	uxth	r2, r3
 8007278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e02a      	b.n	80072d4 <USB_EPStartXfer+0x66a>
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d122      	bne.n	80072d4 <USB_EPStartXfer+0x66a>
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ae:	4413      	add	r3, r2
 80072b0:	653b      	str	r3, [r7, #80]	; 0x50
 80072b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	00da      	lsls	r2, r3, #3
 80072c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	891b      	ldrh	r3, [r3, #8]
 80072e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6959      	ldr	r1, [r3, #20]
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007302:	6800      	ldr	r0, [r0, #0]
 8007304:	f001 f915 	bl	8008532 <USB_WritePMA>
            ep->xfer_buff += len;
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007318:	441a      	add	r2, r3
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d90f      	bls.n	8007362 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8007342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	621a      	str	r2, [r3, #32]
 8007360:	e00e      	b.n	8007380 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	643b      	str	r3, [r7, #64]	; 0x40
 800738c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d16d      	bne.n	8007478 <USB_EPStartXfer+0x80e>
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	4413      	add	r3, r2
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	00da      	lsls	r2, r3, #3
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073d6:	637b      	str	r3, [r7, #52]	; 0x34
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d112      	bne.n	8007406 <USB_EPStartXfer+0x79c>
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e05d      	b.n	80074c2 <USB_EPStartXfer+0x858>
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	2b3e      	cmp	r3, #62	; 0x3e
 800740c:	d817      	bhi.n	800743e <USB_EPStartXfer+0x7d4>
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <USB_EPStartXfer+0x7c4>
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007428:	3301      	adds	r3, #1
 800742a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	b29b      	uxth	r3, r3
 8007434:	029b      	lsls	r3, r3, #10
 8007436:	b29a      	uxth	r2, r3
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e041      	b.n	80074c2 <USB_EPStartXfer+0x858>
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <USB_EPStartXfer+0x7f4>
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007458:	3b01      	subs	r3, #1
 800745a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007462:	b29b      	uxth	r3, r3
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e024      	b.n	80074c2 <USB_EPStartXfer+0x858>
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d11c      	bne.n	80074c2 <USB_EPStartXfer+0x858>
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007496:	b29b      	uxth	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	4413      	add	r3, r2
 800749e:	643b      	str	r3, [r7, #64]	; 0x40
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	00da      	lsls	r2, r3, #3
 80074ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074bc:	b29a      	uxth	r2, r3
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	895b      	ldrh	r3, [r3, #10]
 80074ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6959      	ldr	r1, [r3, #20]
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074f0:	6800      	ldr	r0, [r0, #0]
 80074f2:	f001 f81e 	bl	8008532 <USB_WritePMA>
 80074f6:	e213      	b.n	8007920 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007560:	b29b      	uxth	r3, r3
 8007562:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007584:	4413      	add	r3, r2
 8007586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	00da      	lsls	r2, r3, #3
 8007596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007598:	4413      	add	r3, r2
 800759a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800759e:	65bb      	str	r3, [r7, #88]	; 0x58
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	891b      	ldrh	r3, [r3, #8]
 80075b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6959      	ldr	r1, [r3, #20]
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075d8:	6800      	ldr	r0, [r0, #0]
 80075da:	f000 ffaa 	bl	8008532 <USB_WritePMA>
 80075de:	e19f      	b.n	8007920 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6a1a      	ldr	r2, [r3, #32]
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	1ad2      	subs	r2, r2, r3
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80bc 	beq.w	800779e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	673b      	str	r3, [r7, #112]	; 0x70
 8007632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d16d      	bne.n	800771e <USB_EPStartXfer+0xab4>
 8007642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	66bb      	str	r3, [r7, #104]	; 0x68
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007662:	4413      	add	r3, r2
 8007664:	66bb      	str	r3, [r7, #104]	; 0x68
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	00da      	lsls	r2, r3, #3
 8007674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007676:	4413      	add	r3, r2
 8007678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800767c:	667b      	str	r3, [r7, #100]	; 0x64
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	2b00      	cmp	r3, #0
 8007684:	d112      	bne.n	80076ac <USB_EPStartXfer+0xa42>
 8007686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007690:	b29a      	uxth	r2, r3
 8007692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	e05d      	b.n	8007768 <USB_EPStartXfer+0xafe>
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	2b3e      	cmp	r3, #62	; 0x3e
 80076b2:	d817      	bhi.n	80076e4 <USB_EPStartXfer+0xa7a>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <USB_EPStartXfer+0xa6a>
 80076ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076ce:	3301      	adds	r3, #1
 80076d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	e041      	b.n	8007768 <USB_EPStartXfer+0xafe>
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <USB_EPStartXfer+0xa9a>
 80076fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076fe:	3b01      	subs	r3, #1
 8007700:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007704:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29b      	uxth	r3, r3
 800770e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007716:	b29a      	uxth	r2, r3
 8007718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e024      	b.n	8007768 <USB_EPStartXfer+0xafe>
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d11c      	bne.n	8007768 <USB_EPStartXfer+0xafe>
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773c:	b29b      	uxth	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007742:	4413      	add	r3, r2
 8007744:	673b      	str	r3, [r7, #112]	; 0x70
 8007746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007756:	4413      	add	r3, r2
 8007758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800775c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007762:	b29a      	uxth	r2, r3
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	895b      	ldrh	r3, [r3, #10]
 8007774:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6959      	ldr	r1, [r3, #20]
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007788:	b29b      	uxth	r3, r3
 800778a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800778e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007792:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007796:	6800      	ldr	r0, [r0, #0]
 8007798:	f000 fecb 	bl	8008532 <USB_WritePMA>
 800779c:	e0c0      	b.n	8007920 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d16d      	bne.n	800788a <USB_EPStartXfer+0xc20>
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077ce:	4413      	add	r3, r2
 80077d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	00da      	lsls	r2, r3, #3
 80077e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d112      	bne.n	8007818 <USB_EPStartXfer+0xbae>
 80077f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007810:	b29a      	uxth	r2, r3
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e069      	b.n	80078ec <USB_EPStartXfer+0xc82>
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	2b3e      	cmp	r3, #62	; 0x3e
 800781e:	d817      	bhi.n	8007850 <USB_EPStartXfer+0xbe6>
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007824:	085b      	lsrs	r3, r3, #1
 8007826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <USB_EPStartXfer+0xbd6>
 8007836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800783a:	3301      	adds	r3, #1
 800783c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007840:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007844:	b29b      	uxth	r3, r3
 8007846:	029b      	lsls	r3, r3, #10
 8007848:	b29a      	uxth	r2, r3
 800784a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e04d      	b.n	80078ec <USB_EPStartXfer+0xc82>
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <USB_EPStartXfer+0xc06>
 8007866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800786a:	3b01      	subs	r3, #1
 800786c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007874:	b29b      	uxth	r3, r3
 8007876:	029b      	lsls	r3, r3, #10
 8007878:	b29b      	uxth	r3, r3
 800787a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007882:	b29a      	uxth	r2, r3
 8007884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007886:	801a      	strh	r2, [r3, #0]
 8007888:	e030      	b.n	80078ec <USB_EPStartXfer+0xc82>
 800788a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d128      	bne.n	80078ec <USB_EPStartXfer+0xc82>
 800789a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078be:	4413      	add	r3, r2
 80078c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	00da      	lsls	r2, r3, #3
 80078d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	891b      	ldrh	r3, [r3, #8]
 80078f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6959      	ldr	r1, [r3, #20]
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800790c:	b29b      	uxth	r3, r3
 800790e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007912:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007916:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	f000 fe09 	bl	8008532 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007946:	817b      	strh	r3, [r7, #10]
 8007948:	897b      	ldrh	r3, [r7, #10]
 800794a:	f083 0310 	eor.w	r3, r3, #16
 800794e:	817b      	strh	r3, [r7, #10]
 8007950:	897b      	ldrh	r3, [r7, #10]
 8007952:	f083 0320 	eor.w	r3, r3, #32
 8007956:	817b      	strh	r3, [r7, #10]
 8007958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]
 8007988:	f000 bc9f 	b.w	80082ca <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	7b1b      	ldrb	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 80ae 	bne.w	8007afa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800799e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d917      	bls.n	80079ea <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	619a      	str	r2, [r3, #24]
 80079e8:	e00e      	b.n	8007a08 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2200      	movs	r2, #0
 8007a06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	00da      	lsls	r2, r3, #3
 8007a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d116      	bne.n	8007a84 <USB_EPStartXfer+0xe1a>
 8007a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	e3e8      	b.n	8008256 <USB_EPStartXfer+0x15ec>
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8a:	d818      	bhi.n	8007abe <USB_EPStartXfer+0xe54>
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <USB_EPStartXfer+0xe42>
 8007aa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	e3cb      	b.n	8008256 <USB_EPStartXfer+0x15ec>
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <USB_EPStartXfer+0xe74>
 8007ad4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	029b      	lsls	r3, r3, #10
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	e3ad      	b.n	8008256 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	78db      	ldrb	r3, [r3, #3]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	f040 8200 	bne.w	8007f0c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f040 8091 	bne.w	8007c40 <USB_EPStartXfer+0xfd6>
 8007b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	00da      	lsls	r2, r3, #3
 8007b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d116      	bne.n	8007ba2 <USB_EPStartXfer+0xf38>
 8007b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e083      	b.n	8007caa <USB_EPStartXfer+0x1040>
 8007ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb0:	d820      	bhi.n	8007bf4 <USB_EPStartXfer+0xf8a>
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <USB_EPStartXfer+0xf78>
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	3301      	adds	r3, #1
 8007bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e05a      	b.n	8007caa <USB_EPStartXfer+0x1040>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <USB_EPStartXfer+0xfba>
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c3c:	801a      	strh	r2, [r3, #0]
 8007c3e:	e034      	b.n	8007caa <USB_EPStartXfer+0x1040>
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d12c      	bne.n	8007caa <USB_EPStartXfer+0x1040>
 8007c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c74:	4413      	add	r3, r2
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	00da      	lsls	r2, r3, #3
 8007c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 8091 	bne.w	8007dec <USB_EPStartXfer+0x1182>
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cee:	4413      	add	r3, r2
 8007cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	00da      	lsls	r2, r3, #3
 8007d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d06:	4413      	add	r3, r2
 8007d08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d116      	bne.n	8007d4e <USB_EPStartXfer+0x10e4>
 8007d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e07c      	b.n	8007e48 <USB_EPStartXfer+0x11de>
 8007d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d5c:	d820      	bhi.n	8007da0 <USB_EPStartXfer+0x1136>
 8007d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d004      	beq.n	8007d8e <USB_EPStartXfer+0x1124>
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	029b      	lsls	r3, r3, #10
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	e053      	b.n	8007e48 <USB_EPStartXfer+0x11de>
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <USB_EPStartXfer+0x1166>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e02d      	b.n	8007e48 <USB_EPStartXfer+0x11de>
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d125      	bne.n	8007e48 <USB_EPStartXfer+0x11de>
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e12:	4413      	add	r3, r2
 8007e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	00da      	lsls	r2, r3, #3
 8007e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 81fe 	beq.w	8008256 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <USB_EPStartXfer+0x1228>
 8007e86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10d      	bne.n	8007eae <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 81db 	bne.w	8008256 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ea0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f040 81d4 	bne.w	8008256 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	8013      	strh	r3, [r2, #0]
 8007f0a:	e1a4      	b.n	8008256 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	78db      	ldrb	r3, [r3, #3]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	f040 819a 	bne.w	8008252 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d917      	bls.n	8007f6a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	619a      	str	r2, [r3, #24]
 8007f68:	e00e      	b.n	8007f88 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2200      	movs	r2, #0
 8007f86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d178      	bne.n	800808a <USB_EPStartXfer+0x1420>
 8007f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	00da      	lsls	r2, r3, #3
 8007fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d116      	bne.n	8008014 <USB_EPStartXfer+0x13aa>
 8007fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e06b      	b.n	80080ec <USB_EPStartXfer+0x1482>
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	2b3e      	cmp	r3, #62	; 0x3e
 800801a:	d818      	bhi.n	800804e <USB_EPStartXfer+0x13e4>
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008020:	085b      	lsrs	r3, r3, #1
 8008022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USB_EPStartXfer+0x13d2>
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008036:	3301      	adds	r3, #1
 8008038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800803c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008040:	b29b      	uxth	r3, r3
 8008042:	029b      	lsls	r3, r3, #10
 8008044:	b29a      	uxth	r2, r3
 8008046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e04e      	b.n	80080ec <USB_EPStartXfer+0x1482>
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <USB_EPStartXfer+0x1404>
 8008064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008068:	3b01      	subs	r3, #1
 800806a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800806e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008072:	b29b      	uxth	r3, r3
 8008074:	029b      	lsls	r3, r3, #10
 8008076:	b29b      	uxth	r3, r3
 8008078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008080:	b29a      	uxth	r2, r3
 8008082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	e030      	b.n	80080ec <USB_EPStartXfer+0x1482>
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d128      	bne.n	80080ec <USB_EPStartXfer+0x1482>
 800809a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080be:	4413      	add	r3, r2
 80080c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	00da      	lsls	r2, r3, #3
 80080d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d6:	4413      	add	r3, r2
 80080d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d178      	bne.n	80081fc <USB_EPStartXfer+0x1592>
 800810a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008126:	b29b      	uxth	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800812e:	4413      	add	r3, r2
 8008130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	00da      	lsls	r2, r3, #3
 8008142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008146:	4413      	add	r3, r2
 8008148:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800814c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008154:	2b00      	cmp	r3, #0
 8008156:	d116      	bne.n	8008186 <USB_EPStartXfer+0x151c>
 8008158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	e067      	b.n	8008256 <USB_EPStartXfer+0x15ec>
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818a:	2b3e      	cmp	r3, #62	; 0x3e
 800818c:	d818      	bhi.n	80081c0 <USB_EPStartXfer+0x1556>
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <USB_EPStartXfer+0x1544>
 80081a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a8:	3301      	adds	r3, #1
 80081aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	029b      	lsls	r3, r3, #10
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e04a      	b.n	8008256 <USB_EPStartXfer+0x15ec>
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <USB_EPStartXfer+0x1576>
 80081d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081da:	3b01      	subs	r3, #1
 80081dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e02c      	b.n	8008256 <USB_EPStartXfer+0x15ec>
 80081fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d124      	bne.n	8008256 <USB_EPStartXfer+0x15ec>
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008222:	4413      	add	r3, r2
 8008224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	00da      	lsls	r2, r3, #3
 8008236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800823a:	4413      	add	r3, r2
 800823c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	e001      	b.n	8008256 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e03a      	b.n	80082cc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008280:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008284:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008288:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800828c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008294:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d020      	beq.n	800832a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fe:	81bb      	strh	r3, [r7, #12]
 8008300:	89bb      	ldrh	r3, [r7, #12]
 8008302:	f083 0310 	eor.w	r3, r3, #16
 8008306:	81bb      	strh	r3, [r7, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	89bb      	ldrh	r3, [r7, #12]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
 8008328:	e01f      	b.n	800836a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	81fb      	strh	r3, [r7, #14]
 8008342:	89fb      	ldrh	r3, [r7, #14]
 8008344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008348:	81fb      	strh	r3, [r7, #14]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	89fb      	ldrh	r3, [r7, #14]
 8008356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800835e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	7b1b      	ldrb	r3, [r3, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 809d 	bne.w	80084c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d04c      	beq.n	800842e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	823b      	strh	r3, [r7, #16]
 80083a2:	8a3b      	ldrh	r3, [r7, #16]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01b      	beq.n	80083e4 <USB_EPClearStall+0x6c>
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	81fb      	strh	r3, [r7, #14]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	441a      	add	r2, r3
 80083ce:	89fb      	ldrh	r3, [r7, #14]
 80083d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	78db      	ldrb	r3, [r3, #3]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d06c      	beq.n	80084c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008402:	81bb      	strh	r3, [r7, #12]
 8008404:	89bb      	ldrh	r3, [r7, #12]
 8008406:	f083 0320 	eor.w	r3, r3, #32
 800840a:	81bb      	strh	r3, [r7, #12]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	89bb      	ldrh	r3, [r7, #12]
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]
 800842c:	e04b      	b.n	80084c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	82fb      	strh	r3, [r7, #22]
 800843c:	8afb      	ldrh	r3, [r7, #22]
 800843e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01b      	beq.n	800847e <USB_EPClearStall+0x106>
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845c:	82bb      	strh	r3, [r7, #20]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	8abb      	ldrh	r3, [r7, #20]
 800846a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847a:	b29b      	uxth	r3, r3
 800847c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	827b      	strh	r3, [r7, #18]
 8008496:	8a7b      	ldrh	r3, [r7, #18]
 8008498:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800849c:	827b      	strh	r3, [r7, #18]
 800849e:	8a7b      	ldrh	r3, [r7, #18]
 80084a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084a4:	827b      	strh	r3, [r7, #18]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	8a7b      	ldrh	r3, [r7, #18]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008520:	b29b      	uxth	r3, r3
 8008522:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008532:	b480      	push	{r7}
 8008534:	b08d      	sub	sp, #52	; 0x34
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	4611      	mov	r1, r2
 800853e:	461a      	mov	r2, r3
 8008540:	460b      	mov	r3, r1
 8008542:	80fb      	strh	r3, [r7, #6]
 8008544:	4613      	mov	r3, r2
 8008546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008548:	88bb      	ldrh	r3, [r7, #4]
 800854a:	3301      	adds	r3, #1
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008558:	88fa      	ldrh	r2, [r7, #6]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008568:	e01b      	b.n	80085a2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	3301      	adds	r3, #1
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	b29b      	uxth	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	b29a      	uxth	r2, r3
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	3302      	adds	r3, #2
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	3301      	adds	r3, #1
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	3b01      	subs	r3, #1
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e0      	bne.n	800856a <USB_WritePMA+0x38>
  }
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	3734      	adds	r7, #52	; 0x34
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b08b      	sub	sp, #44	; 0x2c
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	460b      	mov	r3, r1
 80085c6:	80fb      	strh	r3, [r7, #6]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085cc:	88bb      	ldrh	r3, [r7, #4]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085dc:	88fa      	ldrh	r2, [r7, #6]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
 80085ec:	e018      	b.n	8008620 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	3302      	adds	r3, #2
 80085fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	3301      	adds	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	b2da      	uxtb	r2, r3
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	3b01      	subs	r3, #1
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e3      	bne.n	80085ee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008626:	88bb      	ldrh	r3, [r7, #4]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d007      	beq.n	8008642 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	b2da      	uxtb	r2, r3
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	701a      	strb	r2, [r3, #0]
  }
}
 8008642:	bf00      	nop
 8008644:	372c      	adds	r7, #44	; 0x2c
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7c1b      	ldrb	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d115      	bne.n	8008692 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800866a:	2202      	movs	r2, #2
 800866c:	2181      	movs	r1, #129	; 0x81
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f004 fcc3 	bl	800cffa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800867a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800867e:	2202      	movs	r2, #2
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f004 fcb9 	bl	800cffa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008690:	e012      	b.n	80086b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	2202      	movs	r2, #2
 8008696:	2181      	movs	r1, #129	; 0x81
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f004 fcae 	bl	800cffa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	2202      	movs	r2, #2
 80086a8:	2101      	movs	r1, #1
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f004 fca5 	bl	800cffa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086b8:	2308      	movs	r3, #8
 80086ba:	2203      	movs	r2, #3
 80086bc:	2182      	movs	r1, #130	; 0x82
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f004 fc9b 	bl	800cffa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086ce:	f004 fdbd 	bl	800d24c <USBD_static_malloc>
 80086d2:	4602      	mov	r2, r0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
 80086e8:	e026      	b.n	8008738 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7c1b      	ldrb	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800871a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800871e:	2101      	movs	r1, #1
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f004 fd5c 	bl	800d1de <USBD_LL_PrepareReceive>
 8008726:	e007      	b.n	8008738 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800872e:	2340      	movs	r3, #64	; 0x40
 8008730:	2101      	movs	r1, #1
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f004 fd53 	bl	800d1de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008752:	2181      	movs	r1, #129	; 0x81
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fc76 	bl	800d046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008760:	2101      	movs	r1, #1
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f004 fc6f 	bl	800d046 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008770:	2182      	movs	r1, #130	; 0x82
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f004 fc67 	bl	800d046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00e      	beq.n	80087a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008798:	4618      	mov	r0, r3
 800879a:	f004 fd65 	bl	800d268 <USBD_static_free>
    pdev->pClassData = NULL;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d039      	beq.n	800884e <USBD_CDC_Setup+0x9e>
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d17f      	bne.n	80088de <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d029      	beq.n	800883a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da11      	bge.n	8008814 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80087fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	88d2      	ldrh	r2, [r2, #6]
 8008802:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008804:	6939      	ldr	r1, [r7, #16]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	461a      	mov	r2, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fa14 	bl	8009c3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008812:	e06b      	b.n	80088ec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785a      	ldrb	r2, [r3, #1]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800882a:	6939      	ldr	r1, [r7, #16]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	88db      	ldrh	r3, [r3, #6]
 8008830:	461a      	mov	r2, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fa2f 	bl	8009c96 <USBD_CtlPrepareRx>
      break;
 8008838:	e058      	b.n	80088ec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7850      	ldrb	r0, [r2, #1]
 8008846:	2200      	movs	r2, #0
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	4798      	blx	r3
      break;
 800884c:	e04e      	b.n	80088ec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b0b      	cmp	r3, #11
 8008854:	d02e      	beq.n	80088b4 <USBD_CDC_Setup+0x104>
 8008856:	2b0b      	cmp	r3, #11
 8008858:	dc38      	bgt.n	80088cc <USBD_CDC_Setup+0x11c>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <USBD_CDC_Setup+0xb4>
 800885e:	2b0a      	cmp	r3, #10
 8008860:	d014      	beq.n	800888c <USBD_CDC_Setup+0xdc>
 8008862:	e033      	b.n	80088cc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886a:	2b03      	cmp	r3, #3
 800886c:	d107      	bne.n	800887e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	2202      	movs	r2, #2
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 f9df 	bl	8009c3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887c:	e02e      	b.n	80088dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f96f 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	75fb      	strb	r3, [r7, #23]
          break;
 800888a:	e027      	b.n	80088dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	2b03      	cmp	r3, #3
 8008894:	d107      	bne.n	80088a6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008896:	f107 030f 	add.w	r3, r7, #15
 800889a:	2201      	movs	r2, #1
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f9cb 	bl	8009c3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088a4:	e01a      	b.n	80088dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f95b 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 80088ae:	2302      	movs	r3, #2
 80088b0:	75fb      	strb	r3, [r7, #23]
          break;
 80088b2:	e013      	b.n	80088dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d00d      	beq.n	80088da <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 f94f 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 80088c6:	2302      	movs	r3, #2
 80088c8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088ca:	e006      	b.n	80088da <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 f948 	bl	8009b64 <USBD_CtlError>
          ret = USBD_FAIL;
 80088d4:	2302      	movs	r3, #2
 80088d6:	75fb      	strb	r3, [r7, #23]
          break;
 80088d8:	e000      	b.n	80088dc <USBD_CDC_Setup+0x12c>
          break;
 80088da:	bf00      	nop
      }
      break;
 80088dc:	e006      	b.n	80088ec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f93f 	bl	8009b64 <USBD_CtlError>
      ret = USBD_FAIL;
 80088e6:	2302      	movs	r3, #2
 80088e8:	75fb      	strb	r3, [r7, #23]
      break;
 80088ea:	bf00      	nop
  }

  return ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008910:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d03a      	beq.n	8008992 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	331c      	adds	r3, #28
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d029      	beq.n	8008986 <USBD_CDC_DataIn+0x90>
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	331c      	adds	r3, #28
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	78f9      	ldrb	r1, [r7, #3]
 8008946:	68b8      	ldr	r0, [r7, #8]
 8008948:	460b      	mov	r3, r1
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4403      	add	r3, r0
 8008952:	3338      	adds	r3, #56	; 0x38
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	fbb2 f1f3 	udiv	r1, r2, r3
 800895a:	fb01 f303 	mul.w	r3, r1, r3
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d110      	bne.n	8008986 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	440b      	add	r3, r1
 8008972:	331c      	adds	r3, #28
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008978:	78f9      	ldrb	r1, [r7, #3]
 800897a:	2300      	movs	r3, #0
 800897c:	2200      	movs	r2, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f004 fc0a 	bl	800d198 <USBD_LL_Transmit>
 8008984:	e003      	b.n	800898e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f004 fc35 	bl	800d224 <USBD_LL_GetRxDataSize>
 80089ba:	4602      	mov	r2, r0
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00d      	beq.n	80089e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80089e0:	4611      	mov	r1, r2
 80089e2:	4798      	blx	r3

    return USBD_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	e000      	b.n	80089ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089e8:	2302      	movs	r3, #2
  }
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d015      	beq.n	8008a38 <USBD_CDC_EP0_RxReady+0x46>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a12:	2bff      	cmp	r3, #255	; 0xff
 8008a14:	d010      	beq.n	8008a38 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a2c:	b292      	uxth	r2, r2
 8008a2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	22ff      	movs	r2, #255	; 0xff
 8008a34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2243      	movs	r2, #67	; 0x43
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	200000a8 	.word	0x200000a8

08008a64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2243      	movs	r2, #67	; 0x43
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000064 	.word	0x20000064

08008a84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2243      	movs	r2, #67	; 0x43
 8008a90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200000ec 	.word	0x200000ec

08008aa4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ab2:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	20000020 	.word	0x20000020

08008ac4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b087      	sub	sp, #28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b06:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01c      	beq.n	8008ba2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d115      	bne.n	8008b9e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2181      	movs	r1, #129	; 0x81
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f004 faff 	bl	800d198 <USBD_LL_Transmit>

      return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e002      	b.n	8008ba4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ba2:	2302      	movs	r3, #2
  }
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d017      	beq.n	8008bf6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7c1b      	ldrb	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d109      	bne.n	8008be2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd8:	2101      	movs	r1, #1
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f004 faff 	bl	800d1de <USBD_LL_PrepareReceive>
 8008be0:	e007      	b.n	8008bf2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	2101      	movs	r1, #1
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f004 faf6 	bl	800d1de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e000      	b.n	8008bf8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bf6:	2302      	movs	r3, #2
  }
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c14:	2302      	movs	r3, #2
 8008c16:	e01a      	b.n	8008c4e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	79fa      	ldrb	r2, [r7, #7]
 8008c44:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f004 f962 	bl	800cf10 <USBD_LL_Init>

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	e001      	b.n	8008c7c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 f996 	bl	800cfc4 <USBD_LL_Start>

  return USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00c      	beq.n	8008cec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3

  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fedb 	bl	8009aea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d50:	f003 031f 	and.w	r3, r3, #31
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d016      	beq.n	8008d86 <USBD_LL_SetupStage+0x6a>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d81c      	bhi.n	8008d96 <USBD_LL_SetupStage+0x7a>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <USBD_LL_SetupStage+0x4a>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d008      	beq.n	8008d76 <USBD_LL_SetupStage+0x5a>
 8008d64:	e017      	b.n	8008d96 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f9ce 	bl	8009110 <USBD_StdDevReq>
      break;
 8008d74:	e01a      	b.n	8008dac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa30 	bl	80091e4 <USBD_StdItfReq>
      break;
 8008d84:	e012      	b.n	8008dac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa70 	bl	8009274 <USBD_StdEPReq>
      break;
 8008d94:	e00a      	b.n	8008dac <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f004 f96d 	bl	800d084 <USBD_LL_StallEP>
      break;
 8008daa:	bf00      	nop
  }

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d14b      	bne.n	8008e62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d134      	bne.n	8008e46 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d919      	bls.n	8008e1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	1ad2      	subs	r2, r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d203      	bcs.n	8008e0a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	e002      	b.n	8008e10 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 ff5c 	bl	8009cd2 <USBD_CtlContinueRx>
 8008e1a:	e038      	b.n	8008e8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00a      	beq.n	8008e3e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d105      	bne.n	8008e3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 ff59 	bl	8009cf6 <USBD_CtlSendStatus>
 8008e44:	e023      	b.n	8008e8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4c:	2b05      	cmp	r3, #5
 8008e4e:	d11e      	bne.n	8008e8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f004 f912 	bl	800d084 <USBD_LL_StallEP>
 8008e60:	e015      	b.n	8008e8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00d      	beq.n	8008e8a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d108      	bne.n	8008e8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	7afa      	ldrb	r2, [r7, #11]
 8008e82:	4611      	mov	r1, r2
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	4798      	blx	r3
 8008e88:	e001      	b.n	8008e8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e000      	b.n	8008e90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ea6:	7afb      	ldrb	r3, [r7, #11]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d17f      	bne.n	8008fac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3314      	adds	r3, #20
 8008eb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d15c      	bne.n	8008f76 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d915      	bls.n	8008ef4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	1ad2      	subs	r2, r2, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	461a      	mov	r2, r3
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fec6 	bl	8009c72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f004 f976 	bl	800d1de <USBD_LL_PrepareReceive>
 8008ef2:	e04e      	b.n	8008f92 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	6912      	ldr	r2, [r2, #16]
 8008efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f00:	fb01 f202 	mul.w	r2, r1, r2
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11c      	bne.n	8008f44 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d316      	bcc.n	8008f44 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d20f      	bcs.n	8008f44 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f24:	2200      	movs	r2, #0
 8008f26:	2100      	movs	r1, #0
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fea2 	bl	8009c72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f36:	2300      	movs	r3, #0
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f004 f94e 	bl	800d1de <USBD_LL_PrepareReceive>
 8008f42:	e026      	b.n	8008f92 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d105      	bne.n	8008f66 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f66:	2180      	movs	r1, #128	; 0x80
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f004 f88b 	bl	800d084 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 fed4 	bl	8009d1c <USBD_CtlReceiveStatus>
 8008f74:	e00d      	b.n	8008f92 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d004      	beq.n	8008f8a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f8a:	2180      	movs	r1, #128	; 0x80
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f004 f879 	bl	800d084 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d11d      	bne.n	8008fd8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff fe80 	bl	8008ca2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008faa:	e015      	b.n	8008fd8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00d      	beq.n	8008fd4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d108      	bne.n	8008fd4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	7afa      	ldrb	r2, [r7, #11]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	4798      	blx	r3
 8008fd2:	e001      	b.n	8008fd8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e000      	b.n	8008fda <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	2200      	movs	r2, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f004 f802 	bl	800cffa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2240      	movs	r2, #64	; 0x40
 8009002:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009006:	2340      	movs	r3, #64	; 0x40
 8009008:	2200      	movs	r2, #0
 800900a:	2180      	movs	r1, #128	; 0x80
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f003 fff4 	bl	800cffa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2240      	movs	r2, #64	; 0x40
 800901c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d009      	beq.n	800905a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6852      	ldr	r2, [r2, #4]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	4611      	mov	r1, r2
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
  }

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2204      	movs	r2, #4
 800909c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d105      	bne.n	80090cc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d10b      	bne.n	8009104 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009126:	2b40      	cmp	r3, #64	; 0x40
 8009128:	d005      	beq.n	8009136 <USBD_StdDevReq+0x26>
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d84f      	bhi.n	80091ce <USBD_StdDevReq+0xbe>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <USBD_StdDevReq+0x36>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d14b      	bne.n	80091ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
      break;
 8009144:	e048      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d839      	bhi.n	80091c2 <USBD_StdDevReq+0xb2>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <USBD_StdDevReq+0x44>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091b9 	.word	0x080091b9
 800915c:	080091c3 	.word	0x080091c3
 8009160:	080091af 	.word	0x080091af
 8009164:	080091c3 	.word	0x080091c3
 8009168:	08009187 	.word	0x08009187
 800916c:	0800917d 	.word	0x0800917d
 8009170:	080091c3 	.word	0x080091c3
 8009174:	0800919b 	.word	0x0800919b
 8009178:	08009191 	.word	0x08009191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9dc 	bl	800953c <USBD_GetDescriptor>
          break;
 8009184:	e022      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb3f 	bl	800980c <USBD_SetAddress>
          break;
 800918e:	e01d      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb7e 	bl	8009894 <USBD_SetConfig>
          break;
 8009198:	e018      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc07 	bl	80099b0 <USBD_GetConfig>
          break;
 80091a2:	e013      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc37 	bl	8009a1a <USBD_GetStatus>
          break;
 80091ac:	e00e      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc65 	bl	8009a80 <USBD_SetFeature>
          break;
 80091b6:	e009      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fc74 	bl	8009aa8 <USBD_ClrFeature>
          break;
 80091c0:	e004      	b.n	80091cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fccd 	bl	8009b64 <USBD_CtlError>
          break;
 80091ca:	bf00      	nop
      }
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fcc7 	bl	8009b64 <USBD_CtlError>
      break;
 80091d6:	bf00      	nop
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d005      	beq.n	800920a <USBD_StdItfReq+0x26>
 80091fe:	2b40      	cmp	r3, #64	; 0x40
 8009200:	d82e      	bhi.n	8009260 <USBD_StdItfReq+0x7c>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <USBD_StdItfReq+0x26>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d12a      	bne.n	8009260 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	3b01      	subs	r3, #1
 8009212:	2b02      	cmp	r3, #2
 8009214:	d81d      	bhi.n	8009252 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d813      	bhi.n	8009248 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d110      	bne.n	800925c <USBD_StdItfReq+0x78>
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fd58 	bl	8009cf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009246:	e009      	b.n	800925c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc8a 	bl	8009b64 <USBD_CtlError>
          break;
 8009250:	e004      	b.n	800925c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc85 	bl	8009b64 <USBD_CtlError>
          break;
 800925a:	e000      	b.n	800925e <USBD_StdItfReq+0x7a>
          break;
 800925c:	bf00      	nop
      }
      break;
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc7e 	bl	8009b64 <USBD_CtlError>
      break;
 8009268:	bf00      	nop
  }

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	889b      	ldrh	r3, [r3, #4]
 8009286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	d007      	beq.n	80092a4 <USBD_StdEPReq+0x30>
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	f200 8146 	bhi.w	8009526 <USBD_StdEPReq+0x2b2>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <USBD_StdEPReq+0x40>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	f040 8141 	bne.w	8009526 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
      break;
 80092b2:	e13d      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d10a      	bne.n	80092d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	e12d      	b.n	8009532 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d007      	beq.n	80092ee <USBD_StdEPReq+0x7a>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	f300 811b 	bgt.w	800951a <USBD_StdEPReq+0x2a6>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d072      	beq.n	80093ce <USBD_StdEPReq+0x15a>
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d03a      	beq.n	8009362 <USBD_StdEPReq+0xee>
 80092ec:	e115      	b.n	800951a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d002      	beq.n	80092fe <USBD_StdEPReq+0x8a>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d015      	beq.n	8009328 <USBD_StdEPReq+0xb4>
 80092fc:	e02b      	b.n	8009356 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <USBD_StdEPReq+0xaa>
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d009      	beq.n	800931e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f003 feb8 	bl	800d084 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009314:	2180      	movs	r1, #128	; 0x80
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f003 feb4 	bl	800d084 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800931c:	e020      	b.n	8009360 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc1f 	bl	8009b64 <USBD_CtlError>
              break;
 8009326:	e01b      	b.n	8009360 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10e      	bne.n	800934e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <USBD_StdEPReq+0xda>
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b80      	cmp	r3, #128	; 0x80
 800933a:	d008      	beq.n	800934e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	88db      	ldrh	r3, [r3, #6]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f003 fe9b 	bl	800d084 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fcd1 	bl	8009cf6 <USBD_CtlSendStatus>

              break;
 8009354:	e004      	b.n	8009360 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc03 	bl	8009b64 <USBD_CtlError>
              break;
 800935e:	bf00      	nop
          }
          break;
 8009360:	e0e0      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	2b02      	cmp	r3, #2
 800936a:	d002      	beq.n	8009372 <USBD_StdEPReq+0xfe>
 800936c:	2b03      	cmp	r3, #3
 800936e:	d015      	beq.n	800939c <USBD_StdEPReq+0x128>
 8009370:	e026      	b.n	80093c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <USBD_StdEPReq+0x11e>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b80      	cmp	r3, #128	; 0x80
 800937c:	d009      	beq.n	8009392 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f003 fe7e 	bl	800d084 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009388:	2180      	movs	r1, #128	; 0x80
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f003 fe7a 	bl	800d084 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009390:	e01c      	b.n	80093cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbe5 	bl	8009b64 <USBD_CtlError>
              break;
 800939a:	e017      	b.n	80093cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d112      	bne.n	80093ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f003 fe85 	bl	800d0c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc9c 	bl	8009cf6 <USBD_CtlSendStatus>
              }
              break;
 80093be:	e004      	b.n	80093ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fbce 	bl	8009b64 <USBD_CtlError>
              break;
 80093c8:	e000      	b.n	80093cc <USBD_StdEPReq+0x158>
              break;
 80093ca:	bf00      	nop
          }
          break;
 80093cc:	e0aa      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d002      	beq.n	80093de <USBD_StdEPReq+0x16a>
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d032      	beq.n	8009442 <USBD_StdEPReq+0x1ce>
 80093dc:	e097      	b.n	800950e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <USBD_StdEPReq+0x180>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d004      	beq.n	80093f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbb9 	bl	8009b64 <USBD_CtlError>
                break;
 80093f2:	e091      	b.n	8009518 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da0b      	bge.n	8009414 <USBD_StdEPReq+0x1a0>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	3310      	adds	r3, #16
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	e00b      	b.n	800942c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	3304      	adds	r3, #4
 800942c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fbfd 	bl	8009c3a <USBD_CtlSendData>
              break;
 8009440:	e06a      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da11      	bge.n	800946e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3318      	adds	r3, #24
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d117      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fb7c 	bl	8009b64 <USBD_CtlError>
                  break;
 800946c:	e054      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	f003 020f 	and.w	r2, r3, #15
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb69 	bl	8009b64 <USBD_CtlError>
                  break;
 8009492:	e041      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da0b      	bge.n	80094b4 <USBD_StdEPReq+0x240>
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3310      	adds	r3, #16
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	e00b      	b.n	80094cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <USBD_StdEPReq+0x266>
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b80      	cmp	r3, #128	; 0x80
 80094d8:	d103      	bne.n	80094e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e00e      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f003 fe0a 	bl	800d100 <USBD_LL_IsStallEP>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e002      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2202      	movs	r2, #2
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb97 	bl	8009c3a <USBD_CtlSendData>
              break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb27 	bl	8009b64 <USBD_CtlError>
              break;
 8009516:	bf00      	nop
          }
          break;
 8009518:	e004      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb21 	bl	8009b64 <USBD_CtlError>
          break;
 8009522:	bf00      	nop
      }
      break;
 8009524:	e004      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb1b 	bl	8009b64 <USBD_CtlError>
      break;
 800952e:	bf00      	nop
  }

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	885b      	ldrh	r3, [r3, #2]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	2b06      	cmp	r3, #6
 800955e:	f200 8128 	bhi.w	80097b2 <USBD_GetDescriptor+0x276>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <USBD_GetDescriptor+0x2c>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009585 	.word	0x08009585
 800956c:	0800959d 	.word	0x0800959d
 8009570:	080095dd 	.word	0x080095dd
 8009574:	080097b3 	.word	0x080097b3
 8009578:	080097b3 	.word	0x080097b3
 800957c:	08009753 	.word	0x08009753
 8009580:	0800977f 	.word	0x0800977f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7c12      	ldrb	r2, [r2, #16]
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
      break;
 800959a:	e112      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7c1b      	ldrb	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095be:	e100      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
      break;
 80095da:	e0f2      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	f200 80ac 	bhi.w	8009740 <USBD_GetDescriptor+0x204>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBD_GetDescriptor+0xb4>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009609 	.word	0x08009609
 80095f4:	0800963d 	.word	0x0800963d
 80095f8:	08009671 	.word	0x08009671
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096d9 	.word	0x080096d9
 8009604:	0800970d 	.word	0x0800970d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962a:	e091      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa98 	bl	8009b64 <USBD_CtlError>
            err++;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
          break;
 800963a:	e089      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 0108 	add.w	r1, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965e:	e077      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa7e 	bl	8009b64 <USBD_CtlError>
            err++;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	3301      	adds	r3, #1
 800966c:	72fb      	strb	r3, [r7, #11]
          break;
 800966e:	e06f      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e05d      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa64 	bl	8009b64 <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e055      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e043      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa4a 	bl	8009b64 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e03b      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e029      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa30 	bl	8009b64 <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e021      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e00f      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa16 	bl	8009b64 <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e007      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa0e 	bl	8009b64 <USBD_CtlError>
          err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800974e:	e038      	b.n	80097c2 <USBD_GetDescriptor+0x286>
 8009750:	e037      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7c1b      	ldrb	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	4610      	mov	r0, r2
 8009768:	4798      	blx	r3
 800976a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800976c:	e029      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9f7 	bl	8009b64 <USBD_CtlError>
        err++;
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	3301      	adds	r3, #1
 800977a:	72fb      	strb	r3, [r7, #11]
      break;
 800977c:	e021      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7c1b      	ldrb	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	f107 0208 	add.w	r2, r7, #8
 8009792:	4610      	mov	r0, r2
 8009794:	4798      	blx	r3
 8009796:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	2207      	movs	r2, #7
 800979e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a0:	e00f      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f9dd 	bl	8009b64 <USBD_CtlError>
        err++;
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	3301      	adds	r3, #1
 80097ae:	72fb      	strb	r3, [r7, #11]
      break;
 80097b0:	e007      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9d5 	bl	8009b64 <USBD_CtlError>
      err++;
 80097ba:	7afb      	ldrb	r3, [r7, #11]
 80097bc:	3301      	adds	r3, #1
 80097be:	72fb      	strb	r3, [r7, #11]
      break;
 80097c0:	bf00      	nop
  }

  if (err != 0U)
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d11c      	bne.n	8009802 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00d      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88da      	ldrh	r2, [r3, #6]
 80097da:	893b      	ldrh	r3, [r7, #8]
 80097dc:	4293      	cmp	r3, r2
 80097de:	bf28      	it	cs
 80097e0:	4613      	movcs	r3, r2
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097e6:	893b      	ldrh	r3, [r7, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fa24 	bl	8009c3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa7b 	bl	8009cf6 <USBD_CtlSendStatus>
 8009800:	e000      	b.n	8009804 <USBD_GetDescriptor+0x2c8>
    return;
 8009802:	bf00      	nop
    }
  }
}
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d130      	bne.n	8009880 <USBD_SetAddress+0x74>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d12c      	bne.n	8009880 <USBD_SetAddress+0x74>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	2b7f      	cmp	r3, #127	; 0x7f
 800982c:	d828      	bhi.n	8009880 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	2b03      	cmp	r3, #3
 8009842:	d104      	bne.n	800984e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f98c 	bl	8009b64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	e01d      	b.n	800988a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f003 fc7d 	bl	800d15a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa48 	bl	8009cf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	e009      	b.n	800988a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	e004      	b.n	800988a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f96e 	bl	8009b64 <USBD_CtlError>
  }
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	4b41      	ldr	r3, [pc, #260]	; (80099ac <USBD_SetConfig+0x118>)
 80098a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098a8:	4b40      	ldr	r3, [pc, #256]	; (80099ac <USBD_SetConfig+0x118>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d904      	bls.n	80098ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f956 	bl	8009b64 <USBD_CtlError>
 80098b8:	e075      	b.n	80099a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d002      	beq.n	80098ca <USBD_SetConfig+0x36>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d023      	beq.n	8009910 <USBD_SetConfig+0x7c>
 80098c8:	e062      	b.n	8009990 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098ca:	4b38      	ldr	r3, [pc, #224]	; (80099ac <USBD_SetConfig+0x118>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01a      	beq.n	8009908 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098d2:	4b36      	ldr	r3, [pc, #216]	; (80099ac <USBD_SetConfig+0x118>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2203      	movs	r2, #3
 80098e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098e4:	4b31      	ldr	r3, [pc, #196]	; (80099ac <USBD_SetConfig+0x118>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f9e4 	bl	8008cb8 <USBD_SetClassConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d104      	bne.n	8009900 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f933 	bl	8009b64 <USBD_CtlError>
            return;
 80098fe:	e052      	b.n	80099a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9f8 	bl	8009cf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009906:	e04e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f9f4 	bl	8009cf6 <USBD_CtlSendStatus>
        break;
 800990e:	e04a      	b.n	80099a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009910:	4b26      	ldr	r3, [pc, #152]	; (80099ac <USBD_SetConfig+0x118>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d112      	bne.n	800993e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009920:	4b22      	ldr	r3, [pc, #136]	; (80099ac <USBD_SetConfig+0x118>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800992a:	4b20      	ldr	r3, [pc, #128]	; (80099ac <USBD_SetConfig+0x118>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9e0 	bl	8008cf6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f9dd 	bl	8009cf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800993c:	e033      	b.n	80099a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800993e:	4b1b      	ldr	r3, [pc, #108]	; (80099ac <USBD_SetConfig+0x118>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	429a      	cmp	r2, r3
 800994a:	d01d      	beq.n	8009988 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff f9ce 	bl	8008cf6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <USBD_SetConfig+0x118>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009964:	4b11      	ldr	r3, [pc, #68]	; (80099ac <USBD_SetConfig+0x118>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff f9a4 	bl	8008cb8 <USBD_SetClassConfig>
 8009970:	4603      	mov	r3, r0
 8009972:	2b02      	cmp	r3, #2
 8009974:	d104      	bne.n	8009980 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8f3 	bl	8009b64 <USBD_CtlError>
            return;
 800997e:	e012      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9b8 	bl	8009cf6 <USBD_CtlSendStatus>
        break;
 8009986:	e00e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9b4 	bl	8009cf6 <USBD_CtlSendStatus>
        break;
 800998e:	e00a      	b.n	80099a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8e6 	bl	8009b64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <USBD_SetConfig+0x118>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff f9a9 	bl	8008cf6 <USBD_ClrClassConfig>
        break;
 80099a4:	bf00      	nop
    }
  }
}
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	200015b8 	.word	0x200015b8

080099b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d004      	beq.n	80099cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8cd 	bl	8009b64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ca:	e022      	b.n	8009a12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	dc02      	bgt.n	80099dc <USBD_GetConfig+0x2c>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dc03      	bgt.n	80099e2 <USBD_GetConfig+0x32>
 80099da:	e015      	b.n	8009a08 <USBD_GetConfig+0x58>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d00b      	beq.n	80099f8 <USBD_GetConfig+0x48>
 80099e0:	e012      	b.n	8009a08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3308      	adds	r3, #8
 80099ec:	2201      	movs	r2, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f922 	bl	8009c3a <USBD_CtlSendData>
        break;
 80099f6:	e00c      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2201      	movs	r2, #1
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f91a 	bl	8009c3a <USBD_CtlSendData>
        break;
 8009a06:	e004      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8aa 	bl	8009b64 <USBD_CtlError>
        break;
 8009a10:	bf00      	nop
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d81e      	bhi.n	8009a6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d004      	beq.n	8009a42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f892 	bl	8009b64 <USBD_CtlError>
        break;
 8009a40:	e01a      	b.n	8009a78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f043 0202 	orr.w	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	330c      	adds	r3, #12
 8009a62:	2202      	movs	r2, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f8e7 	bl	8009c3a <USBD_CtlSendData>
      break;
 8009a6c:	e004      	b.n	8009a78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f877 	bl	8009b64 <USBD_CtlError>
      break;
 8009a76:	bf00      	nop
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d106      	bne.n	8009aa0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f92b 	bl	8009cf6 <USBD_CtlSendStatus>
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d80b      	bhi.n	8009ad6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10c      	bne.n	8009ae0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f911 	bl	8009cf6 <USBD_CtlSendStatus>
      }
      break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f843 	bl	8009b64 <USBD_CtlError>
      break;
 8009ade:	e000      	b.n	8009ae2 <USBD_ClrFeature+0x3a>
      break;
 8009ae0:	bf00      	nop
  }
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785a      	ldrb	r2, [r3, #1]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	3302      	adds	r3, #2
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3303      	adds	r3, #3
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4413      	add	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3304      	adds	r3, #4
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	3305      	adds	r3, #5
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3306      	adds	r3, #6
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	3307      	adds	r3, #7
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	80da      	strh	r2, [r3, #6]

}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f003 fa87 	bl	800d084 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f003 fa83 	bl	800d084 <USBD_LL_StallEP>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d032      	beq.n	8009c02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f834 	bl	8009c0a <USBD_GetLen>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	75fa      	strb	r2, [r7, #23]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	75fa      	strb	r2, [r7, #23]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	2203      	movs	r2, #3
 8009bd0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bd2:	e012      	b.n	8009bfa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	60fa      	str	r2, [r7, #12]
 8009bda:	7dfa      	ldrb	r2, [r7, #23]
 8009bdc:	1c51      	adds	r1, r2, #1
 8009bde:	75f9      	strb	r1, [r7, #23]
 8009be0:	4611      	mov	r1, r2
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	440a      	add	r2, r1
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	75fa      	strb	r2, [r7, #23]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e8      	bne.n	8009bd4 <USBD_GetString+0x4e>
    }
  }
}
 8009c02:	bf00      	nop
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c16:	e005      	b.n	8009c24 <USBD_GetLen+0x1a>
  {
    len++;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3301      	adds	r3, #1
 8009c22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f5      	bne.n	8009c18 <USBD_GetLen+0xe>
  }

  return len;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	4613      	mov	r3, r2
 8009c46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c50:	88fa      	ldrh	r2, [r7, #6]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c56:	88fa      	ldrh	r2, [r7, #6]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	2100      	movs	r1, #0
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f003 fa98 	bl	800d198 <USBD_LL_Transmit>

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	2100      	movs	r1, #0
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f003 fa86 	bl	800d198 <USBD_LL_Transmit>

  return USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2203      	movs	r2, #3
 8009ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cac:	88fa      	ldrh	r2, [r7, #6]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009cb4:	88fa      	ldrh	r2, [r7, #6]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f003 fa8b 	bl	800d1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ce0:	88fb      	ldrh	r3, [r7, #6]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f003 fa79 	bl	800d1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2204      	movs	r2, #4
 8009d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d06:	2300      	movs	r3, #0
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f003 fa43 	bl	800d198 <USBD_LL_Transmit>

  return USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2205      	movs	r2, #5
 8009d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f003 fa53 	bl	800d1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d4a:	f3ef 8305 	mrs	r3, IPSR
 8009d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10f      	bne.n	8009d76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d56:	f3ef 8310 	mrs	r3, PRIMASK
 8009d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <osKernelInitialize+0x32>
 8009d62:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <osKernelInitialize+0x64>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d109      	bne.n	8009d7e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8009d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009d76:	f06f 0305 	mvn.w	r3, #5
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	e00c      	b.n	8009d98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d7e:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <osKernelInitialize+0x64>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d105      	bne.n	8009d92 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009d86:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <osKernelInitialize+0x64>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	e002      	b.n	8009d98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009d92:	f04f 33ff 	mov.w	r3, #4294967295
 8009d96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d98:	68fb      	ldr	r3, [r7, #12]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	200015bc 	.word	0x200015bc

08009dac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db2:	f3ef 8305 	mrs	r3, IPSR
 8009db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10f      	bne.n	8009dde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc2:	607b      	str	r3, [r7, #4]
  return(result);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <osKernelStart+0x32>
 8009dca:	4b11      	ldr	r3, [pc, #68]	; (8009e10 <osKernelStart+0x64>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d109      	bne.n	8009de6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009dde:	f06f 0305 	mvn.w	r3, #5
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e00e      	b.n	8009e04 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <osKernelStart+0x64>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d107      	bne.n	8009dfe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <osKernelStart+0x64>)
 8009df0:	2202      	movs	r2, #2
 8009df2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009df4:	f001 fa48 	bl	800b288 <vTaskStartScheduler>
      stat = osOK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e002      	b.n	8009e04 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200015bc 	.word	0x200015bc

08009e14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b092      	sub	sp, #72	; 0x48
 8009e18:	af04      	add	r7, sp, #16
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e24:	f3ef 8305 	mrs	r3, IPSR
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 8094 	bne.w	8009f5a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e32:	f3ef 8310 	mrs	r3, PRIMASK
 8009e36:	623b      	str	r3, [r7, #32]
  return(result);
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f040 808d 	bne.w	8009f5a <osThreadNew+0x146>
 8009e40:	4b48      	ldr	r3, [pc, #288]	; (8009f64 <osThreadNew+0x150>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d106      	bne.n	8009e56 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e48:	f3ef 8311 	mrs	r3, BASEPRI
 8009e4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 8082 	bne.w	8009f5a <osThreadNew+0x146>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d07e      	beq.n	8009f5a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009e5c:	2380      	movs	r3, #128	; 0x80
 8009e5e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009e60:	2318      	movs	r3, #24
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009e64:	2300      	movs	r3, #0
 8009e66:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009e68:	f107 031b 	add.w	r3, r7, #27
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d045      	beq.n	8009f06 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <osThreadNew+0x74>
        name = attr->name;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <osThreadNew+0x9a>
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	2b38      	cmp	r3, #56	; 0x38
 8009ea0:	d805      	bhi.n	8009eae <osThreadNew+0x9a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <osThreadNew+0x9e>
        return (NULL);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e054      	b.n	8009f5c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00e      	beq.n	8009ee8 <osThreadNew+0xd4>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	2b5b      	cmp	r3, #91	; 0x5b
 8009ed0:	d90a      	bls.n	8009ee8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d006      	beq.n	8009ee8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <osThreadNew+0xd4>
        mem = 1;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ee6:	e010      	b.n	8009f0a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10c      	bne.n	8009f0a <osThreadNew+0xf6>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d108      	bne.n	8009f0a <osThreadNew+0xf6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <osThreadNew+0xf6>
          mem = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f04:	e001      	b.n	8009f0a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d110      	bne.n	8009f32 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f18:	9202      	str	r2, [sp, #8]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f001 f816 	bl	800af58 <xTaskCreateStatic>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	e013      	b.n	8009f5a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d110      	bne.n	8009f5a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	f107 0314 	add.w	r3, r7, #20
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f001 f860 	bl	800b010 <xTaskCreate>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <osThreadNew+0x146>
          hTask = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f5a:	697b      	ldr	r3, [r7, #20]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3738      	adds	r7, #56	; 0x38
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	200015bc 	.word	0x200015bc

08009f68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08c      	sub	sp, #48	; 0x30
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f78:	f3ef 8305 	mrs	r3, IPSR
 8009f7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d16f      	bne.n	800a064 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f84:	f3ef 8310 	mrs	r3, PRIMASK
 8009f88:	617b      	str	r3, [r7, #20]
  return(result);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d169      	bne.n	800a064 <osMessageQueueNew+0xfc>
 8009f90:	4b37      	ldr	r3, [pc, #220]	; (800a070 <osMessageQueueNew+0x108>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d105      	bne.n	8009fa4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f98:	f3ef 8311 	mrs	r3, BASEPRI
 8009f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d15f      	bne.n	800a064 <osMessageQueueNew+0xfc>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d05c      	beq.n	800a064 <osMessageQueueNew+0xfc>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d059      	beq.n	800a064 <osMessageQueueNew+0xfc>
    mem = -1;
 8009fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d029      	beq.n	800a010 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d012      	beq.n	8009fea <osMessageQueueNew+0x82>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	2b4f      	cmp	r3, #79	; 0x4f
 8009fca:	d90e      	bls.n	8009fea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00a      	beq.n	8009fea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	695a      	ldr	r2, [r3, #20]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d302      	bcc.n	8009fea <osMessageQueueNew+0x82>
        mem = 1;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	623b      	str	r3, [r7, #32]
 8009fe8:	e014      	b.n	800a014 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d110      	bne.n	800a014 <osMessageQueueNew+0xac>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10c      	bne.n	800a014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d108      	bne.n	800a014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <osMessageQueueNew+0xac>
          mem = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	623b      	str	r3, [r7, #32]
 800a00e:	e001      	b.n	800a014 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d10b      	bne.n	800a032 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	2100      	movs	r1, #0
 800a024:	9100      	str	r1, [sp, #0]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fa59 	bl	800a4e0 <xQueueGenericCreateStatic>
 800a02e:	6278      	str	r0, [r7, #36]	; 0x24
 800a030:	e008      	b.n	800a044 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d105      	bne.n	800a044 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a038:	2200      	movs	r2, #0
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 fac6 	bl	800a5ce <xQueueGenericCreate>
 800a042:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00c      	beq.n	800a064 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	e001      	b.n	800a05c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a05c:	69f9      	ldr	r1, [r7, #28]
 800a05e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a060:	f000 ff1c 	bl	800ae9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a066:	4618      	mov	r0, r3
 800a068:	3728      	adds	r7, #40	; 0x28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200015bc 	.word	0x200015bc

0800a074 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a088:	2300      	movs	r3, #0
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a08c:	f3ef 8305 	mrs	r3, IPSR
 800a090:	61fb      	str	r3, [r7, #28]
  return(result);
 800a092:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10f      	bne.n	800a0b8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a098:	f3ef 8310 	mrs	r3, PRIMASK
 800a09c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d109      	bne.n	800a0b8 <osMessageQueuePut+0x44>
 800a0a4:	4b2b      	ldr	r3, [pc, #172]	; (800a154 <osMessageQueuePut+0xe0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d12e      	bne.n	800a10a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a0b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d028      	beq.n	800a10a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <osMessageQueuePut+0x56>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <osMessageQueuePut+0x56>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a0ca:	f06f 0303 	mvn.w	r3, #3
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0d0:	e039      	b.n	800a146 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a0d6:	f107 0210 	add.w	r2, r7, #16
 800a0da:	2300      	movs	r3, #0
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	6a38      	ldr	r0, [r7, #32]
 800a0e0:	f000 fbd4 	bl	800a88c <xQueueGenericSendFromISR>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d003      	beq.n	800a0f2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a0ea:	f06f 0302 	mvn.w	r3, #2
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0f0:	e029      	b.n	800a146 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d026      	beq.n	800a146 <osMessageQueuePut+0xd2>
 800a0f8:	4b17      	ldr	r3, [pc, #92]	; (800a158 <osMessageQueuePut+0xe4>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a108:	e01d      	b.n	800a146 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <osMessageQueuePut+0xa2>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d103      	bne.n	800a11e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a116:	f06f 0303 	mvn.w	r3, #3
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
 800a11c:	e014      	b.n	800a148 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a11e:	2300      	movs	r3, #0
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	6a38      	ldr	r0, [r7, #32]
 800a126:	f000 fab3 	bl	800a690 <xQueueGenericSend>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d00b      	beq.n	800a148 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a136:	f06f 0301 	mvn.w	r3, #1
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
 800a13c:	e004      	b.n	800a148 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a13e:	f06f 0302 	mvn.w	r3, #2
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
 800a144:	e000      	b.n	800a148 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a146:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3728      	adds	r7, #40	; 0x28
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	200015bc 	.word	0x200015bc
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a16e:	2300      	movs	r3, #0
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a172:	f3ef 8305 	mrs	r3, IPSR
 800a176:	61fb      	str	r3, [r7, #28]
  return(result);
 800a178:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10f      	bne.n	800a19e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a17e:	f3ef 8310 	mrs	r3, PRIMASK
 800a182:	61bb      	str	r3, [r7, #24]
  return(result);
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d109      	bne.n	800a19e <osMessageQueueGet+0x42>
 800a18a:	4b2b      	ldr	r3, [pc, #172]	; (800a238 <osMessageQueueGet+0xdc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d12e      	bne.n	800a1f0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a192:	f3ef 8311 	mrs	r3, BASEPRI
 800a196:	617b      	str	r3, [r7, #20]
  return(result);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d028      	beq.n	800a1f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <osMessageQueueGet+0x54>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <osMessageQueueGet+0x54>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a1b0:	f06f 0303 	mvn.w	r3, #3
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1b6:	e038      	b.n	800a22a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a1bc:	f107 0310 	add.w	r3, r7, #16
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	6a38      	ldr	r0, [r7, #32]
 800a1c6:	f000 fcd9 	bl	800ab7c <xQueueReceiveFromISR>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d003      	beq.n	800a1d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a1d0:	f06f 0302 	mvn.w	r3, #2
 800a1d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1d6:	e028      	b.n	800a22a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d025      	beq.n	800a22a <osMessageQueueGet+0xce>
 800a1de:	4b17      	ldr	r3, [pc, #92]	; (800a23c <osMessageQueueGet+0xe0>)
 800a1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1ee:	e01c      	b.n	800a22a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <osMessageQueueGet+0xa0>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a1fc:	f06f 0303 	mvn.w	r3, #3
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
 800a202:	e013      	b.n	800a22c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	6a38      	ldr	r0, [r7, #32]
 800a20a:	f000 fbd7 	bl	800a9bc <xQueueReceive>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b01      	cmp	r3, #1
 800a212:	d00b      	beq.n	800a22c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a21a:	f06f 0301 	mvn.w	r3, #1
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
 800a220:	e004      	b.n	800a22c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a222:	f06f 0302 	mvn.w	r3, #2
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
 800a228:	e000      	b.n	800a22c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a22a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	200015bc 	.word	0x200015bc
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a07      	ldr	r2, [pc, #28]	; (800a26c <vApplicationGetIdleTaskMemory+0x2c>)
 800a250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a06      	ldr	r2, [pc, #24]	; (800a270 <vApplicationGetIdleTaskMemory+0x30>)
 800a256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2280      	movs	r2, #128	; 0x80
 800a25c:	601a      	str	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	200015c0 	.word	0x200015c0
 800a270:	2000161c 	.word	0x2000161c

0800a274 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a284:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	4a06      	ldr	r2, [pc, #24]	; (800a2a4 <vApplicationGetTimerTaskMemory+0x30>)
 800a28a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	2000181c 	.word	0x2000181c
 800a2a4:	20001878 	.word	0x20001878

0800a2a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f103 0208 	add.w	r2, r3, #8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f103 0208 	add.w	r2, r3, #8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f103 0208 	add.w	r2, r3, #8
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
}
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d103      	bne.n	800a36a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	e00c      	b.n	800a384 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3308      	adds	r3, #8
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e002      	b.n	800a378 <vListInsert+0x2e>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	429a      	cmp	r2, r3
 800a382:	d2f6      	bcs.n	800a372 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	601a      	str	r2, [r3, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6892      	ldr	r2, [r2, #8]
 800a3d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6852      	ldr	r2, [r2, #4]
 800a3dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d103      	bne.n	800a3f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	1e5a      	subs	r2, r3, #1
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a43a:	f002 f893 	bl	800c564 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	68f9      	ldr	r1, [r7, #12]
 800a448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	441a      	add	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	3b01      	subs	r3, #1
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	22ff      	movs	r2, #255	; 0xff
 800a47e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	22ff      	movs	r2, #255	; 0xff
 800a486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d114      	bne.n	800a4ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3310      	adds	r3, #16
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 f981 	bl	800b7a4 <xTaskRemoveFromEventList>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d012      	beq.n	800a4ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <xQueueGenericReset+0xcc>)
 800a4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	e009      	b.n	800a4ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3310      	adds	r3, #16
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fef2 	bl	800a2a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3324      	adds	r3, #36	; 0x24
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff feed 	bl	800a2a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4ce:	f002 f879 	bl	800c5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4d2:	2301      	movs	r3, #1
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08e      	sub	sp, #56	; 0x38
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a506:	bf00      	nop
 800a508:	e7fe      	b.n	800a508 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <xQueueGenericCreateStatic+0x52>
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <xQueueGenericCreateStatic+0x56>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <xQueueGenericCreateStatic+0x58>
 800a536:	2300      	movs	r3, #0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	623b      	str	r3, [r7, #32]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <xQueueGenericCreateStatic+0x7e>
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <xQueueGenericCreateStatic+0x82>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <xQueueGenericCreateStatic+0x84>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	61fb      	str	r3, [r7, #28]
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a57e:	2350      	movs	r3, #80	; 0x50
 800a580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b50      	cmp	r3, #80	; 0x50
 800a586:	d00a      	beq.n	800a59e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	61bb      	str	r3, [r7, #24]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	68b9      	ldr	r1, [r7, #8]
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f843 	bl	800a64a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3730      	adds	r7, #48	; 0x30
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b08a      	sub	sp, #40	; 0x28
 800a5d2:	af02      	add	r7, sp, #8
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	613b      	str	r3, [r7, #16]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	e004      	b.n	800a60e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	fb02 f303 	mul.w	r3, r2, r3
 800a60c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	3350      	adds	r3, #80	; 0x50
 800a612:	4618      	mov	r0, r3
 800a614:	f002 f8c8 	bl	800c7a8 <pvPortMalloc>
 800a618:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00f      	beq.n	800a640 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	3350      	adds	r3, #80	; 0x50
 800a624:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a62e:	79fa      	ldrb	r2, [r7, #7]
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f805 	bl	800a64a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a640:	69bb      	ldr	r3, [r7, #24]
	}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d103      	bne.n	800a666 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	e002      	b.n	800a66c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a678:	2101      	movs	r1, #1
 800a67a:	69b8      	ldr	r0, [r7, #24]
 800a67c:	f7ff fec8 	bl	800a410 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	78fa      	ldrb	r2, [r7, #3]
 800a684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08e      	sub	sp, #56	; 0x38
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueGenericSend+0x32>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <xQueueGenericSend+0x40>
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <xQueueGenericSend+0x44>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <xQueueGenericSend+0x46>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10a      	bne.n	800a6f0 <xQueueGenericSend+0x60>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d103      	bne.n	800a6fe <xQueueGenericSend+0x6e>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <xQueueGenericSend+0x72>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <xQueueGenericSend+0x74>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0x8e>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	623b      	str	r3, [r7, #32]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a71e:	f001 fa05 	bl	800bb2c <xTaskGetSchedulerState>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <xQueueGenericSend+0x9e>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <xQueueGenericSend+0xa2>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <xQueueGenericSend+0xa4>
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <xQueueGenericSend+0xbe>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	61fb      	str	r3, [r7, #28]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a74e:	f001 ff09 	bl	800c564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d302      	bcc.n	800a764 <xQueueGenericSend+0xd4>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d129      	bne.n	800a7b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a76a:	f000 fa87 	bl	800ac7c <prvCopyDataToQueue>
 800a76e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d010      	beq.n	800a79a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	3324      	adds	r3, #36	; 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 f811 	bl	800b7a4 <xTaskRemoveFromEventList>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d013      	beq.n	800a7b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a788:	4b3f      	ldr	r3, [pc, #252]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	e00a      	b.n	800a7b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7a0:	4b39      	ldr	r3, [pc, #228]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7b0:	f001 ff08 	bl	800c5c4 <vPortExitCritical>
				return pdPASS;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e063      	b.n	800a880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7be:	f001 ff01 	bl	800c5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e05c      	b.n	800a880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7cc:	f107 0314 	add.w	r3, r7, #20
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 f84b 	bl	800b86c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7da:	f001 fef3 	bl	800c5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7de:	f000 fdb9 	bl	800b354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7e2:	f001 febf 	bl	800c564 <vPortEnterCritical>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d103      	bne.n	800a7fc <xQueueGenericSend+0x16c>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a802:	b25b      	sxtb	r3, r3
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d103      	bne.n	800a812 <xQueueGenericSend+0x182>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a812:	f001 fed7 	bl	800c5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a816:	1d3a      	adds	r2, r7, #4
 800a818:	f107 0314 	add.w	r3, r7, #20
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 f83a 	bl	800b898 <xTaskCheckForTimeOut>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d124      	bne.n	800a874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82c:	f000 fb1e 	bl	800ae6c <prvIsQueueFull>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d018      	beq.n	800a868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3310      	adds	r3, #16
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ff60 	bl	800b704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a846:	f000 faa9 	bl	800ad9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a84a:	f000 fd91 	bl	800b370 <xTaskResumeAll>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	f47f af7c 	bne.w	800a74e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	e772      	b.n	800a74e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86a:	f000 fa97 	bl	800ad9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a86e:	f000 fd7f 	bl	800b370 <xTaskResumeAll>
 800a872:	e76c      	b.n	800a74e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a876:	f000 fa91 	bl	800ad9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a87a:	f000 fd79 	bl	800b370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a87e:	2300      	movs	r3, #0
		}
	}
}
 800a880:	4618      	mov	r0, r3
 800a882:	3738      	adds	r7, #56	; 0x38
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d103      	bne.n	800a8c8 <xQueueGenericSendFromISR+0x3c>
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <xQueueGenericSendFromISR+0x40>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e000      	b.n	800a8ce <xQueueGenericSendFromISR+0x42>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	623b      	str	r3, [r7, #32]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d103      	bne.n	800a8f6 <xQueueGenericSendFromISR+0x6a>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSendFromISR+0x6e>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSendFromISR+0x70>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61fb      	str	r3, [r7, #28]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a916:	f001 ff07 	bl	800c728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a91a:	f3ef 8211 	mrs	r2, BASEPRI
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61ba      	str	r2, [r7, #24]
 800a930:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a932:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <xQueueGenericSendFromISR+0xbc>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d12c      	bne.n	800a9a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a958:	f000 f990 	bl	800ac7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a95c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a964:	d112      	bne.n	800a98c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	4618      	mov	r0, r3
 800a974:	f000 ff16 	bl	800b7a4 <xTaskRemoveFromEventList>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00e      	beq.n	800a99c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	e007      	b.n	800a99c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a990:	3301      	adds	r3, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	b25a      	sxtb	r2, r3
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a99c:	2301      	movs	r3, #1
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a9a0:	e001      	b.n	800a9a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3738      	adds	r7, #56	; 0x38
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08c      	sub	sp, #48	; 0x30
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <xQueueReceive+0x30>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	623b      	str	r3, [r7, #32]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <xQueueReceive+0x3e>
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <xQueueReceive+0x42>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <xQueueReceive+0x44>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <xQueueReceive+0x5e>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	61fb      	str	r3, [r7, #28]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa1a:	f001 f887 	bl	800bb2c <xTaskGetSchedulerState>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <xQueueReceive+0x6e>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <xQueueReceive+0x72>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <xQueueReceive+0x74>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <xQueueReceive+0x8e>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	61bb      	str	r3, [r7, #24]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa4a:	f001 fd8b 	bl	800c564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d01f      	beq.n	800aa9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5e:	f000 f977 	bl	800ad50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	1e5a      	subs	r2, r3, #1
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00f      	beq.n	800aa92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	3310      	adds	r3, #16
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fe94 	bl	800b7a4 <xTaskRemoveFromEventList>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d007      	beq.n	800aa92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa82:	4b3d      	ldr	r3, [pc, #244]	; (800ab78 <xQueueReceive+0x1bc>)
 800aa84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa92:	f001 fd97 	bl	800c5c4 <vPortExitCritical>
				return pdPASS;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e069      	b.n	800ab6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa0:	f001 fd90 	bl	800c5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e062      	b.n	800ab6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaae:	f107 0310 	add.w	r3, r7, #16
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 feda 	bl	800b86c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aabc:	f001 fd82 	bl	800c5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac0:	f000 fc48 	bl	800b354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac4:	f001 fd4e 	bl	800c564 <vPortEnterCritical>
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d103      	bne.n	800aade <xQueueReceive+0x122>
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d103      	bne.n	800aaf4 <xQueueReceive+0x138>
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf4:	f001 fd66 	bl	800c5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf8:	1d3a      	adds	r2, r7, #4
 800aafa:	f107 0310 	add.w	r3, r7, #16
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fec9 	bl	800b898 <xTaskCheckForTimeOut>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d123      	bne.n	800ab54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0e:	f000 f997 	bl	800ae40 <prvIsQueueEmpty>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d017      	beq.n	800ab48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	3324      	adds	r3, #36	; 0x24
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fdef 	bl	800b704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab28:	f000 f938 	bl	800ad9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab2c:	f000 fc20 	bl	800b370 <xTaskResumeAll>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d189      	bne.n	800aa4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <xQueueReceive+0x1bc>)
 800ab38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	e780      	b.n	800aa4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4a:	f000 f927 	bl	800ad9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab4e:	f000 fc0f 	bl	800b370 <xTaskResumeAll>
 800ab52:	e77a      	b.n	800aa4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab56:	f000 f921 	bl	800ad9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab5a:	f000 fc09 	bl	800b370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab60:	f000 f96e 	bl	800ae40 <prvIsQueueEmpty>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f43f af6f 	beq.w	800aa4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3730      	adds	r7, #48	; 0x30
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08e      	sub	sp, #56	; 0x38
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10a      	bne.n	800aba8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	623b      	str	r3, [r7, #32]
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <xQueueReceiveFromISR+0x3a>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <xQueueReceiveFromISR+0x3e>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueReceiveFromISR+0x40>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	61fb      	str	r3, [r7, #28]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abd6:	f001 fda7 	bl	800c728 <vPortValidateInterruptPriority>
	__asm volatile
 800abda:	f3ef 8211 	mrs	r2, BASEPRI
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	61ba      	str	r2, [r7, #24]
 800abf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800abf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d02f      	beq.n	800ac62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac0c:	68b9      	ldr	r1, [r7, #8]
 800ac0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac10:	f000 f89e 	bl	800ad50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	1e5a      	subs	r2, r3, #1
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d112      	bne.n	800ac4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d016      	beq.n	800ac5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	3310      	adds	r3, #16
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fdb6 	bl	800b7a4 <xTaskRemoveFromEventList>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e007      	b.n	800ac5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac50:	3301      	adds	r3, #1
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	b25a      	sxtb	r2, r3
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac60:	e001      	b.n	800ac66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	637b      	str	r3, [r7, #52]	; 0x34
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f383 8811 	msr	BASEPRI, r3
}
 800ac70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3738      	adds	r7, #56	; 0x38
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10d      	bne.n	800acb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d14d      	bne.n	800ad3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 ff5e 	bl	800bb68 <xTaskPriorityDisinherit>
 800acac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	605a      	str	r2, [r3, #4]
 800acb4:	e043      	b.n	800ad3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d119      	bne.n	800acf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6898      	ldr	r0, [r3, #8]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc4:	461a      	mov	r2, r3
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	f002 fb34 	bl	800d334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d32b      	bcc.n	800ad3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	609a      	str	r2, [r3, #8]
 800acee:	e026      	b.n	800ad3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68d8      	ldr	r0, [r3, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf8:	461a      	mov	r2, r3
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	f002 fb1a 	bl	800d334 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	425b      	negs	r3, r3
 800ad0a:	441a      	add	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d207      	bcs.n	800ad2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	425b      	negs	r3, r3
 800ad26:	441a      	add	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d105      	bne.n	800ad3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad46:	697b      	ldr	r3, [r7, #20]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d018      	beq.n	800ad94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6a:	441a      	add	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68da      	ldr	r2, [r3, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d303      	bcc.n	800ad84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68d9      	ldr	r1, [r3, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	6838      	ldr	r0, [r7, #0]
 800ad90:	f002 fad0 	bl	800d334 <memcpy>
	}
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ada4:	f001 fbde 	bl	800c564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adb0:	e011      	b.n	800add6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d012      	beq.n	800ade0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3324      	adds	r3, #36	; 0x24
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fcf0 	bl	800b7a4 <xTaskRemoveFromEventList>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adca:	f000 fdc7 	bl	800b95c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	3b01      	subs	r3, #1
 800add2:	b2db      	uxtb	r3, r3
 800add4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800add6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adda:	2b00      	cmp	r3, #0
 800addc:	dce9      	bgt.n	800adb2 <prvUnlockQueue+0x16>
 800adde:	e000      	b.n	800ade2 <prvUnlockQueue+0x46>
					break;
 800ade0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	22ff      	movs	r2, #255	; 0xff
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800adea:	f001 fbeb 	bl	800c5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adee:	f001 fbb9 	bl	800c564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adfa:	e011      	b.n	800ae20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d012      	beq.n	800ae2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3310      	adds	r3, #16
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fccb 	bl	800b7a4 <xTaskRemoveFromEventList>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae14:	f000 fda2 	bl	800b95c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dce9      	bgt.n	800adfc <prvUnlockQueue+0x60>
 800ae28:	e000      	b.n	800ae2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	22ff      	movs	r2, #255	; 0xff
 800ae30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae34:	f001 fbc6 	bl	800c5c4 <vPortExitCritical>
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae48:	f001 fb8c 	bl	800c564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	e001      	b.n	800ae5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae5e:	f001 fbb1 	bl	800c5c4 <vPortExitCritical>

	return xReturn;
 800ae62:	68fb      	ldr	r3, [r7, #12]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae74:	f001 fb76 	bl	800c564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d102      	bne.n	800ae8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e001      	b.n	800ae8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae8e:	f001 fb99 	bl	800c5c4 <vPortExitCritical>

	return xReturn;
 800ae92:	68fb      	ldr	r3, [r7, #12]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e014      	b.n	800aed6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aeac:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10b      	bne.n	800aed0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aeb8:	490c      	ldr	r1, [pc, #48]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <vQueueAddToRegistry+0x50>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4413      	add	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aece:	e006      	b.n	800aede <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b07      	cmp	r3, #7
 800aeda:	d9e7      	bls.n	800aeac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20001c78 	.word	0x20001c78

0800aef0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af00:	f001 fb30 	bl	800c564 <vPortEnterCritical>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af0a:	b25b      	sxtb	r3, r3
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d103      	bne.n	800af1a <vQueueWaitForMessageRestricted+0x2a>
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af20:	b25b      	sxtb	r3, r3
 800af22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af26:	d103      	bne.n	800af30 <vQueueWaitForMessageRestricted+0x40>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af30:	f001 fb48 	bl	800c5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fc01 	bl	800b74c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7ff ff26 	bl	800ad9c <prvUnlockQueue>
	}
 800af50:	bf00      	nop
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08e      	sub	sp, #56	; 0x38
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	623b      	str	r3, [r7, #32]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xTaskCreateStatic+0x46>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	61fb      	str	r3, [r7, #28]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af9e:	235c      	movs	r3, #92	; 0x5c
 800afa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b5c      	cmp	r3, #92	; 0x5c
 800afa6:	d00a      	beq.n	800afbe <xTaskCreateStatic+0x66>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	61bb      	str	r3, [r7, #24]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d01e      	beq.n	800b002 <xTaskCreateStatic+0xaa>
 800afc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01b      	beq.n	800b002 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afdc:	2300      	movs	r3, #0
 800afde:	9303      	str	r3, [sp, #12]
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	9302      	str	r3, [sp, #8]
 800afe4:	f107 0314 	add.w	r3, r7, #20
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f850 	bl	800b09a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800affa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800affc:	f000 f8d4 	bl	800b1a8 <prvAddNewTaskToReadyList>
 800b000:	e001      	b.n	800b006 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b006:	697b      	ldr	r3, [r7, #20]
	}
 800b008:	4618      	mov	r0, r3
 800b00a:	3728      	adds	r7, #40	; 0x28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08c      	sub	sp, #48	; 0x30
 800b014:	af04      	add	r7, sp, #16
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	4613      	mov	r3, r2
 800b01e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fbbf 	bl	800c7a8 <pvPortMalloc>
 800b02a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00e      	beq.n	800b050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b032:	205c      	movs	r0, #92	; 0x5c
 800b034:	f001 fbb8 	bl	800c7a8 <pvPortMalloc>
 800b038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	631a      	str	r2, [r3, #48]	; 0x30
 800b046:	e005      	b.n	800b054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b048:	6978      	ldr	r0, [r7, #20]
 800b04a:	f001 fc71 	bl	800c930 <vPortFree>
 800b04e:	e001      	b.n	800b054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d017      	beq.n	800b08a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b062:	88fa      	ldrh	r2, [r7, #6]
 800b064:	2300      	movs	r3, #0
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	9302      	str	r3, [sp, #8]
 800b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f80e 	bl	800b09a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b07e:	69f8      	ldr	r0, [r7, #28]
 800b080:	f000 f892 	bl	800b1a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b084:	2301      	movs	r3, #1
 800b086:	61bb      	str	r3, [r7, #24]
 800b088:	e002      	b.n	800b090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295
 800b08e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b090:	69bb      	ldr	r3, [r7, #24]
	}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b088      	sub	sp, #32
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
 800b0a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	21a5      	movs	r1, #165	; 0xa5
 800b0b4:	f002 f94c 	bl	800d350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	f023 0307 	bic.w	r3, r3, #7
 800b0d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	617b      	str	r3, [r7, #20]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61fb      	str	r3, [r7, #28]
 800b0f6:	e012      	b.n	800b11e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	7819      	ldrb	r1, [r3, #0]
 800b100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	4413      	add	r3, r2
 800b106:	3334      	adds	r3, #52	; 0x34
 800b108:	460a      	mov	r2, r1
 800b10a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61fb      	str	r3, [r7, #28]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	2b0f      	cmp	r3, #15
 800b122:	d9e9      	bls.n	800b0f8 <prvInitialiseNewTask+0x5e>
 800b124:	e000      	b.n	800b128 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b126:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	2b37      	cmp	r3, #55	; 0x37
 800b134:	d901      	bls.n	800b13a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b136:	2337      	movs	r3, #55	; 0x37
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b13e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b144:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	2200      	movs	r2, #0
 800b14a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	3304      	adds	r3, #4
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff f8c9 	bl	800a2e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	3318      	adds	r3, #24
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff f8c4 	bl	800a2e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b164:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b174:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	2200      	movs	r2, #0
 800b17a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f001 f8c1 	bl	800c310 <pxPortInitialiseStack>
 800b18e:	4602      	mov	r2, r0
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1b0:	f001 f9d8 	bl	800c564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1b4:	4b2d      	ldr	r3, [pc, #180]	; (800b26c <prvAddNewTaskToReadyList+0xc4>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	4a2c      	ldr	r2, [pc, #176]	; (800b26c <prvAddNewTaskToReadyList+0xc4>)
 800b1bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1be:	4b2c      	ldr	r3, [pc, #176]	; (800b270 <prvAddNewTaskToReadyList+0xc8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d109      	bne.n	800b1da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1c6:	4a2a      	ldr	r2, [pc, #168]	; (800b270 <prvAddNewTaskToReadyList+0xc8>)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1cc:	4b27      	ldr	r3, [pc, #156]	; (800b26c <prvAddNewTaskToReadyList+0xc4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d110      	bne.n	800b1f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1d4:	f000 fbe6 	bl	800b9a4 <prvInitialiseTaskLists>
 800b1d8:	e00d      	b.n	800b1f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1da:	4b26      	ldr	r3, [pc, #152]	; (800b274 <prvAddNewTaskToReadyList+0xcc>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d109      	bne.n	800b1f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1e2:	4b23      	ldr	r3, [pc, #140]	; (800b270 <prvAddNewTaskToReadyList+0xc8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d802      	bhi.n	800b1f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1f0:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <prvAddNewTaskToReadyList+0xc8>)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1f6:	4b20      	ldr	r3, [pc, #128]	; (800b278 <prvAddNewTaskToReadyList+0xd0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	4a1e      	ldr	r2, [pc, #120]	; (800b278 <prvAddNewTaskToReadyList+0xd0>)
 800b1fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b200:	4b1d      	ldr	r3, [pc, #116]	; (800b278 <prvAddNewTaskToReadyList+0xd0>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4b1b      	ldr	r3, [pc, #108]	; (800b27c <prvAddNewTaskToReadyList+0xd4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	d903      	bls.n	800b21c <prvAddNewTaskToReadyList+0x74>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	4a18      	ldr	r2, [pc, #96]	; (800b27c <prvAddNewTaskToReadyList+0xd4>)
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4a15      	ldr	r2, [pc, #84]	; (800b280 <prvAddNewTaskToReadyList+0xd8>)
 800b22a:	441a      	add	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3304      	adds	r3, #4
 800b230:	4619      	mov	r1, r3
 800b232:	4610      	mov	r0, r2
 800b234:	f7ff f865 	bl	800a302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b238:	f001 f9c4 	bl	800c5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b23c:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <prvAddNewTaskToReadyList+0xcc>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00e      	beq.n	800b262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <prvAddNewTaskToReadyList+0xc8>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	429a      	cmp	r2, r3
 800b250:	d207      	bcs.n	800b262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b252:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <prvAddNewTaskToReadyList+0xdc>)
 800b254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2000218c 	.word	0x2000218c
 800b270:	20001cb8 	.word	0x20001cb8
 800b274:	20002198 	.word	0x20002198
 800b278:	200021a8 	.word	0x200021a8
 800b27c:	20002194 	.word	0x20002194
 800b280:	20001cbc 	.word	0x20001cbc
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b296:	463a      	mov	r2, r7
 800b298:	1d39      	adds	r1, r7, #4
 800b29a:	f107 0308 	add.w	r3, r7, #8
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe ffce 	bl	800a240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	9202      	str	r2, [sp, #8]
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	460a      	mov	r2, r1
 800b2b6:	4921      	ldr	r1, [pc, #132]	; (800b33c <vTaskStartScheduler+0xb4>)
 800b2b8:	4821      	ldr	r0, [pc, #132]	; (800b340 <vTaskStartScheduler+0xb8>)
 800b2ba:	f7ff fe4d 	bl	800af58 <xTaskCreateStatic>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4a20      	ldr	r2, [pc, #128]	; (800b344 <vTaskStartScheduler+0xbc>)
 800b2c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2c4:	4b1f      	ldr	r3, [pc, #124]	; (800b344 <vTaskStartScheduler+0xbc>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e001      	b.n	800b2d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d102      	bne.n	800b2e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2dc:	f000 fd06 	bl	800bcec <xTimerCreateTimerTask>
 800b2e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d116      	bne.n	800b316 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	613b      	str	r3, [r7, #16]
}
 800b2fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2fc:	4b12      	ldr	r3, [pc, #72]	; (800b348 <vTaskStartScheduler+0xc0>)
 800b2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b302:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b304:	4b11      	ldr	r3, [pc, #68]	; (800b34c <vTaskStartScheduler+0xc4>)
 800b306:	2201      	movs	r2, #1
 800b308:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <vTaskStartScheduler+0xc8>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b310:	f001 f886 	bl	800c420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b314:	e00e      	b.n	800b334 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31c:	d10a      	bne.n	800b334 <vTaskStartScheduler+0xac>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	60fb      	str	r3, [r7, #12]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <vTaskStartScheduler+0xaa>
}
 800b334:	bf00      	nop
 800b336:	3718      	adds	r7, #24
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	0800d384 	.word	0x0800d384
 800b340:	0800b975 	.word	0x0800b975
 800b344:	200021b0 	.word	0x200021b0
 800b348:	200021ac 	.word	0x200021ac
 800b34c:	20002198 	.word	0x20002198
 800b350:	20002190 	.word	0x20002190

0800b354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b358:	4b04      	ldr	r3, [pc, #16]	; (800b36c <vTaskSuspendAll+0x18>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	4a03      	ldr	r2, [pc, #12]	; (800b36c <vTaskSuspendAll+0x18>)
 800b360:	6013      	str	r3, [r2, #0]
}
 800b362:	bf00      	nop
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	200021b4 	.word	0x200021b4

0800b370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b37e:	4b42      	ldr	r3, [pc, #264]	; (800b488 <xTaskResumeAll+0x118>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10a      	bne.n	800b39c <xTaskResumeAll+0x2c>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	603b      	str	r3, [r7, #0]
}
 800b398:	bf00      	nop
 800b39a:	e7fe      	b.n	800b39a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b39c:	f001 f8e2 	bl	800c564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3a0:	4b39      	ldr	r3, [pc, #228]	; (800b488 <xTaskResumeAll+0x118>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	4a38      	ldr	r2, [pc, #224]	; (800b488 <xTaskResumeAll+0x118>)
 800b3a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3aa:	4b37      	ldr	r3, [pc, #220]	; (800b488 <xTaskResumeAll+0x118>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d162      	bne.n	800b478 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3b2:	4b36      	ldr	r3, [pc, #216]	; (800b48c <xTaskResumeAll+0x11c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d05e      	beq.n	800b478 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ba:	e02f      	b.n	800b41c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b3bc:	4b34      	ldr	r3, [pc, #208]	; (800b490 <xTaskResumeAll+0x120>)
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3318      	adds	r3, #24
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fe fff7 	bl	800a3bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fff2 	bl	800a3bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3dc:	4b2d      	ldr	r3, [pc, #180]	; (800b494 <xTaskResumeAll+0x124>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d903      	bls.n	800b3ec <xTaskResumeAll+0x7c>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	4a2a      	ldr	r2, [pc, #168]	; (800b494 <xTaskResumeAll+0x124>)
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4a27      	ldr	r2, [pc, #156]	; (800b498 <xTaskResumeAll+0x128>)
 800b3fa:	441a      	add	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4610      	mov	r0, r2
 800b404:	f7fe ff7d 	bl	800a302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	4b23      	ldr	r3, [pc, #140]	; (800b49c <xTaskResumeAll+0x12c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	429a      	cmp	r2, r3
 800b414:	d302      	bcc.n	800b41c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b416:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <xTaskResumeAll+0x130>)
 800b418:	2201      	movs	r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b41c:	4b1c      	ldr	r3, [pc, #112]	; (800b490 <xTaskResumeAll+0x120>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1cb      	bne.n	800b3bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b42a:	f000 fb59 	bl	800bae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b42e:	4b1d      	ldr	r3, [pc, #116]	; (800b4a4 <xTaskResumeAll+0x134>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d010      	beq.n	800b45c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b43a:	f000 f847 	bl	800b4cc <xTaskIncrementTick>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b444:	4b16      	ldr	r3, [pc, #88]	; (800b4a0 <xTaskResumeAll+0x130>)
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f1      	bne.n	800b43a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b456:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <xTaskResumeAll+0x134>)
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b45c:	4b10      	ldr	r3, [pc, #64]	; (800b4a0 <xTaskResumeAll+0x130>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b468:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <xTaskResumeAll+0x138>)
 800b46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b478:	f001 f8a4 	bl	800c5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800b47c:	68bb      	ldr	r3, [r7, #8]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	200021b4 	.word	0x200021b4
 800b48c:	2000218c 	.word	0x2000218c
 800b490:	2000214c 	.word	0x2000214c
 800b494:	20002194 	.word	0x20002194
 800b498:	20001cbc 	.word	0x20001cbc
 800b49c:	20001cb8 	.word	0x20001cb8
 800b4a0:	200021a0 	.word	0x200021a0
 800b4a4:	2000219c 	.word	0x2000219c
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <xTaskGetTickCount+0x1c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4b8:	687b      	ldr	r3, [r7, #4]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20002190 	.word	0x20002190

0800b4cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4d6:	4b51      	ldr	r3, [pc, #324]	; (800b61c <xTaskIncrementTick+0x150>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 808e 	bne.w	800b5fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4e0:	4b4f      	ldr	r3, [pc, #316]	; (800b620 <xTaskIncrementTick+0x154>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4e8:	4a4d      	ldr	r2, [pc, #308]	; (800b620 <xTaskIncrementTick+0x154>)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d120      	bne.n	800b536 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4f4:	4b4b      	ldr	r3, [pc, #300]	; (800b624 <xTaskIncrementTick+0x158>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	603b      	str	r3, [r7, #0]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <xTaskIncrementTick+0x46>
 800b514:	4b43      	ldr	r3, [pc, #268]	; (800b624 <xTaskIncrementTick+0x158>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	4b43      	ldr	r3, [pc, #268]	; (800b628 <xTaskIncrementTick+0x15c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a41      	ldr	r2, [pc, #260]	; (800b624 <xTaskIncrementTick+0x158>)
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	4a41      	ldr	r2, [pc, #260]	; (800b628 <xTaskIncrementTick+0x15c>)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	4b40      	ldr	r3, [pc, #256]	; (800b62c <xTaskIncrementTick+0x160>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3301      	adds	r3, #1
 800b52e:	4a3f      	ldr	r2, [pc, #252]	; (800b62c <xTaskIncrementTick+0x160>)
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	f000 fad5 	bl	800bae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b536:	4b3e      	ldr	r3, [pc, #248]	; (800b630 <xTaskIncrementTick+0x164>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d34e      	bcc.n	800b5de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b540:	4b38      	ldr	r3, [pc, #224]	; (800b624 <xTaskIncrementTick+0x158>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <xTaskIncrementTick+0x82>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xTaskIncrementTick+0x84>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d004      	beq.n	800b55e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b554:	4b36      	ldr	r3, [pc, #216]	; (800b630 <xTaskIncrementTick+0x164>)
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	601a      	str	r2, [r3, #0]
					break;
 800b55c:	e03f      	b.n	800b5de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b55e:	4b31      	ldr	r3, [pc, #196]	; (800b624 <xTaskIncrementTick+0x158>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d203      	bcs.n	800b57e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b576:	4a2e      	ldr	r2, [pc, #184]	; (800b630 <xTaskIncrementTick+0x164>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6013      	str	r3, [r2, #0]
						break;
 800b57c:	e02f      	b.n	800b5de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	3304      	adds	r3, #4
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe ff1a 	bl	800a3bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	3318      	adds	r3, #24
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe ff11 	bl	800a3bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	4b25      	ldr	r3, [pc, #148]	; (800b634 <xTaskIncrementTick+0x168>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d903      	bls.n	800b5ae <xTaskIncrementTick+0xe2>
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	4a22      	ldr	r2, [pc, #136]	; (800b634 <xTaskIncrementTick+0x168>)
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4a1f      	ldr	r2, [pc, #124]	; (800b638 <xTaskIncrementTick+0x16c>)
 800b5bc:	441a      	add	r2, r3
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	f7fe fe9c 	bl	800a302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	4b1b      	ldr	r3, [pc, #108]	; (800b63c <xTaskIncrementTick+0x170>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d3b3      	bcc.n	800b540 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5dc:	e7b0      	b.n	800b540 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5de:	4b17      	ldr	r3, [pc, #92]	; (800b63c <xTaskIncrementTick+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e4:	4914      	ldr	r1, [pc, #80]	; (800b638 <xTaskIncrementTick+0x16c>)
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d907      	bls.n	800b606 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e004      	b.n	800b606 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b5fc:	4b10      	ldr	r3, [pc, #64]	; (800b640 <xTaskIncrementTick+0x174>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3301      	adds	r3, #1
 800b602:	4a0f      	ldr	r2, [pc, #60]	; (800b640 <xTaskIncrementTick+0x174>)
 800b604:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b606:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <xTaskIncrementTick+0x178>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b60e:	2301      	movs	r3, #1
 800b610:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b612:	697b      	ldr	r3, [r7, #20]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200021b4 	.word	0x200021b4
 800b620:	20002190 	.word	0x20002190
 800b624:	20002144 	.word	0x20002144
 800b628:	20002148 	.word	0x20002148
 800b62c:	200021a4 	.word	0x200021a4
 800b630:	200021ac 	.word	0x200021ac
 800b634:	20002194 	.word	0x20002194
 800b638:	20001cbc 	.word	0x20001cbc
 800b63c:	20001cb8 	.word	0x20001cb8
 800b640:	2000219c 	.word	0x2000219c
 800b644:	200021a0 	.word	0x200021a0

0800b648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b64e:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <vTaskSwitchContext+0xa8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b656:	4b27      	ldr	r3, [pc, #156]	; (800b6f4 <vTaskSwitchContext+0xac>)
 800b658:	2201      	movs	r2, #1
 800b65a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b65c:	e041      	b.n	800b6e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b65e:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <vTaskSwitchContext+0xac>)
 800b660:	2200      	movs	r2, #0
 800b662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b664:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <vTaskSwitchContext+0xb0>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	e010      	b.n	800b68e <vTaskSwitchContext+0x46>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <vTaskSwitchContext+0x40>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	607b      	str	r3, [r7, #4]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <vTaskSwitchContext+0x3e>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	491b      	ldr	r1, [pc, #108]	; (800b6fc <vTaskSwitchContext+0xb4>)
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	440b      	add	r3, r1
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0e4      	beq.n	800b66c <vTaskSwitchContext+0x24>
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4a13      	ldr	r2, [pc, #76]	; (800b6fc <vTaskSwitchContext+0xb4>)
 800b6ae:	4413      	add	r3, r2
 800b6b0:	60bb      	str	r3, [r7, #8]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	605a      	str	r2, [r3, #4]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d104      	bne.n	800b6d2 <vTaskSwitchContext+0x8a>
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	605a      	str	r2, [r3, #4]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	4a09      	ldr	r2, [pc, #36]	; (800b700 <vTaskSwitchContext+0xb8>)
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <vTaskSwitchContext+0xb0>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6013      	str	r3, [r2, #0]
}
 800b6e2:	bf00      	nop
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	200021b4 	.word	0x200021b4
 800b6f4:	200021a0 	.word	0x200021a0
 800b6f8:	20002194 	.word	0x20002194
 800b6fc:	20001cbc 	.word	0x20001cbc
 800b700:	20001cb8 	.word	0x20001cb8

0800b704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	60fb      	str	r3, [r7, #12]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b72a:	4b07      	ldr	r3, [pc, #28]	; (800b748 <vTaskPlaceOnEventList+0x44>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3318      	adds	r3, #24
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7fe fe09 	bl	800a34a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b738:	2101      	movs	r1, #1
 800b73a:	6838      	ldr	r0, [r7, #0]
 800b73c:	f000 fa82 	bl	800bc44 <prvAddCurrentTaskToDelayedList>
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20001cb8 	.word	0x20001cb8

0800b74c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	617b      	str	r3, [r7, #20]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3318      	adds	r3, #24
 800b77a:	4619      	mov	r1, r3
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f7fe fdc0 	bl	800a302 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b788:	f04f 33ff 	mov.w	r3, #4294967295
 800b78c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f000 fa57 	bl	800bc44 <prvAddCurrentTaskToDelayedList>
	}
 800b796:	bf00      	nop
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20001cb8 	.word	0x20001cb8

0800b7a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	3318      	adds	r3, #24
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe fdf1 	bl	800a3bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7da:	4b1e      	ldr	r3, [pc, #120]	; (800b854 <xTaskRemoveFromEventList+0xb0>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d11d      	bne.n	800b81e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fde8 	bl	800a3bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f0:	4b19      	ldr	r3, [pc, #100]	; (800b858 <xTaskRemoveFromEventList+0xb4>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d903      	bls.n	800b800 <xTaskRemoveFromEventList+0x5c>
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	4a16      	ldr	r2, [pc, #88]	; (800b858 <xTaskRemoveFromEventList+0xb4>)
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <xTaskRemoveFromEventList+0xb8>)
 800b80e:	441a      	add	r2, r3
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7fe fd73 	bl	800a302 <vListInsertEnd>
 800b81c:	e005      	b.n	800b82a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	3318      	adds	r3, #24
 800b822:	4619      	mov	r1, r3
 800b824:	480e      	ldr	r0, [pc, #56]	; (800b860 <xTaskRemoveFromEventList+0xbc>)
 800b826:	f7fe fd6c 	bl	800a302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <xTaskRemoveFromEventList+0xc0>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	429a      	cmp	r2, r3
 800b836:	d905      	bls.n	800b844 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <xTaskRemoveFromEventList+0xc4>)
 800b83e:	2201      	movs	r2, #1
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	e001      	b.n	800b848 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b848:	697b      	ldr	r3, [r7, #20]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	200021b4 	.word	0x200021b4
 800b858:	20002194 	.word	0x20002194
 800b85c:	20001cbc 	.word	0x20001cbc
 800b860:	2000214c 	.word	0x2000214c
 800b864:	20001cb8 	.word	0x20001cb8
 800b868:	200021a0 	.word	0x200021a0

0800b86c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <vTaskInternalSetTimeOutState+0x24>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <vTaskInternalSetTimeOutState+0x28>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	605a      	str	r2, [r3, #4]
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	200021a4 	.word	0x200021a4
 800b894:	20002190 	.word	0x20002190

0800b898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10a      	bne.n	800b8be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	613b      	str	r3, [r7, #16]
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	60fb      	str	r3, [r7, #12]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8da:	f000 fe43 	bl	800c564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8de:	4b1d      	ldr	r3, [pc, #116]	; (800b954 <xTaskCheckForTimeOut+0xbc>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f6:	d102      	bne.n	800b8fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61fb      	str	r3, [r7, #28]
 800b8fc:	e023      	b.n	800b946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4b15      	ldr	r3, [pc, #84]	; (800b958 <xTaskCheckForTimeOut+0xc0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	429a      	cmp	r2, r3
 800b908:	d007      	beq.n	800b91a <xTaskCheckForTimeOut+0x82>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	429a      	cmp	r2, r3
 800b912:	d302      	bcc.n	800b91a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	e015      	b.n	800b946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	429a      	cmp	r2, r3
 800b922:	d20b      	bcs.n	800b93c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	1ad2      	subs	r2, r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7ff ff9b 	bl	800b86c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
 800b93a:	e004      	b.n	800b946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b946:	f000 fe3d 	bl	800c5c4 <vPortExitCritical>

	return xReturn;
 800b94a:	69fb      	ldr	r3, [r7, #28]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20002190 	.word	0x20002190
 800b958:	200021a4 	.word	0x200021a4

0800b95c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b960:	4b03      	ldr	r3, [pc, #12]	; (800b970 <vTaskMissedYield+0x14>)
 800b962:	2201      	movs	r2, #1
 800b964:	601a      	str	r2, [r3, #0]
}
 800b966:	bf00      	nop
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	200021a0 	.word	0x200021a0

0800b974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b97c:	f000 f852 	bl	800ba24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b980:	4b06      	ldr	r3, [pc, #24]	; (800b99c <prvIdleTask+0x28>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d9f9      	bls.n	800b97c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <prvIdleTask+0x2c>)
 800b98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b998:	e7f0      	b.n	800b97c <prvIdleTask+0x8>
 800b99a:	bf00      	nop
 800b99c:	20001cbc 	.word	0x20001cbc
 800b9a0:	e000ed04 	.word	0xe000ed04

0800b9a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	607b      	str	r3, [r7, #4]
 800b9ae:	e00c      	b.n	800b9ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4a12      	ldr	r2, [pc, #72]	; (800ba04 <prvInitialiseTaskLists+0x60>)
 800b9bc:	4413      	add	r3, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe fc72 	bl	800a2a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	607b      	str	r3, [r7, #4]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b37      	cmp	r3, #55	; 0x37
 800b9ce:	d9ef      	bls.n	800b9b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9d0:	480d      	ldr	r0, [pc, #52]	; (800ba08 <prvInitialiseTaskLists+0x64>)
 800b9d2:	f7fe fc69 	bl	800a2a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9d6:	480d      	ldr	r0, [pc, #52]	; (800ba0c <prvInitialiseTaskLists+0x68>)
 800b9d8:	f7fe fc66 	bl	800a2a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9dc:	480c      	ldr	r0, [pc, #48]	; (800ba10 <prvInitialiseTaskLists+0x6c>)
 800b9de:	f7fe fc63 	bl	800a2a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9e2:	480c      	ldr	r0, [pc, #48]	; (800ba14 <prvInitialiseTaskLists+0x70>)
 800b9e4:	f7fe fc60 	bl	800a2a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9e8:	480b      	ldr	r0, [pc, #44]	; (800ba18 <prvInitialiseTaskLists+0x74>)
 800b9ea:	f7fe fc5d 	bl	800a2a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <prvInitialiseTaskLists+0x78>)
 800b9f0:	4a05      	ldr	r2, [pc, #20]	; (800ba08 <prvInitialiseTaskLists+0x64>)
 800b9f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <prvInitialiseTaskLists+0x7c>)
 800b9f6:	4a05      	ldr	r2, [pc, #20]	; (800ba0c <prvInitialiseTaskLists+0x68>)
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20001cbc 	.word	0x20001cbc
 800ba08:	2000211c 	.word	0x2000211c
 800ba0c:	20002130 	.word	0x20002130
 800ba10:	2000214c 	.word	0x2000214c
 800ba14:	20002160 	.word	0x20002160
 800ba18:	20002178 	.word	0x20002178
 800ba1c:	20002144 	.word	0x20002144
 800ba20:	20002148 	.word	0x20002148

0800ba24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba2a:	e019      	b.n	800ba60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba2c:	f000 fd9a 	bl	800c564 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ba30:	4b10      	ldr	r3, [pc, #64]	; (800ba74 <prvCheckTasksWaitingTermination+0x50>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fcbd 	bl	800a3bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba42:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <prvCheckTasksWaitingTermination+0x54>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	4a0b      	ldr	r2, [pc, #44]	; (800ba78 <prvCheckTasksWaitingTermination+0x54>)
 800ba4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <prvCheckTasksWaitingTermination+0x58>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <prvCheckTasksWaitingTermination+0x58>)
 800ba54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba56:	f000 fdb5 	bl	800c5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f810 	bl	800ba80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba60:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <prvCheckTasksWaitingTermination+0x58>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e1      	bne.n	800ba2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20002160 	.word	0x20002160
 800ba78:	2000218c 	.word	0x2000218c
 800ba7c:	20002174 	.word	0x20002174

0800ba80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d108      	bne.n	800baa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 ff4a 	bl	800c930 <vPortFree>
				vPortFree( pxTCB );
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 ff47 	bl	800c930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baa2:	e018      	b.n	800bad6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d103      	bne.n	800bab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 ff3e 	bl	800c930 <vPortFree>
	}
 800bab4:	e00f      	b.n	800bad6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800babc:	2b02      	cmp	r3, #2
 800babe:	d00a      	beq.n	800bad6 <prvDeleteTCB+0x56>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	60fb      	str	r3, [r7, #12]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <prvDeleteTCB+0x54>
	}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bae6:	4b0f      	ldr	r3, [pc, #60]	; (800bb24 <prvResetNextTaskUnblockTime+0x44>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <prvResetNextTaskUnblockTime+0x14>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <prvResetNextTaskUnblockTime+0x16>
 800baf4:	2300      	movs	r3, #0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d004      	beq.n	800bb04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bafa:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <prvResetNextTaskUnblockTime+0x48>)
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb02:	e008      	b.n	800bb16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bb04:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <prvResetNextTaskUnblockTime+0x44>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4a05      	ldr	r2, [pc, #20]	; (800bb28 <prvResetNextTaskUnblockTime+0x48>)
 800bb14:	6013      	str	r3, [r2, #0]
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20002144 	.word	0x20002144
 800bb28:	200021ac 	.word	0x200021ac

0800bb2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb32:	4b0b      	ldr	r3, [pc, #44]	; (800bb60 <xTaskGetSchedulerState+0x34>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d102      	bne.n	800bb40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	607b      	str	r3, [r7, #4]
 800bb3e:	e008      	b.n	800bb52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb40:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <xTaskGetSchedulerState+0x38>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb48:	2302      	movs	r3, #2
 800bb4a:	607b      	str	r3, [r7, #4]
 800bb4c:	e001      	b.n	800bb52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb52:	687b      	ldr	r3, [r7, #4]
	}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	20002198 	.word	0x20002198
 800bb64:	200021b4 	.word	0x200021b4

0800bb68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d056      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb7e:	4b2e      	ldr	r3, [pc, #184]	; (800bc38 <xTaskPriorityDisinherit+0xd0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d00a      	beq.n	800bb9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	60fb      	str	r3, [r7, #12]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d02c      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d128      	bne.n	800bc2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fbec 	bl	800a3bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfc:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <xTaskPriorityDisinherit+0xd4>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d903      	bls.n	800bc0c <xTaskPriorityDisinherit+0xa4>
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	4a0c      	ldr	r2, [pc, #48]	; (800bc3c <xTaskPriorityDisinherit+0xd4>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <xTaskPriorityDisinherit+0xd8>)
 800bc1a:	441a      	add	r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe fb6d 	bl	800a302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc2c:	697b      	ldr	r3, [r7, #20]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20001cb8 	.word	0x20001cb8
 800bc3c:	20002194 	.word	0x20002194
 800bc40:	20001cbc 	.word	0x20001cbc

0800bc44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc4e:	4b21      	ldr	r3, [pc, #132]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc54:	4b20      	ldr	r3, [pc, #128]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fbae 	bl	800a3bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc66:	d10a      	bne.n	800bc7e <prvAddCurrentTaskToDelayedList+0x3a>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d007      	beq.n	800bc7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc6e:	4b1a      	ldr	r3, [pc, #104]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4619      	mov	r1, r3
 800bc76:	4819      	ldr	r0, [pc, #100]	; (800bcdc <prvAddCurrentTaskToDelayedList+0x98>)
 800bc78:	f7fe fb43 	bl	800a302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc7c:	e026      	b.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc86:	4b14      	ldr	r3, [pc, #80]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d209      	bcs.n	800bcaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe fb51 	bl	800a34a <vListInsert>
}
 800bca8:	e010      	b.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe fb47 	bl	800a34a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d202      	bcs.n	800bccc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcc6:	4a08      	ldr	r2, [pc, #32]	; (800bce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6013      	str	r3, [r2, #0]
}
 800bccc:	bf00      	nop
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20002190 	.word	0x20002190
 800bcd8:	20001cb8 	.word	0x20001cb8
 800bcdc:	20002178 	.word	0x20002178
 800bce0:	20002148 	.word	0x20002148
 800bce4:	20002144 	.word	0x20002144
 800bce8:	200021ac 	.word	0x200021ac

0800bcec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08a      	sub	sp, #40	; 0x28
 800bcf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcf6:	f000 facb 	bl	800c290 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcfa:	4b1c      	ldr	r3, [pc, #112]	; (800bd6c <xTimerCreateTimerTask+0x80>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d021      	beq.n	800bd46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd0a:	1d3a      	adds	r2, r7, #4
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	f107 030c 	add.w	r3, r7, #12
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe faad 	bl	800a274 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	9202      	str	r2, [sp, #8]
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	2302      	movs	r3, #2
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	4910      	ldr	r1, [pc, #64]	; (800bd70 <xTimerCreateTimerTask+0x84>)
 800bd2e:	4811      	ldr	r0, [pc, #68]	; (800bd74 <xTimerCreateTimerTask+0x88>)
 800bd30:	f7ff f912 	bl	800af58 <xTaskCreateStatic>
 800bd34:	4603      	mov	r3, r0
 800bd36:	4a10      	ldr	r2, [pc, #64]	; (800bd78 <xTimerCreateTimerTask+0x8c>)
 800bd38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd3a:	4b0f      	ldr	r3, [pc, #60]	; (800bd78 <xTimerCreateTimerTask+0x8c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd42:	2301      	movs	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd62:	697b      	ldr	r3, [r7, #20]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200021e8 	.word	0x200021e8
 800bd70:	0800d38c 	.word	0x0800d38c
 800bd74:	0800be99 	.word	0x0800be99
 800bd78:	200021ec 	.word	0x200021ec

0800bd7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b08a      	sub	sp, #40	; 0x28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	623b      	str	r3, [r7, #32]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdaa:	4b1a      	ldr	r3, [pc, #104]	; (800be14 <xTimerGenericCommand+0x98>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02a      	beq.n	800be08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	dc18      	bgt.n	800bdf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdc4:	f7ff feb2 	bl	800bb2c <xTaskGetSchedulerState>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d109      	bne.n	800bde2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdce:	4b11      	ldr	r3, [pc, #68]	; (800be14 <xTimerGenericCommand+0x98>)
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f107 0110 	add.w	r1, r7, #16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdda:	f7fe fc59 	bl	800a690 <xQueueGenericSend>
 800bdde:	6278      	str	r0, [r7, #36]	; 0x24
 800bde0:	e012      	b.n	800be08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bde2:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <xTimerGenericCommand+0x98>)
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f107 0110 	add.w	r1, r7, #16
 800bdea:	2300      	movs	r3, #0
 800bdec:	2200      	movs	r2, #0
 800bdee:	f7fe fc4f 	bl	800a690 <xQueueGenericSend>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24
 800bdf4:	e008      	b.n	800be08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdf6:	4b07      	ldr	r3, [pc, #28]	; (800be14 <xTimerGenericCommand+0x98>)
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	f107 0110 	add.w	r1, r7, #16
 800bdfe:	2300      	movs	r3, #0
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	f7fe fd43 	bl	800a88c <xQueueGenericSendFromISR>
 800be06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3728      	adds	r7, #40	; 0x28
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	200021e8 	.word	0x200021e8

0800be18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af02      	add	r7, sp, #8
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be22:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <prvProcessExpiredTimer+0x7c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	3304      	adds	r3, #4
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe fac3 	bl	800a3bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d122      	bne.n	800be84 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	699a      	ldr	r2, [r3, #24]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	18d1      	adds	r1, r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	6978      	ldr	r0, [r7, #20]
 800be4c:	f000 f8c8 	bl	800bfe0 <prvInsertTimerInActiveList>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d016      	beq.n	800be84 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be56:	2300      	movs	r3, #0
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	2300      	movs	r3, #0
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	2100      	movs	r1, #0
 800be60:	6978      	ldr	r0, [r7, #20]
 800be62:	f7ff ff8b 	bl	800bd7c <xTimerGenericCommand>
 800be66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10a      	bne.n	800be84 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	60fb      	str	r3, [r7, #12]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	6978      	ldr	r0, [r7, #20]
 800be8a:	4798      	blx	r3
}
 800be8c:	bf00      	nop
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	200021e0 	.word	0x200021e0

0800be98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bea0:	f107 0308 	add.w	r3, r7, #8
 800bea4:	4618      	mov	r0, r3
 800bea6:	f000 f857 	bl	800bf58 <prvGetNextExpireTime>
 800beaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f000 f803 	bl	800bebc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beb6:	f000 f8d5 	bl	800c064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beba:	e7f1      	b.n	800bea0 <prvTimerTask+0x8>

0800bebc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bec6:	f7ff fa45 	bl	800b354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 f866 	bl	800bfa0 <prvSampleTimeNow>
 800bed4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d130      	bne.n	800bf3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <prvProcessTimerOrBlockTask+0x3c>
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d806      	bhi.n	800bef8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beea:	f7ff fa41 	bl	800b370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beee:	68f9      	ldr	r1, [r7, #12]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff ff91 	bl	800be18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bef6:	e024      	b.n	800bf42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d008      	beq.n	800bf10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <prvProcessTimerOrBlockTask+0x90>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bf0c      	ite	eq
 800bf08:	2301      	moveq	r3, #1
 800bf0a:	2300      	movne	r3, #0
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf10:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <prvProcessTimerOrBlockTask+0x94>)
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f7fe ffe7 	bl	800aef0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf22:	f7ff fa25 	bl	800b370 <xTaskResumeAll>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf2c:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <prvProcessTimerOrBlockTask+0x98>)
 800bf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	f3bf 8f6f 	isb	sy
}
 800bf3c:	e001      	b.n	800bf42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf3e:	f7ff fa17 	bl	800b370 <xTaskResumeAll>
}
 800bf42:	bf00      	nop
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200021e4 	.word	0x200021e4
 800bf50:	200021e8 	.word	0x200021e8
 800bf54:	e000ed04 	.word	0xe000ed04

0800bf58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf60:	4b0e      	ldr	r3, [pc, #56]	; (800bf9c <prvGetNextExpireTime+0x44>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	bf0c      	ite	eq
 800bf6a:	2301      	moveq	r3, #1
 800bf6c:	2300      	movne	r3, #0
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf7e:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <prvGetNextExpireTime+0x44>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	e001      	b.n	800bf8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	200021e0 	.word	0x200021e0

0800bfa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfa8:	f7ff fa80 	bl	800b4ac <xTaskGetTickCount>
 800bfac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfae:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <prvSampleTimeNow+0x3c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d205      	bcs.n	800bfc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfb8:	f000 f908 	bl	800c1cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	e002      	b.n	800bfca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfca:	4a04      	ldr	r2, [pc, #16]	; (800bfdc <prvSampleTimeNow+0x3c>)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	200021f0 	.word	0x200021f0

0800bfe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d812      	bhi.n	800c02c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	1ad2      	subs	r2, r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	429a      	cmp	r2, r3
 800c012:	d302      	bcc.n	800c01a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c014:	2301      	movs	r3, #1
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	e01b      	b.n	800c052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c01a:	4b10      	ldr	r3, [pc, #64]	; (800c05c <prvInsertTimerInActiveList+0x7c>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4610      	mov	r0, r2
 800c026:	f7fe f990 	bl	800a34a <vListInsert>
 800c02a:	e012      	b.n	800c052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d206      	bcs.n	800c042 <prvInsertTimerInActiveList+0x62>
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d302      	bcc.n	800c042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c03c:	2301      	movs	r3, #1
 800c03e:	617b      	str	r3, [r7, #20]
 800c040:	e007      	b.n	800c052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c042:	4b07      	ldr	r3, [pc, #28]	; (800c060 <prvInsertTimerInActiveList+0x80>)
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3304      	adds	r3, #4
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fe f97c 	bl	800a34a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c052:	697b      	ldr	r3, [r7, #20]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	200021e4 	.word	0x200021e4
 800c060:	200021e0 	.word	0x200021e0

0800c064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08e      	sub	sp, #56	; 0x38
 800c068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c06a:	e09d      	b.n	800c1a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	da18      	bge.n	800c0a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c072:	1d3b      	adds	r3, r7, #4
 800c074:	3304      	adds	r3, #4
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	61fb      	str	r3, [r7, #28]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09a:	6850      	ldr	r0, [r2, #4]
 800c09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09e:	6892      	ldr	r2, [r2, #8]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	db7d      	blt.n	800c1a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe f97e 	bl	800a3bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff ff6c 	bl	800bfa0 <prvSampleTimeNow>
 800c0c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b09      	cmp	r3, #9
 800c0ce:	d86b      	bhi.n	800c1a8 <prvProcessReceivedCommands+0x144>
 800c0d0:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <prvProcessReceivedCommands+0x74>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c101 	.word	0x0800c101
 800c0e0:	0800c101 	.word	0x0800c101
 800c0e4:	0800c1a9 	.word	0x0800c1a9
 800c0e8:	0800c15d 	.word	0x0800c15d
 800c0ec:	0800c195 	.word	0x0800c195
 800c0f0:	0800c101 	.word	0x0800c101
 800c0f4:	0800c101 	.word	0x0800c101
 800c0f8:	0800c1a9 	.word	0x0800c1a9
 800c0fc:	0800c15d 	.word	0x0800c15d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	18d1      	adds	r1, r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c10e:	f7ff ff67 	bl	800bfe0 <prvInsertTimerInActiveList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d047      	beq.n	800c1a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c11e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d13f      	bne.n	800c1a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	441a      	add	r2, r3
 800c130:	2300      	movs	r3, #0
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	2100      	movs	r1, #0
 800c138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13a:	f7ff fe1f 	bl	800bd7c <xTimerGenericCommand>
 800c13e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d130      	bne.n	800c1a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	61bb      	str	r3, [r7, #24]
}
 800c158:	bf00      	nop
 800c15a:	e7fe      	b.n	800c15a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c160:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10a      	bne.n	800c180 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	617b      	str	r3, [r7, #20]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	699a      	ldr	r2, [r3, #24]
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	18d1      	adds	r1, r2, r3
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c18e:	f7ff ff27 	bl	800bfe0 <prvInsertTimerInActiveList>
					break;
 800c192:	e009      	b.n	800c1a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a0:	f000 fbc6 	bl	800c930 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1a4:	e000      	b.n	800c1a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1a8:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <prvProcessReceivedCommands+0x164>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	1d39      	adds	r1, r7, #4
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fc03 	bl	800a9bc <xQueueReceive>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f47f af57 	bne.w	800c06c <prvProcessReceivedCommands+0x8>
	}
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	3730      	adds	r7, #48	; 0x30
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	200021e8 	.word	0x200021e8

0800c1cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d2:	e045      	b.n	800c260 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1d4:	4b2c      	ldr	r3, [pc, #176]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1de:	4b2a      	ldr	r3, [pc, #168]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe f8e5 	bl	800a3bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d12e      	bne.n	800c260 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	4413      	add	r3, r2
 800c20a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	429a      	cmp	r2, r3
 800c212:	d90e      	bls.n	800c232 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c220:	4b19      	ldr	r3, [pc, #100]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3304      	adds	r3, #4
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f7fe f88d 	bl	800a34a <vListInsert>
 800c230:	e016      	b.n	800c260 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c232:	2300      	movs	r3, #0
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	2300      	movs	r3, #0
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	2100      	movs	r1, #0
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fd9d 	bl	800bd7c <xTimerGenericCommand>
 800c242:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10a      	bne.n	800c260 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	603b      	str	r3, [r7, #0]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1b4      	bne.n	800c1d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <prvSwitchTimerLists+0xc0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a04      	ldr	r2, [pc, #16]	; (800c288 <prvSwitchTimerLists+0xbc>)
 800c276:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c278:	4a04      	ldr	r2, [pc, #16]	; (800c28c <prvSwitchTimerLists+0xc0>)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	6013      	str	r3, [r2, #0]
}
 800c27e:	bf00      	nop
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200021e0 	.word	0x200021e0
 800c28c:	200021e4 	.word	0x200021e4

0800c290 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c296:	f000 f965 	bl	800c564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c29a:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d120      	bne.n	800c2e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2a2:	4814      	ldr	r0, [pc, #80]	; (800c2f4 <prvCheckForValidListAndQueue+0x64>)
 800c2a4:	f7fe f800 	bl	800a2a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2a8:	4813      	ldr	r0, [pc, #76]	; (800c2f8 <prvCheckForValidListAndQueue+0x68>)
 800c2aa:	f7fd fffd 	bl	800a2a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ae:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <prvCheckForValidListAndQueue+0x6c>)
 800c2b0:	4a10      	ldr	r2, [pc, #64]	; (800c2f4 <prvCheckForValidListAndQueue+0x64>)
 800c2b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <prvCheckForValidListAndQueue+0x70>)
 800c2b6:	4a10      	ldr	r2, [pc, #64]	; (800c2f8 <prvCheckForValidListAndQueue+0x68>)
 800c2b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <prvCheckForValidListAndQueue+0x74>)
 800c2c0:	4a11      	ldr	r2, [pc, #68]	; (800c308 <prvCheckForValidListAndQueue+0x78>)
 800c2c2:	2110      	movs	r1, #16
 800c2c4:	200a      	movs	r0, #10
 800c2c6:	f7fe f90b 	bl	800a4e0 <xQueueGenericCreateStatic>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	4a08      	ldr	r2, [pc, #32]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2d0:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d005      	beq.n	800c2e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <prvCheckForValidListAndQueue+0x60>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	490b      	ldr	r1, [pc, #44]	; (800c30c <prvCheckForValidListAndQueue+0x7c>)
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fddc 	bl	800ae9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2e4:	f000 f96e 	bl	800c5c4 <vPortExitCritical>
}
 800c2e8:	bf00      	nop
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	200021e8 	.word	0x200021e8
 800c2f4:	200021b8 	.word	0x200021b8
 800c2f8:	200021cc 	.word	0x200021cc
 800c2fc:	200021e0 	.word	0x200021e0
 800c300:	200021e4 	.word	0x200021e4
 800c304:	20002294 	.word	0x20002294
 800c308:	200021f4 	.word	0x200021f4
 800c30c:	0800d394 	.word	0x0800d394

0800c310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	3b04      	subs	r3, #4
 800c320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f023 0201 	bic.w	r2, r3, #1
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b04      	subs	r3, #4
 800c33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c340:	4a0c      	ldr	r2, [pc, #48]	; (800c374 <pxPortInitialiseStack+0x64>)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3b14      	subs	r3, #20
 800c34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3b04      	subs	r3, #4
 800c356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f06f 0202 	mvn.w	r2, #2
 800c35e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3b20      	subs	r3, #32
 800c364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c366:	68fb      	ldr	r3, [r7, #12]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	0800c379 	.word	0x0800c379

0800c378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <prvTaskExitError+0x54>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d00a      	beq.n	800c3a2 <prvTaskExitError+0x2a>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60fb      	str	r3, [r7, #12]
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <prvTaskExitError+0x28>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	60bb      	str	r3, [r7, #8]
}
 800c3b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3b6:	bf00      	nop
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0fc      	beq.n	800c3b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3be:	bf00      	nop
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	20000130 	.word	0x20000130

0800c3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3d0:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <pxCurrentTCBConst2>)
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	6808      	ldr	r0, [r1, #0]
 800c3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	f380 8809 	msr	PSP, r0
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8811 	msr	BASEPRI, r0
 800c3ea:	4770      	bx	lr
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst2>:
 800c3f0:	20001cb8 	.word	0x20001cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3f8:	4808      	ldr	r0, [pc, #32]	; (800c41c <prvPortStartFirstTask+0x24>)
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f380 8808 	msr	MSP, r0
 800c402:	f04f 0000 	mov.w	r0, #0
 800c406:	f380 8814 	msr	CONTROL, r0
 800c40a:	b662      	cpsie	i
 800c40c:	b661      	cpsie	f
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	df00      	svc	0
 800c418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c41a:	bf00      	nop
 800c41c:	e000ed08 	.word	0xe000ed08

0800c420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c426:	4b46      	ldr	r3, [pc, #280]	; (800c540 <xPortStartScheduler+0x120>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a46      	ldr	r2, [pc, #280]	; (800c544 <xPortStartScheduler+0x124>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d10a      	bne.n	800c446 <xPortStartScheduler+0x26>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	613b      	str	r3, [r7, #16]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c446:	4b3e      	ldr	r3, [pc, #248]	; (800c540 <xPortStartScheduler+0x120>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a3f      	ldr	r2, [pc, #252]	; (800c548 <xPortStartScheduler+0x128>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d10a      	bne.n	800c466 <xPortStartScheduler+0x46>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	60fb      	str	r3, [r7, #12]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c466:	4b39      	ldr	r3, [pc, #228]	; (800c54c <xPortStartScheduler+0x12c>)
 800c468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	22ff      	movs	r2, #255	; 0xff
 800c476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c480:	78fb      	ldrb	r3, [r7, #3]
 800c482:	b2db      	uxtb	r3, r3
 800c484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	4b31      	ldr	r3, [pc, #196]	; (800c550 <xPortStartScheduler+0x130>)
 800c48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c48e:	4b31      	ldr	r3, [pc, #196]	; (800c554 <xPortStartScheduler+0x134>)
 800c490:	2207      	movs	r2, #7
 800c492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c494:	e009      	b.n	800c4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c496:	4b2f      	ldr	r3, [pc, #188]	; (800c554 <xPortStartScheduler+0x134>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	4a2d      	ldr	r2, [pc, #180]	; (800c554 <xPortStartScheduler+0x134>)
 800c49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4aa:	78fb      	ldrb	r3, [r7, #3]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b2:	2b80      	cmp	r3, #128	; 0x80
 800c4b4:	d0ef      	beq.n	800c496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4b6:	4b27      	ldr	r3, [pc, #156]	; (800c554 <xPortStartScheduler+0x134>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f1c3 0307 	rsb	r3, r3, #7
 800c4be:	2b04      	cmp	r3, #4
 800c4c0:	d00a      	beq.n	800c4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	60bb      	str	r3, [r7, #8]
}
 800c4d4:	bf00      	nop
 800c4d6:	e7fe      	b.n	800c4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4d8:	4b1e      	ldr	r3, [pc, #120]	; (800c554 <xPortStartScheduler+0x134>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	021b      	lsls	r3, r3, #8
 800c4de:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <xPortStartScheduler+0x134>)
 800c4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4e2:	4b1c      	ldr	r3, [pc, #112]	; (800c554 <xPortStartScheduler+0x134>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4ea:	4a1a      	ldr	r2, [pc, #104]	; (800c554 <xPortStartScheduler+0x134>)
 800c4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4f6:	4b18      	ldr	r3, [pc, #96]	; (800c558 <xPortStartScheduler+0x138>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a17      	ldr	r2, [pc, #92]	; (800c558 <xPortStartScheduler+0x138>)
 800c4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c502:	4b15      	ldr	r3, [pc, #84]	; (800c558 <xPortStartScheduler+0x138>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a14      	ldr	r2, [pc, #80]	; (800c558 <xPortStartScheduler+0x138>)
 800c508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c50e:	f000 f8dd 	bl	800c6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c512:	4b12      	ldr	r3, [pc, #72]	; (800c55c <xPortStartScheduler+0x13c>)
 800c514:	2200      	movs	r2, #0
 800c516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c518:	f000 f8fc 	bl	800c714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c51c:	4b10      	ldr	r3, [pc, #64]	; (800c560 <xPortStartScheduler+0x140>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0f      	ldr	r2, [pc, #60]	; (800c560 <xPortStartScheduler+0x140>)
 800c522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c528:	f7ff ff66 	bl	800c3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c52c:	f7ff f88c 	bl	800b648 <vTaskSwitchContext>
	prvTaskExitError();
 800c530:	f7ff ff22 	bl	800c378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3718      	adds	r7, #24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	e000ed00 	.word	0xe000ed00
 800c544:	410fc271 	.word	0x410fc271
 800c548:	410fc270 	.word	0x410fc270
 800c54c:	e000e400 	.word	0xe000e400
 800c550:	200022e4 	.word	0x200022e4
 800c554:	200022e8 	.word	0x200022e8
 800c558:	e000ed20 	.word	0xe000ed20
 800c55c:	20000130 	.word	0x20000130
 800c560:	e000ef34 	.word	0xe000ef34

0800c564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	607b      	str	r3, [r7, #4]
}
 800c57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c57e:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <vPortEnterCritical+0x58>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3301      	adds	r3, #1
 800c584:	4a0d      	ldr	r2, [pc, #52]	; (800c5bc <vPortEnterCritical+0x58>)
 800c586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c588:	4b0c      	ldr	r3, [pc, #48]	; (800c5bc <vPortEnterCritical+0x58>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d10f      	bne.n	800c5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <vPortEnterCritical+0x5c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	603b      	str	r3, [r7, #0]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <vPortEnterCritical+0x4a>
	}
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	20000130 	.word	0x20000130
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5ca:	4b12      	ldr	r3, [pc, #72]	; (800c614 <vPortExitCritical+0x50>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <vPortExitCritical+0x24>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	607b      	str	r3, [r7, #4]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <vPortExitCritical+0x50>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4a09      	ldr	r2, [pc, #36]	; (800c614 <vPortExitCritical+0x50>)
 800c5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5f2:	4b08      	ldr	r3, [pc, #32]	; (800c614 <vPortExitCritical+0x50>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d105      	bne.n	800c606 <vPortExitCritical+0x42>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	f383 8811 	msr	BASEPRI, r3
}
 800c604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000130 	.word	0x20000130
	...

0800c620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c620:	f3ef 8009 	mrs	r0, PSP
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4b15      	ldr	r3, [pc, #84]	; (800c680 <pxCurrentTCBConst>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	f01e 0f10 	tst.w	lr, #16
 800c630:	bf08      	it	eq
 800c632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	6010      	str	r0, [r2, #0]
 800c63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c644:	f380 8811 	msr	BASEPRI, r0
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f7fe fffa 	bl	800b648 <vTaskSwitchContext>
 800c654:	f04f 0000 	mov.w	r0, #0
 800c658:	f380 8811 	msr	BASEPRI, r0
 800c65c:	bc09      	pop	{r0, r3}
 800c65e:	6819      	ldr	r1, [r3, #0]
 800c660:	6808      	ldr	r0, [r1, #0]
 800c662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c666:	f01e 0f10 	tst.w	lr, #16
 800c66a:	bf08      	it	eq
 800c66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c670:	f380 8809 	msr	PSP, r0
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst>:
 800c680:	20001cb8 	.word	0x20001cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	607b      	str	r3, [r7, #4]
}
 800c6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6a2:	f7fe ff13 	bl	800b4cc <xTaskIncrementTick>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	; (800c6c8 <SysTick_Handler+0x40>)
 800c6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6d0:	4b0b      	ldr	r3, [pc, #44]	; (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	; (800c704 <vPortSetupTimerInterrupt+0x38>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	; (800c708 <vPortSetupTimerInterrupt+0x3c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	; (800c70c <vPortSetupTimerInterrupt+0x40>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	099b      	lsrs	r3, r3, #6
 800c6e8:	4a09      	ldr	r2, [pc, #36]	; (800c710 <vPortSetupTimerInterrupt+0x44>)
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	601a      	str	r2, [r3, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	e000e010 	.word	0xe000e010
 800c704:	e000e018 	.word	0xe000e018
 800c708:	20000014 	.word	0x20000014
 800c70c:	10624dd3 	.word	0x10624dd3
 800c710:	e000e014 	.word	0xe000e014

0800c714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c724 <vPortEnableVFP+0x10>
 800c718:	6801      	ldr	r1, [r0, #0]
 800c71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c71e:	6001      	str	r1, [r0, #0]
 800c720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c722:	bf00      	nop
 800c724:	e000ed88 	.word	0xe000ed88

0800c728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c72e:	f3ef 8305 	mrs	r3, IPSR
 800c732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b0f      	cmp	r3, #15
 800c738:	d914      	bls.n	800c764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <vPortValidateInterruptPriority+0x70>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c744:	4b15      	ldr	r3, [pc, #84]	; (800c79c <vPortValidateInterruptPriority+0x74>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	7afa      	ldrb	r2, [r7, #11]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d20a      	bcs.n	800c764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c764:	4b0e      	ldr	r3, [pc, #56]	; (800c7a0 <vPortValidateInterruptPriority+0x78>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c76c:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <vPortValidateInterruptPriority+0x7c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d90a      	bls.n	800c78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	603b      	str	r3, [r7, #0]
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <vPortValidateInterruptPriority+0x60>
	}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	e000e3f0 	.word	0xe000e3f0
 800c79c:	200022e4 	.word	0x200022e4
 800c7a0:	e000ed0c 	.word	0xe000ed0c
 800c7a4:	200022e8 	.word	0x200022e8

0800c7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08a      	sub	sp, #40	; 0x28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7b4:	f7fe fdce 	bl	800b354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7b8:	4b58      	ldr	r3, [pc, #352]	; (800c91c <pvPortMalloc+0x174>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7c0:	f000 f910 	bl	800c9e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7c4:	4b56      	ldr	r3, [pc, #344]	; (800c920 <pvPortMalloc+0x178>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f040 808e 	bne.w	800c8ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d01d      	beq.n	800c814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7d8:	2208      	movs	r2, #8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4413      	add	r3, r2
 800c7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d014      	beq.n	800c814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f023 0307 	bic.w	r3, r3, #7
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <pvPortMalloc+0x6c>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	617b      	str	r3, [r7, #20]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d069      	beq.n	800c8ee <pvPortMalloc+0x146>
 800c81a:	4b42      	ldr	r3, [pc, #264]	; (800c924 <pvPortMalloc+0x17c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	429a      	cmp	r2, r3
 800c822:	d864      	bhi.n	800c8ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c824:	4b40      	ldr	r3, [pc, #256]	; (800c928 <pvPortMalloc+0x180>)
 800c826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c828:	4b3f      	ldr	r3, [pc, #252]	; (800c928 <pvPortMalloc+0x180>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c82e:	e004      	b.n	800c83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d903      	bls.n	800c84c <pvPortMalloc+0xa4>
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1f1      	bne.n	800c830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c84c:	4b33      	ldr	r3, [pc, #204]	; (800c91c <pvPortMalloc+0x174>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c852:	429a      	cmp	r2, r3
 800c854:	d04b      	beq.n	800c8ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2208      	movs	r2, #8
 800c85c:	4413      	add	r3, r2
 800c85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	1ad2      	subs	r2, r2, r3
 800c870:	2308      	movs	r3, #8
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	429a      	cmp	r2, r3
 800c876:	d91f      	bls.n	800c8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	613b      	str	r3, [r7, #16]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	1ad2      	subs	r2, r2, r3
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8b2:	69b8      	ldr	r0, [r7, #24]
 800c8b4:	f000 f8f8 	bl	800caa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8b8:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <pvPortMalloc+0x17c>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	4a18      	ldr	r2, [pc, #96]	; (800c924 <pvPortMalloc+0x17c>)
 800c8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8c6:	4b17      	ldr	r3, [pc, #92]	; (800c924 <pvPortMalloc+0x17c>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	4b18      	ldr	r3, [pc, #96]	; (800c92c <pvPortMalloc+0x184>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d203      	bcs.n	800c8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8d2:	4b14      	ldr	r3, [pc, #80]	; (800c924 <pvPortMalloc+0x17c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a15      	ldr	r2, [pc, #84]	; (800c92c <pvPortMalloc+0x184>)
 800c8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	4b10      	ldr	r3, [pc, #64]	; (800c920 <pvPortMalloc+0x178>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8ee:	f7fe fd3f 	bl	800b370 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00a      	beq.n	800c912 <pvPortMalloc+0x16a>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <pvPortMalloc+0x168>
	return pvReturn;
 800c912:	69fb      	ldr	r3, [r7, #28]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3728      	adds	r7, #40	; 0x28
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	20002ef4 	.word	0x20002ef4
 800c920:	20002f00 	.word	0x20002f00
 800c924:	20002ef8 	.word	0x20002ef8
 800c928:	20002eec 	.word	0x20002eec
 800c92c:	20002efc 	.word	0x20002efc

0800c930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d048      	beq.n	800c9d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c942:	2308      	movs	r3, #8
 800c944:	425b      	negs	r3, r3
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4413      	add	r3, r2
 800c94a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <vPortFree+0xac>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4013      	ands	r3, r2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <vPortFree+0x44>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <vPortFree+0x62>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60bb      	str	r3, [r7, #8]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <vPortFree+0xac>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d019      	beq.n	800c9d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d115      	bne.n	800c9d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <vPortFree+0xac>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b8:	f7fe fccc 	bl	800b354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <vPortFree+0xb0>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	4a06      	ldr	r2, [pc, #24]	; (800c9e0 <vPortFree+0xb0>)
 800c9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f000 f86c 	bl	800caa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c9d0:	f7fe fcce 	bl	800b370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9d4:	bf00      	nop
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20002f00 	.word	0x20002f00
 800c9e0:	20002ef8 	.word	0x20002ef8

0800c9e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c9ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9f0:	4b27      	ldr	r3, [pc, #156]	; (800ca90 <prvHeapInit+0xac>)
 800c9f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f003 0307 	and.w	r3, r3, #7
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00c      	beq.n	800ca18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3307      	adds	r3, #7
 800ca02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f023 0307 	bic.w	r3, r3, #7
 800ca0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	4a1f      	ldr	r2, [pc, #124]	; (800ca90 <prvHeapInit+0xac>)
 800ca14:	4413      	add	r3, r2
 800ca16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca1c:	4a1d      	ldr	r2, [pc, #116]	; (800ca94 <prvHeapInit+0xb0>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca22:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <prvHeapInit+0xb0>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca30:	2208      	movs	r2, #8
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	1a9b      	subs	r3, r3, r2
 800ca36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 0307 	bic.w	r3, r3, #7
 800ca3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4a15      	ldr	r2, [pc, #84]	; (800ca98 <prvHeapInit+0xb4>)
 800ca44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <prvHeapInit+0xb4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca4e:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <prvHeapInit+0xb4>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca64:	4b0c      	ldr	r3, [pc, #48]	; (800ca98 <prvHeapInit+0xb4>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	4a0a      	ldr	r2, [pc, #40]	; (800ca9c <prvHeapInit+0xb8>)
 800ca72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <prvHeapInit+0xbc>)
 800ca7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca7c:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <prvHeapInit+0xc0>)
 800ca7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	200022ec 	.word	0x200022ec
 800ca94:	20002eec 	.word	0x20002eec
 800ca98:	20002ef4 	.word	0x20002ef4
 800ca9c:	20002efc 	.word	0x20002efc
 800caa0:	20002ef8 	.word	0x20002ef8
 800caa4:	20002f00 	.word	0x20002f00

0800caa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cab0:	4b28      	ldr	r3, [pc, #160]	; (800cb54 <prvInsertBlockIntoFreeList+0xac>)
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	e002      	b.n	800cabc <prvInsertBlockIntoFreeList+0x14>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d8f7      	bhi.n	800cab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	4413      	add	r3, r2
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d108      	bne.n	800caea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	441a      	add	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	441a      	add	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d118      	bne.n	800cb30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	4b15      	ldr	r3, [pc, #84]	; (800cb58 <prvInsertBlockIntoFreeList+0xb0>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d00d      	beq.n	800cb26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	441a      	add	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	e008      	b.n	800cb38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb26:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <prvInsertBlockIntoFreeList+0xb0>)
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	e003      	b.n	800cb38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d002      	beq.n	800cb46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb46:	bf00      	nop
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	20002eec 	.word	0x20002eec
 800cb58:	20002ef4 	.word	0x20002ef4

0800cb5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	6039      	str	r1, [r7, #0]
 800cb66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2212      	movs	r2, #18
 800cb6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb6e:	4b03      	ldr	r3, [pc, #12]	; (800cb7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	20000150 	.word	0x20000150

0800cb80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	6039      	str	r1, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2204      	movs	r2, #4
 800cb90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb92:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	20000164 	.word	0x20000164

0800cba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6039      	str	r1, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	4907      	ldr	r1, [pc, #28]	; (800cbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbba:	4808      	ldr	r0, [pc, #32]	; (800cbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800cbbc:	f7fc ffe3 	bl	8009b86 <USBD_GetString>
 800cbc0:	e004      	b.n	800cbcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	4904      	ldr	r1, [pc, #16]	; (800cbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbc6:	4805      	ldr	r0, [pc, #20]	; (800cbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800cbc8:	f7fc ffdd 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20002f04 	.word	0x20002f04
 800cbdc:	0800d39c 	.word	0x0800d39c

0800cbe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	4904      	ldr	r1, [pc, #16]	; (800cc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbf0:	4804      	ldr	r0, [pc, #16]	; (800cc04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbf2:	f7fc ffc8 	bl	8009b86 <USBD_GetString>
  return USBD_StrDesc;
 800cbf6:	4b02      	ldr	r3, [pc, #8]	; (800cc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20002f04 	.word	0x20002f04
 800cc04:	0800d3b4 	.word	0x0800d3b4

0800cc08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	221a      	movs	r2, #26
 800cc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc1a:	f000 f843 	bl	800cca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc1e:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20000168 	.word	0x20000168

0800cc2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d105      	bne.n	800cc4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	4907      	ldr	r1, [pc, #28]	; (800cc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc42:	4808      	ldr	r0, [pc, #32]	; (800cc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc44:	f7fc ff9f 	bl	8009b86 <USBD_GetString>
 800cc48:	e004      	b.n	800cc54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	4904      	ldr	r1, [pc, #16]	; (800cc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc4e:	4805      	ldr	r0, [pc, #20]	; (800cc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc50:	f7fc ff99 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc54:	4b02      	ldr	r3, [pc, #8]	; (800cc60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20002f04 	.word	0x20002f04
 800cc64:	0800d3c8 	.word	0x0800d3c8

0800cc68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	4907      	ldr	r1, [pc, #28]	; (800cc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc7e:	4808      	ldr	r0, [pc, #32]	; (800cca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc80:	f7fc ff81 	bl	8009b86 <USBD_GetString>
 800cc84:	e004      	b.n	800cc90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4904      	ldr	r1, [pc, #16]	; (800cc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc8a:	4805      	ldr	r0, [pc, #20]	; (800cca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc8c:	f7fc ff7b 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc90:	4b02      	ldr	r3, [pc, #8]	; (800cc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20002f04 	.word	0x20002f04
 800cca0:	0800d3d4 	.word	0x0800d3d4

0800cca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccaa:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <Get_SerialNum+0x44>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccb0:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <Get_SerialNum+0x48>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccb6:	4b0e      	ldr	r3, [pc, #56]	; (800ccf0 <Get_SerialNum+0x4c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d009      	beq.n	800ccde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccca:	2208      	movs	r2, #8
 800cccc:	4909      	ldr	r1, [pc, #36]	; (800ccf4 <Get_SerialNum+0x50>)
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 f814 	bl	800ccfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ccd4:	2204      	movs	r2, #4
 800ccd6:	4908      	ldr	r1, [pc, #32]	; (800ccf8 <Get_SerialNum+0x54>)
 800ccd8:	68b8      	ldr	r0, [r7, #8]
 800ccda:	f000 f80f 	bl	800ccfc <IntToUnicode>
  }
}
 800ccde:	bf00      	nop
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	1ffff7ac 	.word	0x1ffff7ac
 800ccec:	1ffff7b0 	.word	0x1ffff7b0
 800ccf0:	1ffff7b4 	.word	0x1ffff7b4
 800ccf4:	2000016a 	.word	0x2000016a
 800ccf8:	2000017a 	.word	0x2000017a

0800ccfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
 800cd12:	e027      	b.n	800cd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	0f1b      	lsrs	r3, r3, #28
 800cd18:	2b09      	cmp	r3, #9
 800cd1a:	d80b      	bhi.n	800cd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	0f1b      	lsrs	r3, r3, #28
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	4619      	mov	r1, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3230      	adds	r2, #48	; 0x30
 800cd2e:	b2d2      	uxtb	r2, r2
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	e00a      	b.n	800cd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	0f1b      	lsrs	r3, r3, #28
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	4619      	mov	r1, r3
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	440b      	add	r3, r1
 800cd44:	3237      	adds	r2, #55	; 0x37
 800cd46:	b2d2      	uxtb	r2, r2
 800cd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	011b      	lsls	r3, r3, #4
 800cd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	3301      	adds	r3, #1
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	3301      	adds	r3, #1
 800cd62:	75fb      	strb	r3, [r7, #23]
 800cd64:	7dfa      	ldrb	r2, [r7, #23]
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d3d3      	bcc.n	800cd14 <IntToUnicode+0x18>
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	bf00      	nop
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
	...

0800cd7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a10      	ldr	r2, [pc, #64]	; (800cdcc <HAL_PCD_MspInit+0x50>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d119      	bne.n	800cdc2 <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cd8e:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <HAL_PCD_MspInit+0x54>)
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	4a0f      	ldr	r2, [pc, #60]	; (800cdd0 <HAL_PCD_MspInit+0x54>)
 800cd94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd98:	61d3      	str	r3, [r2, #28]
 800cd9a:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <HAL_PCD_MspInit+0x54>)
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <HAL_PCD_MspInit+0x58>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a0a      	ldr	r2, [pc, #40]	; (800cdd4 <HAL_PCD_MspInit+0x58>)
 800cdac:	f043 0320 	orr.w	r3, r3, #32
 800cdb0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2105      	movs	r1, #5
 800cdb6:	204b      	movs	r0, #75	; 0x4b
 800cdb8:	f7f5 fb54 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cdbc:	204b      	movs	r0, #75	; 0x4b
 800cdbe:	f7f5 fb6d 	bl	800249c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	40005c00 	.word	0x40005c00
 800cdd0:	40021000 	.word	0x40021000
 800cdd4:	40010000 	.word	0x40010000

0800cdd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7fb ff94 	bl	8008d1c <USBD_LL_SetupStage>
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ce0e:	78fa      	ldrb	r2, [r7, #3]
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	440b      	add	r3, r1
 800ce1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	78fb      	ldrb	r3, [r7, #3]
 800ce24:	4619      	mov	r1, r3
 800ce26:	f7fb ffc6 	bl	8008db6 <USBD_LL_DataOutStage>
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ce44:	78fa      	ldrb	r2, [r7, #3]
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	440b      	add	r3, r1
 800ce52:	333c      	adds	r3, #60	; 0x3c
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	78fb      	ldrb	r3, [r7, #3]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f7fc f81d 	bl	8008e98 <USBD_LL_DataInStage>
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b082      	sub	sp, #8
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fc f930 	bl	80090da <USBD_LL_SOF>
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d001      	beq.n	800ce9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce96:	f7f3 fea6 	bl	8000be6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cea0:	7bfa      	ldrb	r2, [r7, #15]
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fc f8dd 	bl	8009064 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fc f896 	bl	8008fe2 <USBD_LL_Reset>
}
 800ceb6:	bf00      	nop
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fc f8d8 	bl	8009084 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cedc:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <HAL_PCD_SuspendCallback+0x30>)
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	4a03      	ldr	r2, [pc, #12]	; (800cef0 <HAL_PCD_SuspendCallback+0x30>)
 800cee2:	f043 0306 	orr.w	r3, r3, #6
 800cee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	e000ed00 	.word	0xe000ed00

0800cef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fc f8d3 	bl	80090ae <USBD_LL_Resume>
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf18:	4a28      	ldr	r2, [pc, #160]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a26      	ldr	r2, [pc, #152]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf28:	4b24      	ldr	r3, [pc, #144]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf2a:	4a25      	ldr	r2, [pc, #148]	; (800cfc0 <USBD_LL_Init+0xb0>)
 800cf2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf2e:	4b23      	ldr	r3, [pc, #140]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf30:	2208      	movs	r2, #8
 800cf32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf34:	4b21      	ldr	r3, [pc, #132]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf36:	2202      	movs	r2, #2
 800cf38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf3a:	4b20      	ldr	r3, [pc, #128]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf40:	4b1e      	ldr	r3, [pc, #120]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf46:	4b1d      	ldr	r3, [pc, #116]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cf4c:	481b      	ldr	r0, [pc, #108]	; (800cfbc <USBD_LL_Init+0xac>)
 800cf4e:	f7f5 fd11 	bl	8002974 <HAL_PCD_Init>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cf58:	f7f3 fe45 	bl	8000be6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf62:	2318      	movs	r3, #24
 800cf64:	2200      	movs	r2, #0
 800cf66:	2100      	movs	r1, #0
 800cf68:	f7f7 f996 	bl	8004298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf72:	2358      	movs	r3, #88	; 0x58
 800cf74:	2200      	movs	r2, #0
 800cf76:	2180      	movs	r1, #128	; 0x80
 800cf78:	f7f7 f98e 	bl	8004298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf82:	23c0      	movs	r3, #192	; 0xc0
 800cf84:	2200      	movs	r2, #0
 800cf86:	2181      	movs	r1, #129	; 0x81
 800cf88:	f7f7 f986 	bl	8004298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf92:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cf96:	2200      	movs	r2, #0
 800cf98:	2101      	movs	r1, #1
 800cf9a:	f7f7 f97d 	bl	8004298 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	2182      	movs	r1, #130	; 0x82
 800cfac:	f7f7 f974 	bl	8004298 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20003104 	.word	0x20003104
 800cfc0:	40005c00 	.word	0x40005c00

0800cfc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f5 fda8 	bl	8002b30 <HAL_PCD_Start>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 f954 	bl	800d294 <USBD_Get_USB_Status>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b084      	sub	sp, #16
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	4608      	mov	r0, r1
 800d004:	4611      	mov	r1, r2
 800d006:	461a      	mov	r2, r3
 800d008:	4603      	mov	r3, r0
 800d00a:	70fb      	strb	r3, [r7, #3]
 800d00c:	460b      	mov	r3, r1
 800d00e:	70bb      	strb	r3, [r7, #2]
 800d010:	4613      	mov	r3, r2
 800d012:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d022:	78bb      	ldrb	r3, [r7, #2]
 800d024:	883a      	ldrh	r2, [r7, #0]
 800d026:	78f9      	ldrb	r1, [r7, #3]
 800d028:	f7f5 fec4 	bl	8002db4 <HAL_PCD_EP_Open>
 800d02c:	4603      	mov	r3, r0
 800d02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	4618      	mov	r0, r3
 800d034:	f000 f92e 	bl	800d294 <USBD_Get_USB_Status>
 800d038:	4603      	mov	r3, r0
 800d03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	460b      	mov	r3, r1
 800d050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d060:	78fa      	ldrb	r2, [r7, #3]
 800d062:	4611      	mov	r1, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7f5 ff0b 	bl	8002e80 <HAL_PCD_EP_Close>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f90f 	bl	800d294 <USBD_Get_USB_Status>
 800d076:	4603      	mov	r3, r0
 800d078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d07a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d09e:	78fa      	ldrb	r2, [r7, #3]
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f5 ffcc 	bl	8003040 <HAL_PCD_EP_SetStall>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 f8f0 	bl	800d294 <USBD_Get_USB_Status>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0dc:	78fa      	ldrb	r2, [r7, #3]
 800d0de:	4611      	mov	r1, r2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f5 ffff 	bl	80030e4 <HAL_PCD_EP_ClrStall>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 f8d1 	bl	800d294 <USBD_Get_USB_Status>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d112:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	da0c      	bge.n	800d136 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d11c:	78fb      	ldrb	r3, [r7, #3]
 800d11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d122:	68f9      	ldr	r1, [r7, #12]
 800d124:	1c5a      	adds	r2, r3, #1
 800d126:	4613      	mov	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	00db      	lsls	r3, r3, #3
 800d12e:	440b      	add	r3, r1
 800d130:	3302      	adds	r3, #2
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	e00b      	b.n	800d14e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d136:	78fb      	ldrb	r3, [r7, #3]
 800d138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d13c:	68f9      	ldr	r1, [r7, #12]
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	440b      	add	r3, r1
 800d148:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d14c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	460b      	mov	r3, r1
 800d164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d174:	78fa      	ldrb	r2, [r7, #3]
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f7f5 fdf6 	bl	8002d6a <HAL_PCD_SetAddress>
 800d17e:	4603      	mov	r3, r0
 800d180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d182:	7bfb      	ldrb	r3, [r7, #15]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f885 	bl	800d294 <USBD_Get_USB_Status>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	72fb      	strb	r3, [r7, #11]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1ba:	893b      	ldrh	r3, [r7, #8]
 800d1bc:	7af9      	ldrb	r1, [r7, #11]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	f7f5 fefb 	bl	8002fba <HAL_PCD_EP_Transmit>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 f862 	bl	800d294 <USBD_Get_USB_Status>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	72fb      	strb	r3, [r7, #11]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d200:	893b      	ldrh	r3, [r7, #8]
 800d202:	7af9      	ldrb	r1, [r7, #11]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	f7f5 fe83 	bl	8002f10 <HAL_PCD_EP_Receive>
 800d20a:	4603      	mov	r3, r0
 800d20c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	4618      	mov	r0, r3
 800d212:	f000 f83f 	bl	800d294 <USBD_Get_USB_Status>
 800d216:	4603      	mov	r3, r0
 800d218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d21a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d236:	78fa      	ldrb	r2, [r7, #3]
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f5 fea5 	bl	8002f8a <HAL_PCD_EP_GetRxCount>
 800d240:	4603      	mov	r3, r0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d254:	4b03      	ldr	r3, [pc, #12]	; (800d264 <USBD_static_malloc+0x18>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	200033f0 	.word	0x200033f0

0800d268 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]

}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d817      	bhi.n	800d2d8 <USBD_Get_USB_Status+0x44>
 800d2a8:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <USBD_Get_USB_Status+0x1c>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2c1 	.word	0x0800d2c1
 800d2b4:	0800d2c7 	.word	0x0800d2c7
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2d3 	.word	0x0800d2d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c4:	e00b      	b.n	800d2de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ca:	e008      	b.n	800d2de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d0:	e005      	b.n	800d2de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d6:	e002      	b.n	800d2de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	73fb      	strb	r3, [r7, #15]
    break;
 800d2dc:	bf00      	nop
  }
  return usb_status;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <__libc_init_array>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	4d0d      	ldr	r5, [pc, #52]	; (800d324 <__libc_init_array+0x38>)
 800d2f0:	4c0d      	ldr	r4, [pc, #52]	; (800d328 <__libc_init_array+0x3c>)
 800d2f2:	1b64      	subs	r4, r4, r5
 800d2f4:	10a4      	asrs	r4, r4, #2
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	42a6      	cmp	r6, r4
 800d2fa:	d109      	bne.n	800d310 <__libc_init_array+0x24>
 800d2fc:	4d0b      	ldr	r5, [pc, #44]	; (800d32c <__libc_init_array+0x40>)
 800d2fe:	4c0c      	ldr	r4, [pc, #48]	; (800d330 <__libc_init_array+0x44>)
 800d300:	f000 f82e 	bl	800d360 <_init>
 800d304:	1b64      	subs	r4, r4, r5
 800d306:	10a4      	asrs	r4, r4, #2
 800d308:	2600      	movs	r6, #0
 800d30a:	42a6      	cmp	r6, r4
 800d30c:	d105      	bne.n	800d31a <__libc_init_array+0x2e>
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	f855 3b04 	ldr.w	r3, [r5], #4
 800d314:	4798      	blx	r3
 800d316:	3601      	adds	r6, #1
 800d318:	e7ee      	b.n	800d2f8 <__libc_init_array+0xc>
 800d31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31e:	4798      	blx	r3
 800d320:	3601      	adds	r6, #1
 800d322:	e7f2      	b.n	800d30a <__libc_init_array+0x1e>
 800d324:	0800d440 	.word	0x0800d440
 800d328:	0800d440 	.word	0x0800d440
 800d32c:	0800d440 	.word	0x0800d440
 800d330:	0800d444 	.word	0x0800d444

0800d334 <memcpy>:
 800d334:	440a      	add	r2, r1
 800d336:	4291      	cmp	r1, r2
 800d338:	f100 33ff 	add.w	r3, r0, #4294967295
 800d33c:	d100      	bne.n	800d340 <memcpy+0xc>
 800d33e:	4770      	bx	lr
 800d340:	b510      	push	{r4, lr}
 800d342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d1f9      	bne.n	800d342 <memcpy+0xe>
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <memset>:
 800d350:	4402      	add	r2, r0
 800d352:	4603      	mov	r3, r0
 800d354:	4293      	cmp	r3, r2
 800d356:	d100      	bne.n	800d35a <memset+0xa>
 800d358:	4770      	bx	lr
 800d35a:	f803 1b01 	strb.w	r1, [r3], #1
 800d35e:	e7f9      	b.n	800d354 <memset+0x4>

0800d360 <_init>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	bf00      	nop
 800d364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d366:	bc08      	pop	{r3}
 800d368:	469e      	mov	lr, r3
 800d36a:	4770      	bx	lr

0800d36c <_fini>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	bf00      	nop
 800d370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d372:	bc08      	pop	{r3}
 800d374:	469e      	mov	lr, r3
 800d376:	4770      	bx	lr
